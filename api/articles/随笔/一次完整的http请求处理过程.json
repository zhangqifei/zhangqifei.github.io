{"title":"一次完整的http请求处理过程","slug":"随笔/一次完整的http请求处理过程","date":"2017-05-05T01:12:22.000Z","updated":"2018-04-13T02:52:26.255Z","comments":true,"path":"api/articles/随笔/一次完整的http请求处理过程.json","excerpt":"Web服务请求处理步骤 [Figure] ","covers":["http://zhangqifei.top/picture/httpd/4.jpg","http://zhangqifei.top/picture/httpd/5.jpg"],"content":"<h3 id=\"Web服务请求处理步骤\"><a href=\"#Web服务请求处理步骤\" class=\"headerlink\" title=\"Web服务请求处理步骤\"></a>Web服务请求处理步骤</h3><center><img src=\"http://zhangqifei.top/picture/httpd/4.jpg\" alt=\"Web服务请求处理步骤\"></center>\n\n<a id=\"more\"></a>\n<h4 id=\"一次完整的http请求处理过程\"><a href=\"#一次完整的http请求处理过程\" class=\"headerlink\" title=\"一次完整的http请求处理过程\"></a>一次完整的http请求处理过程</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、建立连接：接收或拒绝连接请求</span><br><span class=\"line\">2、接收请求：接收客户端请求报文中对某资源的一次请求的过程</span><br><span class=\"line\">3、处理请求：服务器对请求报文进行解析，并获取请求的资源及请求方法等相关信息，根据方法，资源，首部和可选的主体部分对请求进行处理</span><br><span class=\"line\">    元数据：请求报文首部</span><br><span class=\"line\">    &lt;method&gt; &lt;URL&gt; &lt;VERSION&gt;</span><br><span class=\"line\">    HEADERS格式name:value</span><br><span class=\"line\">    &lt;request body&gt;</span><br><span class=\"line\">    示例：</span><br><span class=\"line\">    Host: www.chuyuni.cn   请求的主机名称</span><br><span class=\"line\">    Server: Apache/2.4.7</span><br><span class=\"line\">HTTP常用请求方式，MethodGET、POST、HEAD、PUT、DELETE、TRACE、OPTIONS</span><br><span class=\"line\">4、访问资源：服务器获取请求报文中请求的资源web服务器，即存放了web资源的服务器，负责向请求者提供对方请求的静态资源，或动态运行后生成的资源</span><br><span class=\"line\">        资源放置于本地文件系统特定的路径：DocRoot</span><br><span class=\"line\">        DocRoot → /var/www/html</span><br><span class=\"line\">        /var/www/html/images/logo.jpg</span><br><span class=\"line\">        http://www.magedu.com/images/logo.jpg</span><br><span class=\"line\">    web服务器资源路径映射方式：</span><br><span class=\"line\">    (a) docroot        (b) alias</span><br><span class=\"line\">    (c) 虚拟主机docroot(d) 用户家目录docroot</span><br><span class=\"line\">5、构建响应报文：一旦Web服务器识别除了资源，就执行请求方法中描述的动作，并返回响应报文。响应报文中包含有响应状态码、响应首部，如果生成了响应主体的话，还包括响应主体</span><br><span class=\"line\">    1）响应实体：如果事务处理产生了响应主体，就将内容放在响应报文中回送过去。响应报文中通常包括：描述了响应主体MIME类型的Content-Type首部描述了响应主体长度的Content-Length实际报文的主体内容</span><br><span class=\"line\">    2）URL重定向：web服务构建的响应并非客户端请求的资源，而是资源另外一个访问路径</span><br><span class=\"line\">    永久重定向：http://www.360buy.com</span><br><span class=\"line\">    临时重定向：http://www.taobao.com</span><br><span class=\"line\">    3）MIME类型：Web服务器要负责确定响应主体的MIME类型。多种配置服务器的方法可将MIME类型与资源管理起来魔法分类：Apache web服务器可以扫描每个资源的内容，并将其与一个已知模式表(被称为魔法文件)进行匹配，以决定每个文件的MIME类型。这样做可能比较慢，但很方便，尤其是文件没有标准扩展名时显式分类：可以对Web服务器进行配置，使其不考虑文件的扩展名或内容，强制特定文件或目录内容拥有某个MIME类型类型协商：有些Web服务器经过配置，可以以多种文档格式来存储资源。在这种情况下，可以配置Web服务器，使其可以通过与用户的协商来决定使用哪种格式(及相关的MIME类型)&quot;最好&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">6、发送响应报文：Web服务器通过连接发送数据时也会面临与接收数据一样的问题。服务器可能有很多条到各个客户端的连接，有些是空闲的，有些在向服务器发送数据，还有一些在向客户端回送响应数据。服务器要记录连接的状态，还要特别注意对持久连接的处理。对非持久连接而言，服务器应该在发送了整条报文之后，关闭自己这一端的连接。对持久连接来说，连接可能仍保持打开状态，在这种情况下，服务器要正确地计算Content-Length首部，不然客户端就无法知道响应什么时候结束了</span><br><span class=\"line\"></span><br><span class=\"line\">7、记录日志：最后，当事务结束时，Web服务器会在日志文件中添加一个条目，来描述已执行的事务</span><br></pre></td></tr></table></figure>\n<p>Web访问响应模型（Web I/O）</p>\n<blockquote>\n<ul>\n<li>单进程I/O模型：启动一个进程处理用户请求，而且一次只处理一个，多个请求被串行响应</li>\n<li>多进程I/O模型：并行启动多个进程,每个进程响应一个连接请求</li>\n<li>复用I/O结构：启动一个进程，同时响应N个连接请求实现方法：多线程模型和事件驱动多线程模型：一个进程生成N个线程，每线程响应一个连接请求事件驱动：一个进程处理N个请求</li>\n<li>复用的多进程I/O模型：启动M个进程，每个进程响应N个连接请求，同时接收M*N个请求</li>\n</ul>\n</blockquote>\n<center><img src=\"http://zhangqifei.top/picture/httpd/5.jpg\" alt=\"Web访问响应模型\"></center>\n\n","more":"<h4 id=\"一次完整的http请求处理过程\"><a href=\"#一次完整的http请求处理过程\" class=\"headerlink\" title=\"一次完整的http请求处理过程\"></a>一次完整的http请求处理过程</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、建立连接：接收或拒绝连接请求</span><br><span class=\"line\">2、接收请求：接收客户端请求报文中对某资源的一次请求的过程</span><br><span class=\"line\">3、处理请求：服务器对请求报文进行解析，并获取请求的资源及请求方法等相关信息，根据方法，资源，首部和可选的主体部分对请求进行处理</span><br><span class=\"line\">    元数据：请求报文首部</span><br><span class=\"line\">    &lt;method&gt; &lt;URL&gt; &lt;VERSION&gt;</span><br><span class=\"line\">    HEADERS格式name:value</span><br><span class=\"line\">    &lt;request body&gt;</span><br><span class=\"line\">    示例：</span><br><span class=\"line\">    Host: www.chuyuni.cn   请求的主机名称</span><br><span class=\"line\">    Server: Apache/2.4.7</span><br><span class=\"line\">HTTP常用请求方式，MethodGET、POST、HEAD、PUT、DELETE、TRACE、OPTIONS</span><br><span class=\"line\">4、访问资源：服务器获取请求报文中请求的资源web服务器，即存放了web资源的服务器，负责向请求者提供对方请求的静态资源，或动态运行后生成的资源</span><br><span class=\"line\">        资源放置于本地文件系统特定的路径：DocRoot</span><br><span class=\"line\">        DocRoot → /var/www/html</span><br><span class=\"line\">        /var/www/html/images/logo.jpg</span><br><span class=\"line\">        http://www.magedu.com/images/logo.jpg</span><br><span class=\"line\">    web服务器资源路径映射方式：</span><br><span class=\"line\">    (a) docroot        (b) alias</span><br><span class=\"line\">    (c) 虚拟主机docroot(d) 用户家目录docroot</span><br><span class=\"line\">5、构建响应报文：一旦Web服务器识别除了资源，就执行请求方法中描述的动作，并返回响应报文。响应报文中包含有响应状态码、响应首部，如果生成了响应主体的话，还包括响应主体</span><br><span class=\"line\">    1）响应实体：如果事务处理产生了响应主体，就将内容放在响应报文中回送过去。响应报文中通常包括：描述了响应主体MIME类型的Content-Type首部描述了响应主体长度的Content-Length实际报文的主体内容</span><br><span class=\"line\">    2）URL重定向：web服务构建的响应并非客户端请求的资源，而是资源另外一个访问路径</span><br><span class=\"line\">    永久重定向：http://www.360buy.com</span><br><span class=\"line\">    临时重定向：http://www.taobao.com</span><br><span class=\"line\">    3）MIME类型：Web服务器要负责确定响应主体的MIME类型。多种配置服务器的方法可将MIME类型与资源管理起来魔法分类：Apache web服务器可以扫描每个资源的内容，并将其与一个已知模式表(被称为魔法文件)进行匹配，以决定每个文件的MIME类型。这样做可能比较慢，但很方便，尤其是文件没有标准扩展名时显式分类：可以对Web服务器进行配置，使其不考虑文件的扩展名或内容，强制特定文件或目录内容拥有某个MIME类型类型协商：有些Web服务器经过配置，可以以多种文档格式来存储资源。在这种情况下，可以配置Web服务器，使其可以通过与用户的协商来决定使用哪种格式(及相关的MIME类型)&quot;最好&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">6、发送响应报文：Web服务器通过连接发送数据时也会面临与接收数据一样的问题。服务器可能有很多条到各个客户端的连接，有些是空闲的，有些在向服务器发送数据，还有一些在向客户端回送响应数据。服务器要记录连接的状态，还要特别注意对持久连接的处理。对非持久连接而言，服务器应该在发送了整条报文之后，关闭自己这一端的连接。对持久连接来说，连接可能仍保持打开状态，在这种情况下，服务器要正确地计算Content-Length首部，不然客户端就无法知道响应什么时候结束了</span><br><span class=\"line\"></span><br><span class=\"line\">7、记录日志：最后，当事务结束时，Web服务器会在日志文件中添加一个条目，来描述已执行的事务</span><br></pre></td></tr></table></figure>\n<p>Web访问响应模型（Web I/O）</p>\n<blockquote>\n<ul>\n<li>单进程I/O模型：启动一个进程处理用户请求，而且一次只处理一个，多个请求被串行响应</li>\n<li>多进程I/O模型：并行启动多个进程,每个进程响应一个连接请求</li>\n<li>复用I/O结构：启动一个进程，同时响应N个连接请求实现方法：多线程模型和事件驱动多线程模型：一个进程生成N个线程，每线程响应一个连接请求事件驱动：一个进程处理N个请求</li>\n<li>复用的多进程I/O模型：启动M个进程，每个进程响应N个连接请求，同时接收M*N个请求</li>\n</ul>\n</blockquote>\n<center><img src=\"http://zhangqifei.top/picture/httpd/5.jpg\" alt=\"Web访问响应模型\"></center>","categories":[{"name":"linux","path":"api/categories/linux.json"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"}]}