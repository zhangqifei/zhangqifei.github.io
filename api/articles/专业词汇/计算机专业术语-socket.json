{"title":"计算机专业词汇-socket","slug":"专业词汇/计算机专业术语-socket","date":"2016-04-04T01:41:22.000Z","updated":"2019-05-22T03:47:57.921Z","comments":true,"path":"api/articles/专业词汇/计算机专业术语-socket.json","excerpt":null,"covers":["http://zhangqifei.top/picture/httpd/2.png","http://img.blog.csdn.net/20180125205232050"],"content":"<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。</li>\n<li>建立网络通信连接至少要一对端口号(socket)。socket本质是编程接口(API)，对TCP/IP的封装，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口；HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。</li>\n<li>Socket的英文原义是“孔”或“插座”。作为BSD UNIX的进程通信机制，取后一种意思。通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄，可以用来实现不同虚拟机或不同计算机之间的通信。在Internet上的主机一般运行了多个服务软件，同时提供几种服务。每种服务都打开一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务。Socket正如其英文原义那样，像一个多孔插座。一台主机犹如布满各种插座的房间，每个插座有一个编号，有的插座提供220伏交流电， 有的提供110伏交流电，有的则提供有线电视节目。 客户软件将插头插到不同编号的插座，就可以得到不同的服务。</li>\n</ul>\n<h3 id=\"客户-服务器程序连接过程\"><a href=\"#客户-服务器程序连接过程\" class=\"headerlink\" title=\"客户/服务器程序连接过程\"></a>客户/服务器程序连接过程</h3><center><img src=\"http://zhangqifei.top/picture/httpd/2.png\" alt=\"客户/服务器程序的套接字函数\"></center>\n\n<p>根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤：服务器监听，客户端请求，连接确认。<br>（1）服务器监听：是服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态。<br>（2）客户端请求：是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。<br>（3）连接确认：是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，它就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>\n<center><img src=\"http://img.blog.csdn.net/20180125205232050\" alt=\"Socket套接字\"></center>\n\n\n<ul>\n<li>Socket:套接字，进程间通信IPC的一种实现，允许位于不同主机（或同一主机）上不同进程之间进行通信和数据交换，SocketAPI出现于1983年，4.2 BSD实现</li>\n<li>Socket API：封装了内核中所提供的socket通信相关的系统调用</li>\n<li>Socket Domain：根据其所使用的地址<ul>\n<li>AF_INET：Address Family，IPv4</li>\n<li>AF_INET6：IPv6</li>\n<li>AF_UNIX：同一主机上不同进程之间通信时使用</li>\n</ul>\n</li>\n<li>Socket Type：根据使用的传输层协议<ul>\n<li>SOCK_STREAM：流，tcp套接字，可靠地传递、面向连接</li>\n<li>SOCK_DGRAM：数据报，udp套接字，不可靠地传递、无连接</li>\n<li>SOCK_RAW: 裸套接字,无须tcp或tdp,APP直接通过IP包通信</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在建立通信连接的每一端，进程间的传输要有两个标志：</span><br><span class=\"line\">\tIP地址和端口号，合称为套接字地址socket address</span><br><span class=\"line\">\t\t客户机套接字地址定义了一个唯一的客户进程</span><br><span class=\"line\">\t\t服务器套接字地址定义了一个唯一的服务器进程</span><br><span class=\"line\">\t套接字地址 172.18.0.18:80</span><br></pre></td></tr></table></figure>\n<h3 id=\"套接字相关的系统调用：\"><a href=\"#套接字相关的系统调用：\" class=\"headerlink\" title=\"套接字相关的系统调用：\"></a>套接字相关的系统调用：</h3><table>\n<thead>\n<tr>\n<th>名字</th>\n<th>含义</th>\n<th>名字</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>socket()</td>\n<td>创建一个套接字</td>\n<td>bind()</td>\n<td>绑定IP和端口</td>\n</tr>\n<tr>\n<td>listen()</td>\n<td>监听</td>\n<td>accept()</td>\n<td>接收请求</td>\n</tr>\n<tr>\n<td>connect()</td>\n<td>请求连接建立</td>\n<td>write()</td>\n<td>发送</td>\n</tr>\n<tr>\n<td>read()</td>\n<td>接收</td>\n<td>close()</td>\n<td>关闭连接</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Socket通信过程示例：\"><a href=\"#Socket通信过程示例：\" class=\"headerlink\" title=\"Socket通信过程示例：\"></a>Socket通信过程示例：</h3><p>下面用一段简单Python程序具体实现下：</p>\n<p>服务器端tcpserver.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">import socket                                                                          </span><br><span class=\"line\">HOST=&apos;172.18.2.232&apos;</span><br><span class=\"line\">PORT=9527</span><br><span class=\"line\">BUFFER=4096</span><br><span class=\"line\">sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">sock.bind((HOST,PORT))</span><br><span class=\"line\">sock.listen(3)</span><br><span class=\"line\">print(&apos;tcpServer listen at: %s:%s\\n\\r&apos; %(HOST,PORT))</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    client_sock,client_addr=sock.accept()</span><br><span class=\"line\">    print(&apos;%s:%s connect&apos; %client_addr)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        recv=client_sock.recv(BUFFER)</span><br><span class=\"line\">        if not recv:</span><br><span class=\"line\">            client_sock.close()</span><br><span class=\"line\">            break</span><br><span class=\"line\">        print(&apos;[Client %s:%s said]:%s&apos; %(client_addr[0],client_addr[1],recv))</span><br><span class=\"line\">        client_sock.send(&apos;tcpServer has received your message&apos;)</span><br><span class=\"line\">sock.close()</span><br></pre></td></tr></table></figure></p>\n<p>客户端tcpclient.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">import socket</span><br><span class=\"line\">HOST=&apos;172.18.2.232&apos;</span><br><span class=\"line\">PORT=9527</span><br><span class=\"line\">BUFFER=4096</span><br><span class=\"line\">sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">sock.connect((HOST,PORT))</span><br><span class=\"line\">sock.send(&apos;hello, tcpServer!&apos;)</span><br><span class=\"line\">recv=sock.recv(BUFFER)</span><br><span class=\"line\">print(&apos;[tcpServer said]: %s&apos; % recv)</span><br><span class=\"line\">sock.close()</span><br></pre></td></tr></table></figure></p>\n<p>执行tcpserver.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]#python tcpserver.py </span><br><span class=\"line\">tcpServer listen at: 172.18.2.232:9527</span><br><span class=\"line\"></span><br><span class=\"line\">172.18.2.232:46004 connect</span><br><span class=\"line\">[Client 172.18.2.232:46004 said]:hello, tcpServer!</span><br></pre></td></tr></table></figure></p>\n<p>执行tcpclient.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[fei@centos7 ~]$python tcpclient.py </span><br><span class=\"line\">[tcpServer said]: tcpServer has received your message</span><br></pre></td></tr></table></figure></p>\n","more":"<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><ul>\n<li>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。</li>\n<li>建立网络通信连接至少要一对端口号(socket)。socket本质是编程接口(API)，对TCP/IP的封装，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口；HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。</li>\n<li>Socket的英文原义是“孔”或“插座”。作为BSD UNIX的进程通信机制，取后一种意思。通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄，可以用来实现不同虚拟机或不同计算机之间的通信。在Internet上的主机一般运行了多个服务软件，同时提供几种服务。每种服务都打开一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务。Socket正如其英文原义那样，像一个多孔插座。一台主机犹如布满各种插座的房间，每个插座有一个编号，有的插座提供220伏交流电， 有的提供110伏交流电，有的则提供有线电视节目。 客户软件将插头插到不同编号的插座，就可以得到不同的服务。</li>\n</ul>\n<h3 id=\"客户-服务器程序连接过程\"><a href=\"#客户-服务器程序连接过程\" class=\"headerlink\" title=\"客户/服务器程序连接过程\"></a>客户/服务器程序连接过程</h3><center><img src=\"http://zhangqifei.top/picture/httpd/2.png\" alt=\"客户/服务器程序的套接字函数\"></center>\n\n<p>根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤：服务器监听，客户端请求，连接确认。<br>（1）服务器监听：是服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态。<br>（2）客户端请求：是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。<br>（3）连接确认：是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，它就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>\n<center><img src=\"http://img.blog.csdn.net/20180125205232050\" alt=\"Socket套接字\"></center>\n\n\n<ul>\n<li>Socket:套接字，进程间通信IPC的一种实现，允许位于不同主机（或同一主机）上不同进程之间进行通信和数据交换，SocketAPI出现于1983年，4.2 BSD实现</li>\n<li>Socket API：封装了内核中所提供的socket通信相关的系统调用</li>\n<li>Socket Domain：根据其所使用的地址<ul>\n<li>AF_INET：Address Family，IPv4</li>\n<li>AF_INET6：IPv6</li>\n<li>AF_UNIX：同一主机上不同进程之间通信时使用</li>\n</ul>\n</li>\n<li>Socket Type：根据使用的传输层协议<ul>\n<li>SOCK_STREAM：流，tcp套接字，可靠地传递、面向连接</li>\n<li>SOCK_DGRAM：数据报，udp套接字，不可靠地传递、无连接</li>\n<li>SOCK_RAW: 裸套接字,无须tcp或tdp,APP直接通过IP包通信</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在建立通信连接的每一端，进程间的传输要有两个标志：</span><br><span class=\"line\">\tIP地址和端口号，合称为套接字地址socket address</span><br><span class=\"line\">\t\t客户机套接字地址定义了一个唯一的客户进程</span><br><span class=\"line\">\t\t服务器套接字地址定义了一个唯一的服务器进程</span><br><span class=\"line\">\t套接字地址 172.18.0.18:80</span><br></pre></td></tr></table></figure>\n<h3 id=\"套接字相关的系统调用：\"><a href=\"#套接字相关的系统调用：\" class=\"headerlink\" title=\"套接字相关的系统调用：\"></a>套接字相关的系统调用：</h3><table>\n<thead>\n<tr>\n<th>名字</th>\n<th>含义</th>\n<th>名字</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>socket()</td>\n<td>创建一个套接字</td>\n<td>bind()</td>\n<td>绑定IP和端口</td>\n</tr>\n<tr>\n<td>listen()</td>\n<td>监听</td>\n<td>accept()</td>\n<td>接收请求</td>\n</tr>\n<tr>\n<td>connect()</td>\n<td>请求连接建立</td>\n<td>write()</td>\n<td>发送</td>\n</tr>\n<tr>\n<td>read()</td>\n<td>接收</td>\n<td>close()</td>\n<td>关闭连接</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Socket通信过程示例：\"><a href=\"#Socket通信过程示例：\" class=\"headerlink\" title=\"Socket通信过程示例：\"></a>Socket通信过程示例：</h3><p>下面用一段简单Python程序具体实现下：</p>\n<p>服务器端tcpserver.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">import socket                                                                          </span><br><span class=\"line\">HOST=&apos;172.18.2.232&apos;</span><br><span class=\"line\">PORT=9527</span><br><span class=\"line\">BUFFER=4096</span><br><span class=\"line\">sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">sock.bind((HOST,PORT))</span><br><span class=\"line\">sock.listen(3)</span><br><span class=\"line\">print(&apos;tcpServer listen at: %s:%s\\n\\r&apos; %(HOST,PORT))</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    client_sock,client_addr=sock.accept()</span><br><span class=\"line\">    print(&apos;%s:%s connect&apos; %client_addr)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        recv=client_sock.recv(BUFFER)</span><br><span class=\"line\">        if not recv:</span><br><span class=\"line\">            client_sock.close()</span><br><span class=\"line\">            break</span><br><span class=\"line\">        print(&apos;[Client %s:%s said]:%s&apos; %(client_addr[0],client_addr[1],recv))</span><br><span class=\"line\">        client_sock.send(&apos;tcpServer has received your message&apos;)</span><br><span class=\"line\">sock.close()</span><br></pre></td></tr></table></figure></p>\n<p>客户端tcpclient.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">import socket</span><br><span class=\"line\">HOST=&apos;172.18.2.232&apos;</span><br><span class=\"line\">PORT=9527</span><br><span class=\"line\">BUFFER=4096</span><br><span class=\"line\">sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">sock.connect((HOST,PORT))</span><br><span class=\"line\">sock.send(&apos;hello, tcpServer!&apos;)</span><br><span class=\"line\">recv=sock.recv(BUFFER)</span><br><span class=\"line\">print(&apos;[tcpServer said]: %s&apos; % recv)</span><br><span class=\"line\">sock.close()</span><br></pre></td></tr></table></figure></p>\n<p>执行tcpserver.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]#python tcpserver.py </span><br><span class=\"line\">tcpServer listen at: 172.18.2.232:9527</span><br><span class=\"line\"></span><br><span class=\"line\">172.18.2.232:46004 connect</span><br><span class=\"line\">[Client 172.18.2.232:46004 said]:hello, tcpServer!</span><br></pre></td></tr></table></figure></p>\n<p>执行tcpclient.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[fei@centos7 ~]$python tcpclient.py </span><br><span class=\"line\">[tcpServer said]: tcpServer has received your message</span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"专业词汇","path":"api/categories/专业词汇.json"}],"tags":[{"name":"socket","path":"api/tags/socket.json"}]}