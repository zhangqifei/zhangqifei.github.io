{"title":"TCP/IP、Http和Https之间的区别?","slug":"linux/IP Http 和Https之间的区别","date":"2018-05-06T18:36:20.000Z","updated":"2018-05-07T08:12:15.762Z","comments":true,"path":"api/articles/linux/IP Http 和Https之间的区别.json","excerpt":"HTTP与HTTPSHTTP：超文本传输协议(HyperText Transfer Protocol)是一种无状态协议，就是说客户端发送一次请求，服务器端接收请求，经过处理返回给客户端信息，然后客户端和服务器端的链接就断开了，为了维护他们之间的链接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息，有2中解决方案，一是在客户端保存，二是在服务器端保存。","covers":null,"content":"<h3 id=\"HTTP与HTTPS\"><a href=\"#HTTP与HTTPS\" class=\"headerlink\" title=\"HTTP与HTTPS\"></a>HTTP与HTTPS</h3><p><strong>HTTP：</strong>超文本传输协议(HyperText Transfer Protocol)是一种无状态协议，就是说客户端发送一次请求，服务器端接收请求，经过处理返回给客户端信息，然后客户端和服务器端的链接就断开了，为了维护他们之间的链接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息，有2中解决方案，一是在客户端保存，二是在服务器端保存。</p>\n<a id=\"more\"></a>\n<p>1.在客户端保存:Cookie<br>2.在服务器端保存:Session(session需要依靠cookie来实现)<br>3.在用户禁用cookie的限制下，只能使用URL重写的方式在每次请求之后附上一个键值对来保存客户端的信息。<br>4.隐藏表单。<input type=\"hidden\" name=\"method\" value=\"login\"><br>请求/相应：HttpServletRequest  /   HttpServletResponse<br>弊端：服务端不会主动向客户端发送问题。</p>\n<p><strong>HTTPS：</strong>（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<h3 id=\"HTTP与HTTPS的区别：\"><a href=\"#HTTP与HTTPS的区别：\" class=\"headerlink\" title=\"HTTP与HTTPS的区别：\"></a>HTTP与HTTPS的区别：</h3><p>http和https使用的是完全不同的连接方式,用的端口也不一样,前者是80,后者是443。http的连接很简单,是无状态的,…<br>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议  要比http协议安全</p>\n<h3 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP/IP\"></a>TCP/IP</h3><p>TCP/IP协议是一个协议簇。里面包括很多协议的。UDP只是其中的一个。之所以命名为TCP/IP协议，因为TCP,IP协议是两个很重要的协议，就用他两命名了。<br>TCP/IP协议集包括<strong>应用层,传输层，网络层，网络访问层</strong>。</p>\n<ul>\n<li>其中【应用层】包括:<ul>\n<li>超文本传输协议(HTTP):万维网的基本协议.   </li>\n<li>文件传输(TFTP简单文件传输协议):   </li>\n<li>远程登录(Telnet),提供远程访问其它主机功能,它允许用户登录     </li>\n<li>internet主机,并在这台主机上执行命令.    </li>\n<li>网络管理(SNMP简单网络管理协议),该协议提供了监控网络设备的方法,以及配置管理,统计信息收集,性能管理及安全管理等. </li>\n<li>域名系统(DNS),该系统用于在internet中将域名及其公共广播的网络节点转换成IP地址. </li>\n</ul>\n</li>\n<li>其次【网络层】包括:    <ul>\n<li>Internet协议(IP)     </li>\n<li>Internet控制信息协议(ICMP)    </li>\n<li>地址解析协议(ARP)    </li>\n<li>反向地址解析协议(RARP)  </li>\n</ul>\n</li>\n<li>【网络访问层】又称作主机到网络层(host-to-network).网络访问层的功能包括IP地址与物理地址硬件的映射,以及将IP封装成帧.基于不同硬件类型的网络接口,网络访问层定义了和物理介质的连接.</li>\n</ul>\n<p>TCP：（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。</p>\n<h4 id=\"TCP三次握手过程\"><a href=\"#TCP三次握手过程\" class=\"headerlink\" title=\"TCP三次握手过程\"></a>TCP三次握手过程</h4><ul>\n<li>主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B ,向主机B 请求建立连接,通过这个数据段,<br>主机A告诉主机B 两件事:我想要和你通信;你可以用哪个序列号作为起始数据段来回应我.</li>\n<li>主机B 收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:<br>我已经收到你的请求了,你可以传输数据了;你要用哪佧序列号作为起始数据段来回应我</li>\n<li>主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:”我已收到回复,我现在要开始传输实际数据了</li>\n</ul>\n<p>这样3次握手就完成了,主机A和主机B 就可以传输数据了.</p>\n<h4 id=\"3次握手的特点\"><a href=\"#3次握手的特点\" class=\"headerlink\" title=\"3次握手的特点\"></a>3次握手的特点</h4><p>没有应用层的数据 SYN这个标志位只有在TCP建产连接时才会被置1 握手完成后SYN标志位被置0</p>\n<h4 id=\"TCP建立连接要进行3次握手-而断开连接要进行4次\"><a href=\"#TCP建立连接要进行3次握手-而断开连接要进行4次\" class=\"headerlink\" title=\"TCP建立连接要进行3次握手,而断开连接要进行4次\"></a>TCP建立连接要进行3次握手,而断开连接要进行4次</h4><ul>\n<li>当主机A完成数据传输后,将控制位FIN置1,提出停止TCP连接的请求</li>\n<li>主机B收到FIN后对其作出响应,确认这一方向上的TCP连接将关闭,将ACK置1</li>\n<li>由B 端再提出反方向的关闭请求,将FIN置1</li>\n<li>主机A对主机B的请求进行确认,将ACK置1,双方向的关闭结束.</li>\n</ul>\n<p>由TCP的三次握手和四次断开可以看出,TCP使用面向连接的通信方式,大大提高了数据通信的可靠性,使发送数据端和接收端在数据正式传输前就有了交互,为数据正式传输打下了可靠的基础</p>\n<p><strong>名词解释</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACK  TCP报头的控制位之一,对数据进行确认.确认由目的端发出,用它来告诉发送端这个序列号之前的数据段</span><br><span class=\"line\">都收到了.比如,确认号为X,则表示前X-1个数据段都收到了,只有当ACK=1时,确认号才有效,当ACK=0时,确认号无效,这时会要求重传数据,保证数据的完整性.</span><br><span class=\"line\">SYN  同步序列号,TCP建立连接时将这个位置1</span><br><span class=\"line\">FIN  发送端完成发送任务位,当TCP完成数据传输需要断开时,提出断开连接的一方将这位置1</span><br><span class=\"line\">TCP的包头结构：</span><br><span class=\"line\">源端口 16位</span><br><span class=\"line\">目标端口 16位</span><br><span class=\"line\">序列号 32位</span><br><span class=\"line\">回应序号 32位</span><br><span class=\"line\">TCP头长度 4位</span><br><span class=\"line\">reserved 6位</span><br><span class=\"line\">控制代码 6位</span><br><span class=\"line\">窗口大小 16位</span><br><span class=\"line\">偏移量 16位</span><br><span class=\"line\">校验和 16位</span><br><span class=\"line\">选项  32位(可选)</span><br><span class=\"line\">这样我们得出了TCP包头的最小长度，为20字节。</span><br></pre></td></tr></table></figure></p>\n<p>UDP：（User Data Protocol，用户数据报协议）<br>（1） UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。<br>（2） 由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息。<br>（3） UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。<br>（4） 吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制。<br>（5）UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态表（这里面有许多参数）。<br>（6）UDP是面向报文的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小。<br>我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。<br>UDP的包头结构：<br>源端口 16位<br>目的端口 16位<br>长度 16位<br>校验和 16位</p>\n<h3 id=\"TCP与UDP区别：\"><a href=\"#TCP与UDP区别：\" class=\"headerlink\" title=\"TCP与UDP区别：\"></a>TCP与UDP区别：</h3><p>TCP：面向连接、传输可靠(保证数据正确性,保证数据顺序)、用于传输大量数据(流模式)、速度慢，建立连接需要开销较多(时间，系统资源)。<br>UDP：面向非连接、传输不可靠、用于传输少量数据(数据包模式)、速度快。</p>\n","more":"<p>1.在客户端保存:Cookie<br>2.在服务器端保存:Session(session需要依靠cookie来实现)<br>3.在用户禁用cookie的限制下，只能使用URL重写的方式在每次请求之后附上一个键值对来保存客户端的信息。<br>4.隐藏表单。<input type=\"hidden\" name=\"method\" value=\"login\"><br>请求/相应：HttpServletRequest  /   HttpServletResponse<br>弊端：服务端不会主动向客户端发送问题。</p>\n<p><strong>HTTPS：</strong>（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>\n<h3 id=\"HTTP与HTTPS的区别：\"><a href=\"#HTTP与HTTPS的区别：\" class=\"headerlink\" title=\"HTTP与HTTPS的区别：\"></a>HTTP与HTTPS的区别：</h3><p>http和https使用的是完全不同的连接方式,用的端口也不一样,前者是80,后者是443。http的连接很简单,是无状态的,…<br>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议  要比http协议安全</p>\n<h3 id=\"TCP-IP\"><a href=\"#TCP-IP\" class=\"headerlink\" title=\"TCP/IP\"></a>TCP/IP</h3><p>TCP/IP协议是一个协议簇。里面包括很多协议的。UDP只是其中的一个。之所以命名为TCP/IP协议，因为TCP,IP协议是两个很重要的协议，就用他两命名了。<br>TCP/IP协议集包括<strong>应用层,传输层，网络层，网络访问层</strong>。</p>\n<ul>\n<li>其中【应用层】包括:<ul>\n<li>超文本传输协议(HTTP):万维网的基本协议.   </li>\n<li>文件传输(TFTP简单文件传输协议):   </li>\n<li>远程登录(Telnet),提供远程访问其它主机功能,它允许用户登录     </li>\n<li>internet主机,并在这台主机上执行命令.    </li>\n<li>网络管理(SNMP简单网络管理协议),该协议提供了监控网络设备的方法,以及配置管理,统计信息收集,性能管理及安全管理等. </li>\n<li>域名系统(DNS),该系统用于在internet中将域名及其公共广播的网络节点转换成IP地址. </li>\n</ul>\n</li>\n<li>其次【网络层】包括:    <ul>\n<li>Internet协议(IP)     </li>\n<li>Internet控制信息协议(ICMP)    </li>\n<li>地址解析协议(ARP)    </li>\n<li>反向地址解析协议(RARP)  </li>\n</ul>\n</li>\n<li>【网络访问层】又称作主机到网络层(host-to-network).网络访问层的功能包括IP地址与物理地址硬件的映射,以及将IP封装成帧.基于不同硬件类型的网络接口,网络访问层定义了和物理介质的连接.</li>\n</ul>\n<p>TCP：（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。</p>\n<h4 id=\"TCP三次握手过程\"><a href=\"#TCP三次握手过程\" class=\"headerlink\" title=\"TCP三次握手过程\"></a>TCP三次握手过程</h4><ul>\n<li>主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B ,向主机B 请求建立连接,通过这个数据段,<br>主机A告诉主机B 两件事:我想要和你通信;你可以用哪个序列号作为起始数据段来回应我.</li>\n<li>主机B 收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:<br>我已经收到你的请求了,你可以传输数据了;你要用哪佧序列号作为起始数据段来回应我</li>\n<li>主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:”我已收到回复,我现在要开始传输实际数据了</li>\n</ul>\n<p>这样3次握手就完成了,主机A和主机B 就可以传输数据了.</p>\n<h4 id=\"3次握手的特点\"><a href=\"#3次握手的特点\" class=\"headerlink\" title=\"3次握手的特点\"></a>3次握手的特点</h4><p>没有应用层的数据 SYN这个标志位只有在TCP建产连接时才会被置1 握手完成后SYN标志位被置0</p>\n<h4 id=\"TCP建立连接要进行3次握手-而断开连接要进行4次\"><a href=\"#TCP建立连接要进行3次握手-而断开连接要进行4次\" class=\"headerlink\" title=\"TCP建立连接要进行3次握手,而断开连接要进行4次\"></a>TCP建立连接要进行3次握手,而断开连接要进行4次</h4><ul>\n<li>当主机A完成数据传输后,将控制位FIN置1,提出停止TCP连接的请求</li>\n<li>主机B收到FIN后对其作出响应,确认这一方向上的TCP连接将关闭,将ACK置1</li>\n<li>由B 端再提出反方向的关闭请求,将FIN置1</li>\n<li>主机A对主机B的请求进行确认,将ACK置1,双方向的关闭结束.</li>\n</ul>\n<p>由TCP的三次握手和四次断开可以看出,TCP使用面向连接的通信方式,大大提高了数据通信的可靠性,使发送数据端和接收端在数据正式传输前就有了交互,为数据正式传输打下了可靠的基础</p>\n<p><strong>名词解释</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACK  TCP报头的控制位之一,对数据进行确认.确认由目的端发出,用它来告诉发送端这个序列号之前的数据段</span><br><span class=\"line\">都收到了.比如,确认号为X,则表示前X-1个数据段都收到了,只有当ACK=1时,确认号才有效,当ACK=0时,确认号无效,这时会要求重传数据,保证数据的完整性.</span><br><span class=\"line\">SYN  同步序列号,TCP建立连接时将这个位置1</span><br><span class=\"line\">FIN  发送端完成发送任务位,当TCP完成数据传输需要断开时,提出断开连接的一方将这位置1</span><br><span class=\"line\">TCP的包头结构：</span><br><span class=\"line\">源端口 16位</span><br><span class=\"line\">目标端口 16位</span><br><span class=\"line\">序列号 32位</span><br><span class=\"line\">回应序号 32位</span><br><span class=\"line\">TCP头长度 4位</span><br><span class=\"line\">reserved 6位</span><br><span class=\"line\">控制代码 6位</span><br><span class=\"line\">窗口大小 16位</span><br><span class=\"line\">偏移量 16位</span><br><span class=\"line\">校验和 16位</span><br><span class=\"line\">选项  32位(可选)</span><br><span class=\"line\">这样我们得出了TCP包头的最小长度，为20字节。</span><br></pre></td></tr></table></figure></p>\n<p>UDP：（User Data Protocol，用户数据报协议）<br>（1） UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。<br>（2） 由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息。<br>（3） UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。<br>（4） 吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制。<br>（5）UDP使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态表（这里面有许多参数）。<br>（6）UDP是面向报文的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小。<br>我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。<br>UDP的包头结构：<br>源端口 16位<br>目的端口 16位<br>长度 16位<br>校验和 16位</p>\n<h3 id=\"TCP与UDP区别：\"><a href=\"#TCP与UDP区别：\" class=\"headerlink\" title=\"TCP与UDP区别：\"></a>TCP与UDP区别：</h3><p>TCP：面向连接、传输可靠(保证数据正确性,保证数据顺序)、用于传输大量数据(流模式)、速度慢，建立连接需要开销较多(时间，系统资源)。<br>UDP：面向非连接、传输不可靠、用于传输少量数据(数据包模式)、速度快。</p>","categories":[{"name":"随笔","path":"api/categories/随笔.json"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"}]}