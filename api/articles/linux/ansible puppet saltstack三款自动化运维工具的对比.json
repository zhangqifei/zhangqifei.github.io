{"title":"ansible puppet saltstack三款自动化运维工具的对比！","slug":"linux/ansible puppet saltstack三款自动化运维工具的对比","date":"2017-08-10T06:41:22.000Z","updated":"2018-04-20T04:19:31.210Z","comments":true,"path":"api/articles/linux/ansible puppet saltstack三款自动化运维工具的对比.json","excerpt":"一、基础介绍ansible基础介绍可参考puppet基础介绍可参考saltstack基础介绍可参考","covers":null,"content":"<h3 id=\"一、基础介绍\"><a href=\"#一、基础介绍\" class=\"headerlink\" title=\"一、基础介绍\"></a>一、基础介绍</h3><ul>\n<li><a href=\"http://zhangqifei.top/2017/08/09/linux/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7ansible/\" target=\"_blank\" rel=\"noopener\">ansible基础介绍可参考</a></li>\n<li><a href=\"http://zhangqifei.top/2017/08/07/linux/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7puppet/\" target=\"_blank\" rel=\"noopener\">puppet基础介绍可参考</a></li>\n<li><a href=\"http://zhangqifei.top/2017/08/06/linux/%E8%BF%90%E7%BB%B4%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7saltstack/\" target=\"_blank\" rel=\"noopener\">saltstack基础介绍可参考</a><a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"二、技术特性比较\"><a href=\"#二、技术特性比较\" class=\"headerlink\" title=\"二、技术特性比较\"></a>二、技术特性比较</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>Puppet</th>\n<th>SaltStack</th>\n<th>Ansible</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发语言</td>\n<td>Ruby</td>\n<td>Python</td>\n<td>Python</td>\n</tr>\n<tr>\n<td>客户端</td>\n<td>有</td>\n<td>有</td>\n<td>无</td>\n</tr>\n<tr>\n<td>二次开发</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>通信验证</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>同学加密</td>\n<td>标准SSL协议</td>\n<td>AES加密</td>\n<td>OpenSSH</td>\n</tr>\n<tr>\n<td>平台支持</td>\n<td>AIX,BSD,HP-UX,Linux,Mac OS X,Solaris,Windows</td>\n<td>BSD,Linux,Mac OS X,Solaris,Windows</td>\n<td>AIX,BSD,HP-UX,Linux,Mac OS X,Solaris</td>\n</tr>\n<tr>\n<td>配置文件格式</td>\n<td>Ruby语法格式</td>\n<td>YAML</td>\n<td>YAML</td>\n</tr>\n<tr>\n<td>Web UI</td>\n<td>提供</td>\n<td>提供</td>\n<td>提供（商业版本）</td>\n</tr>\n<tr>\n<td>命令执行</td>\n<td>不支持（配置模块可实现）</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"三、优缺点对比\"><a href=\"#三、优缺点对比\" class=\"headerlink\" title=\"三、优缺点对比\"></a>三、优缺点对比</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>优势</th>\n<th>劣势</th>\n<th>成本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Puppet</td>\n<td>模块由Ruby或Ruby子集编写<br>push命令可以即可触发变更<br>Web界面生成处理报表、资源清单、实时节点管理<br>代理运行端进行详细、深入的报告和对节点进行配置</td>\n<td>相对其他工具较复杂，需学习Puppet的DSL或Ruby<br>安装过程缺少错误校验和产生错误报表</td>\n<td>开源软件免费<br>SaltStack企业版每年内个节点花费约￥100</td>\n</tr>\n<tr>\n<td>Saltstack</td>\n<td>状态文件可用简单YAML配置模块或复杂的Python/PyDSL脚本<br>与客户端可以基于SSH或在被管节点安装代理<br>Web界面可看到运行的工作、minion状态、事件日志、可在客户端执行命令<br>扩展能力极强</td>\n<td>Web界面像毒药竞争产品不稳定与相对不完善<br>缺乏生成深度报告的能力</td>\n<td>开源软件免费<br>SaltStack企业版每年内个节点花费约￥150，随着数量增加相应的会有折扣</td>\n</tr>\n<tr>\n<td>Ansible</td>\n<td>模块可以用任何语言开发<br>备管节点不需要安装代理软件<br>有Web管理界面、可配置用户、组、资源清单和执行Playbook<br>安装、运行极其简单</td>\n<td>对备管理节点为Windows有待加强<br>Web管理界面是内置的Ansible的一部分<br>需导入资源清单<br>执行效率较低</td>\n<td>开源版本免费<br>Ansible Tower小于10台被管理节点免费<br>超过10太后没年每台需支付￥100~$250的支持服务费用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四、推荐场景\"><a href=\"#四、推荐场景\" class=\"headerlink\" title=\"四、推荐场景\"></a>四、推荐场景</h3><h4 id=\"4-1-Puppet\"><a href=\"#4-1-Puppet\" class=\"headerlink\" title=\"4.1 Puppet\"></a>4.1 Puppet</h4><p>　　Puppet也许是四款工具中最深入人心的。就可用操作、模块和用户界面而言，它是最全面的。Puppet呈现了数据中心协调的全貌，几乎涵盖每一个运行系统，为各大操作系统提供了深入的工具。初始设置比较简单，只需要在需要加以管理的每个系统上安装主服务器和客户端代理软件。</p>\n<p>　　命令行接口(CLI)简单直观，允许通过puppet命令下载和安装模块。然后，需要对配置文件进行更改，好让模块适合所需的任务;应接到指令的客户端与主服务器联系时，会更改配置文件，或者客户端通过立即触发更改配置文件的推送(push)来进行更改。</p>\n<p>　　还有一些模块可以提供和配置云服务器实例和虚拟服务器实例。所有模块和配置都使用基于Ruby的Puppet专属语言或者Ruby本身构建而成，因而除了系统管理技能外，还需要编程专业知识。</p>\n<p>　　Puppet企业版拥有最全面的Web用户界面，允许使用主服务器上的预制模块和菜谱(cookbook)，实时控制被管理的节点。Web用户界面很适合用于管理，但是不允许对模块进行诸多配置。报告工具非常完善，提供了详细信息，以便了解代理软件运行如何、已做出什么样的变更。</p>\n<h4 id=\"4-2-Ansible\"><a href=\"#4-2-Ansible\" class=\"headerlink\" title=\"4.2 Ansible\"></a>4.2 Ansible</h4><p>　　Ansible极其类似Salt，而不太类似Puppet或Chef。Ansible关注的重点是力求精简和快速，而且不需要在节点上安装代理软件。因此，Ansible通过SSH执行所有功能。Ansible基于Python;相比之下，Puppet和Chef基于Ruby。</p>\n<p>　　Ansible可以通过Git软件库克隆，安装到Ansible主服务器上。安装完毕后，需要管理的节点被添加到Ansible配置环境，SSH授权密钥被附加到每个节点上，这与运行Ansible的用户有关。一旦完成了这步，Ansible主服务器可以通过SSH与节点进行通信，执行所有必要的任务。为了与默认情况下不允许根SSH访问的操作系统或发行版协同运行，Ansible接受sudo登录信息，以便在那些系统上以根用户的身份运行命令。</p>\n<p>　　Ansible可以使用Paramiko(基于SSH2协议的Python实现)或标准SSH用于通信，不过还有一种加速模式，允许更快速、更大规模的通信。</p>\n<p>　　针对确保服务在运行，或者触发更新和重新启动之类的简单任务，Ansible可以从命令行来运行，不需要使用配置文件。至于比较复杂的任务，Ansible配置通过名为Playbook的配置文件中的YAML语法来加以处理。Playbook还可以使用模板来扩展其功能。</p>\n<p>　　Ansible有一大批模块，可用于管理各种系统以及亚马逊弹性计算云(EC2)和OpenStack等云计算基础设施。可以用几乎任何一种语言来编写自定义Ansible模块，只要模块输出是有效的JSON。</p>\n<p>　　Ansible的Web用户界面以AnsibleWorks AWX的形式出现，但AWX与CLI并不直接联系在一起。这意味着，除非进行了同步过程，否则CLI里面的配置元素不会出现在Web用户界面中。你可以使用那个内置的同步工具，让两者保持一致，但需要按照预定计划运行同步工具。</p>\n<h4 id=\"4-3-SaltStack\"><a href=\"#4-3-SaltStack\" class=\"headerlink\" title=\"4.3 SaltStack\"></a>4.3 SaltStack</h4><p>　　Salt类似Ansible，因为它也是基于CLI的工具，采用了推送方法实现客户端通信。它可以通过Git或通过程序包管理系统安装到主服务器和客户端上。客户端会向主服务器提出请求，请求在主服务器上得到接受后，就可以控制该客户端了。</p>\n<p>　　Salt可以通过普通的SSH与客户端进行通信，但如果使用名为minion的客户端代理软件，可以大大增强可扩展性。此外，Salt含有一个异步文件服务器，可以为客户端加快文件服务速度，这完全是Salt注重高扩展性的一个体现。</p>\n<p>　　与Ansible一样，你可以直接通过CLI，向客户端发出命令，比如启动服务或安装程序包;你也可以使用名为state的YAML配置文件，处理比较复杂的任务。还有“pillar”，这些是放在集中地方的数据集，YAML配置文件可以在运行期间访问它们。</p>\n<p>　　你可以直接通过CLI，向客户端请求配置信息，比如内核版本或网络接口方面的详细信息。只要使用名为“grain”的库存元素，就可以描述客户端;这样一来，管理员可以轻松向某一种类型的服务器发出命令，不需要依赖已配置群组。比如说，只要使用一个CLI命令，你就可以向运行某个内核版本的每个客户端发送命令。</p>\n<p>　　与Puppet、Chef和Ansible一样，Salt也提供了大量的模块，以处理特定的软件、操作系统和云服务。自定义模块可以用Python或PyDSL来编写。除了Unix管理外，Salt的确提供Windows管理功能，但它还是更擅长管理Unix和Linux系统。</p>\n<p>　　Salt的Web用户界面Halite非常新，功能不如其他系统的Web用户界面来得全面。它提供了事件日志和客户端状态的视图，能够在客户端上运行命令，但除此之外乏善可陈。</p>\n<p>　　Salt的较大优点在于可扩展性和弹性。你可以有多个级别的主服务器。上游主服务器可以控制下游主服务器及其客户端。另一个优点在于对等系统，让客户端可以向主服务器提出问题，然后主服务器从其他服务器得到答案，提供全面信息。如果需要在实时数据库中查询数据，以便完成客户端的配置，这个优点就很方便。</p>\n","more":"</li>\n</ul>\n<h3 id=\"二、技术特性比较\"><a href=\"#二、技术特性比较\" class=\"headerlink\" title=\"二、技术特性比较\"></a>二、技术特性比较</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>Puppet</th>\n<th>SaltStack</th>\n<th>Ansible</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发语言</td>\n<td>Ruby</td>\n<td>Python</td>\n<td>Python</td>\n</tr>\n<tr>\n<td>客户端</td>\n<td>有</td>\n<td>有</td>\n<td>无</td>\n</tr>\n<tr>\n<td>二次开发</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>通信验证</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>同学加密</td>\n<td>标准SSL协议</td>\n<td>AES加密</td>\n<td>OpenSSH</td>\n</tr>\n<tr>\n<td>平台支持</td>\n<td>AIX,BSD,HP-UX,Linux,Mac OS X,Solaris,Windows</td>\n<td>BSD,Linux,Mac OS X,Solaris,Windows</td>\n<td>AIX,BSD,HP-UX,Linux,Mac OS X,Solaris</td>\n</tr>\n<tr>\n<td>配置文件格式</td>\n<td>Ruby语法格式</td>\n<td>YAML</td>\n<td>YAML</td>\n</tr>\n<tr>\n<td>Web UI</td>\n<td>提供</td>\n<td>提供</td>\n<td>提供（商业版本）</td>\n</tr>\n<tr>\n<td>命令执行</td>\n<td>不支持（配置模块可实现）</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"三、优缺点对比\"><a href=\"#三、优缺点对比\" class=\"headerlink\" title=\"三、优缺点对比\"></a>三、优缺点对比</h3><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>优势</th>\n<th>劣势</th>\n<th>成本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Puppet</td>\n<td>模块由Ruby或Ruby子集编写<br>push命令可以即可触发变更<br>Web界面生成处理报表、资源清单、实时节点管理<br>代理运行端进行详细、深入的报告和对节点进行配置</td>\n<td>相对其他工具较复杂，需学习Puppet的DSL或Ruby<br>安装过程缺少错误校验和产生错误报表</td>\n<td>开源软件免费<br>SaltStack企业版每年内个节点花费约￥100</td>\n</tr>\n<tr>\n<td>Saltstack</td>\n<td>状态文件可用简单YAML配置模块或复杂的Python/PyDSL脚本<br>与客户端可以基于SSH或在被管节点安装代理<br>Web界面可看到运行的工作、minion状态、事件日志、可在客户端执行命令<br>扩展能力极强</td>\n<td>Web界面像毒药竞争产品不稳定与相对不完善<br>缺乏生成深度报告的能力</td>\n<td>开源软件免费<br>SaltStack企业版每年内个节点花费约￥150，随着数量增加相应的会有折扣</td>\n</tr>\n<tr>\n<td>Ansible</td>\n<td>模块可以用任何语言开发<br>备管节点不需要安装代理软件<br>有Web管理界面、可配置用户、组、资源清单和执行Playbook<br>安装、运行极其简单</td>\n<td>对备管理节点为Windows有待加强<br>Web管理界面是内置的Ansible的一部分<br>需导入资源清单<br>执行效率较低</td>\n<td>开源版本免费<br>Ansible Tower小于10台被管理节点免费<br>超过10太后没年每台需支付￥100~$250的支持服务费用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四、推荐场景\"><a href=\"#四、推荐场景\" class=\"headerlink\" title=\"四、推荐场景\"></a>四、推荐场景</h3><h4 id=\"4-1-Puppet\"><a href=\"#4-1-Puppet\" class=\"headerlink\" title=\"4.1 Puppet\"></a>4.1 Puppet</h4><p>　　Puppet也许是四款工具中最深入人心的。就可用操作、模块和用户界面而言，它是最全面的。Puppet呈现了数据中心协调的全貌，几乎涵盖每一个运行系统，为各大操作系统提供了深入的工具。初始设置比较简单，只需要在需要加以管理的每个系统上安装主服务器和客户端代理软件。</p>\n<p>　　命令行接口(CLI)简单直观，允许通过puppet命令下载和安装模块。然后，需要对配置文件进行更改，好让模块适合所需的任务;应接到指令的客户端与主服务器联系时，会更改配置文件，或者客户端通过立即触发更改配置文件的推送(push)来进行更改。</p>\n<p>　　还有一些模块可以提供和配置云服务器实例和虚拟服务器实例。所有模块和配置都使用基于Ruby的Puppet专属语言或者Ruby本身构建而成，因而除了系统管理技能外，还需要编程专业知识。</p>\n<p>　　Puppet企业版拥有最全面的Web用户界面，允许使用主服务器上的预制模块和菜谱(cookbook)，实时控制被管理的节点。Web用户界面很适合用于管理，但是不允许对模块进行诸多配置。报告工具非常完善，提供了详细信息，以便了解代理软件运行如何、已做出什么样的变更。</p>\n<h4 id=\"4-2-Ansible\"><a href=\"#4-2-Ansible\" class=\"headerlink\" title=\"4.2 Ansible\"></a>4.2 Ansible</h4><p>　　Ansible极其类似Salt，而不太类似Puppet或Chef。Ansible关注的重点是力求精简和快速，而且不需要在节点上安装代理软件。因此，Ansible通过SSH执行所有功能。Ansible基于Python;相比之下，Puppet和Chef基于Ruby。</p>\n<p>　　Ansible可以通过Git软件库克隆，安装到Ansible主服务器上。安装完毕后，需要管理的节点被添加到Ansible配置环境，SSH授权密钥被附加到每个节点上，这与运行Ansible的用户有关。一旦完成了这步，Ansible主服务器可以通过SSH与节点进行通信，执行所有必要的任务。为了与默认情况下不允许根SSH访问的操作系统或发行版协同运行，Ansible接受sudo登录信息，以便在那些系统上以根用户的身份运行命令。</p>\n<p>　　Ansible可以使用Paramiko(基于SSH2协议的Python实现)或标准SSH用于通信，不过还有一种加速模式，允许更快速、更大规模的通信。</p>\n<p>　　针对确保服务在运行，或者触发更新和重新启动之类的简单任务，Ansible可以从命令行来运行，不需要使用配置文件。至于比较复杂的任务，Ansible配置通过名为Playbook的配置文件中的YAML语法来加以处理。Playbook还可以使用模板来扩展其功能。</p>\n<p>　　Ansible有一大批模块，可用于管理各种系统以及亚马逊弹性计算云(EC2)和OpenStack等云计算基础设施。可以用几乎任何一种语言来编写自定义Ansible模块，只要模块输出是有效的JSON。</p>\n<p>　　Ansible的Web用户界面以AnsibleWorks AWX的形式出现，但AWX与CLI并不直接联系在一起。这意味着，除非进行了同步过程，否则CLI里面的配置元素不会出现在Web用户界面中。你可以使用那个内置的同步工具，让两者保持一致，但需要按照预定计划运行同步工具。</p>\n<h4 id=\"4-3-SaltStack\"><a href=\"#4-3-SaltStack\" class=\"headerlink\" title=\"4.3 SaltStack\"></a>4.3 SaltStack</h4><p>　　Salt类似Ansible，因为它也是基于CLI的工具，采用了推送方法实现客户端通信。它可以通过Git或通过程序包管理系统安装到主服务器和客户端上。客户端会向主服务器提出请求，请求在主服务器上得到接受后，就可以控制该客户端了。</p>\n<p>　　Salt可以通过普通的SSH与客户端进行通信，但如果使用名为minion的客户端代理软件，可以大大增强可扩展性。此外，Salt含有一个异步文件服务器，可以为客户端加快文件服务速度，这完全是Salt注重高扩展性的一个体现。</p>\n<p>　　与Ansible一样，你可以直接通过CLI，向客户端发出命令，比如启动服务或安装程序包;你也可以使用名为state的YAML配置文件，处理比较复杂的任务。还有“pillar”，这些是放在集中地方的数据集，YAML配置文件可以在运行期间访问它们。</p>\n<p>　　你可以直接通过CLI，向客户端请求配置信息，比如内核版本或网络接口方面的详细信息。只要使用名为“grain”的库存元素，就可以描述客户端;这样一来，管理员可以轻松向某一种类型的服务器发出命令，不需要依赖已配置群组。比如说，只要使用一个CLI命令，你就可以向运行某个内核版本的每个客户端发送命令。</p>\n<p>　　与Puppet、Chef和Ansible一样，Salt也提供了大量的模块，以处理特定的软件、操作系统和云服务。自定义模块可以用Python或PyDSL来编写。除了Unix管理外，Salt的确提供Windows管理功能，但它还是更擅长管理Unix和Linux系统。</p>\n<p>　　Salt的Web用户界面Halite非常新，功能不如其他系统的Web用户界面来得全面。它提供了事件日志和客户端状态的视图，能够在客户端上运行命令，但除此之外乏善可陈。</p>\n<p>　　Salt的较大优点在于可扩展性和弹性。你可以有多个级别的主服务器。上游主服务器可以控制下游主服务器及其客户端。另一个优点在于对等系统，让客户端可以向主服务器提出问题，然后主服务器从其他服务器得到答案，提供全面信息。如果需要在实时数据库中查询数据，以便完成客户端的配置，这个优点就很方便。</p>","categories":[{"name":"linux","path":"api/categories/linux.json"},{"name":"运维自动化工具","path":"api/categories/运维自动化工具.json"}],"tags":[]}