{"title":"Apache、Nginx与Tomcat三者的区别？","slug":"linux/Apache、Nginx与Tomcat三者的区别","date":"2018-05-06T19:00:20.000Z","updated":"2018-05-06T19:09:12.496Z","comments":true,"path":"api/articles/linux/Apache、Nginx与Tomcat三者的区别.json","excerpt":"定义ApacheApache HTTP服务器是一个模块化的服务器，可以运行在几乎所有广泛使用的计算机平台上。其属于应用服务器。Apache支持支持模块多，性能稳定，Apache本身是静态解析，适合静态HTML、图片等，但可以通过扩展脚本、模块等支持动态页面等。（Apche可以支持PHPcgiperl,但是要使用Java的话，你需要Tomcat在Apache后台支撑，将Java请求由Apache转发给Tomcat处理。）缺点：配置相对复杂，自身不支持动态页面。<br>","covers":null,"content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><h3 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h3><p>Apache HTTP服务器是一个模块化的服务器，可以运行在几乎所有广泛使用的计算机平台上。其属于应用服务器。Apache支持支持模块多，性能稳定，Apache本身是静态解析，适合静态HTML、图片等，但可以通过扩展脚本、模块等支持动态页面等。</p>\n<p>（Apche可以支持PHPcgiperl,但是要使用Java的话，你需要Tomcat在Apache后台支撑，将Java请求由Apache转发给Tomcat处理。）</p>\n<p>缺点：配置相对复杂，自身不支持动态页面。<br><a id=\"more\"></a></p>\n<h3 id=\"Tomcat：\"><a href=\"#Tomcat：\" class=\"headerlink\" title=\"Tomcat：\"></a>Tomcat：</h3><p>Tomcat是应用（Java）服务器，它只是一个Servlet(JSP也翻译成Servlet)容器，可以认为是Apache的扩展，但是可以独立于Apache运行。</p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><p>Nginx是俄罗斯人编写的十分轻量级的HTTP服务器,Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。</p>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><h3 id=\"Apache与Tomcat的比较\"><a href=\"#Apache与Tomcat的比较\" class=\"headerlink\" title=\"Apache与Tomcat的比较\"></a>Apache与Tomcat的比较</h3><p>相同点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两者都是Apache组织开发的</span><br><span class=\"line\">两者都有HTTP服务的功能</span><br><span class=\"line\">两者都是免费的</span><br></pre></td></tr></table></figure></p>\n<p>不同点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apache是专门用了提供HTTP服务的，以及相关配置的（例如虚拟主机、URL转发等等），而Tomcat是Apache组织在符合Java EE的JSP、Servlet标准下开发的一个JSP服务器. </span><br><span class=\"line\"></span><br><span class=\"line\">Apache是一个Web服务器环境程序,启用他可以作为Web服务器使用,不过只支持静态网页如(ASP,PHP,CGI,JSP)等动态网页的就不行。如果要在Apache环境下运行JSP的话就需要一个解释器来执行JSP网页,而这个JSP解释器就是Tomcat。</span><br><span class=\"line\"></span><br><span class=\"line\">Apache:侧重于HTTPServer ，Tomcat:侧重于Servlet引擎，如果以Standalone方式运行，功能上与Apache等效，支持JSP，但对静态网页不太理想；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache是Web服务器，Tomcat是应用（Java）服务器，它只是一个Servlet(JSP也翻译成Servlet)容器，可以认为是Apache的扩展，但是可以独立于Apache运行。</span><br></pre></td></tr></table></figure></p>\n<p>实际使用中Apache与Tomcat常常是整合使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果客户端请求的是静态页面，则只需要Apache服务器响应请求。</span><br><span class=\"line\"></span><br><span class=\"line\">如果客户端请求动态页面，则是Tomcat服务器响应请求。</span><br><span class=\"line\"></span><br><span class=\"line\">因为JSP是服务器端解释代码的，这样整合就可以减少Tomcat的服务开销。</span><br><span class=\"line\"></span><br><span class=\"line\">可以理解Tomcat为Apache的一种扩展。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Nginx与Apache比较\"><a href=\"#Nginx与Apache比较\" class=\"headerlink\" title=\"Nginx与Apache比较\"></a>Nginx与Apache比较</h3><h3 id=\"nginx相对于apache的优点\"><a href=\"#nginx相对于apache的优点\" class=\"headerlink\" title=\"nginx相对于apache的优点\"></a>nginx相对于apache的优点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">轻量级，同样起web 服务，比apache占用更少的内存及资源 </span><br><span class=\"line\"></span><br><span class=\"line\">抗并发，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 </span><br><span class=\"line\"></span><br><span class=\"line\">高度模块化的设计，编写模块相对简单 </span><br><span class=\"line\"></span><br><span class=\"line\">提供负载均衡</span><br><span class=\"line\"></span><br><span class=\"line\">社区活跃，各种高性能模块出品迅速</span><br></pre></td></tr></table></figure>\n<h4 id=\"apache-相对于nginx-的优点\"><a href=\"#apache-相对于nginx-的优点\" class=\"headerlink\" title=\"apache 相对于nginx 的优点\"></a>apache 相对于nginx 的优点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apache的 rewrite 比nginx 的强大 ；</span><br><span class=\"line\"></span><br><span class=\"line\">支持动态页面；</span><br><span class=\"line\"></span><br><span class=\"line\">支持的模块多，基本涵盖所有应用；</span><br><span class=\"line\"></span><br><span class=\"line\">性能稳定，而nginx相对bug较多。</span><br></pre></td></tr></table></figure>\n<h3 id=\"两者优缺点比较\"><a href=\"#两者优缺点比较\" class=\"headerlink\" title=\"两者优缺点比较\"></a>两者优缺点比较</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nginx 配置简洁, Apache 复杂 ；</span><br><span class=\"line\"></span><br><span class=\"line\">Nginx 静态处理性能比 Apache 高 3倍以上 ；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache 对 PHP 支持比较简单，Nginx 需要配合其他后端用；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache 的组件比 Nginx 多 ；</span><br><span class=\"line\"></span><br><span class=\"line\">apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程；</span><br><span class=\"line\"></span><br><span class=\"line\">nginx处理静态文件好,耗费内存少；</span><br><span class=\"line\"></span><br><span class=\"line\">动态请求由apache去做，nginx只适合静态和反向；</span><br><span class=\"line\"></span><br><span class=\"line\">Nginx适合做前端服务器，负载性能很好；</span><br><span class=\"line\"></span><br><span class=\"line\">Nginx本身就是一个反向代理服务器 ，且支持负载均衡</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nginx优点：负载均衡、反向代理、处理静态文件优势。nginx处理静态请求的速度高于apache；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache优点：相对于Tomcat服务器来说处理静态文件是它的优势，速度快。Apache是静态解析，适合静态HTML、图片等。</span><br><span class=\"line\"></span><br><span class=\"line\">Tomcat：动态解析容器，处理动态请求，是编译JSP\\Servlet的容器，Nginx有动态分离机制，静态请求直接就可以通过Nginx处理，动态请求才转发请求到后台交由Tomcat进行处理。</span><br><span class=\"line\"></span><br><span class=\"line\">Apache在处理动态有优势，Nginx并发性比较好，CPU内存占用低，如果rewrite频繁，那还是Apache较适合。</span><br></pre></td></tr></table></figure>\n<h4 id=\"反向代理的理解：\"><a href=\"#反向代理的理解：\" class=\"headerlink\" title=\"反向代理的理解：\"></a>反向代理的理解：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，</span><br><span class=\"line\"></span><br><span class=\"line\">并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</span><br></pre></td></tr></table></figure>","more":"</p>\n<h3 id=\"Tomcat：\"><a href=\"#Tomcat：\" class=\"headerlink\" title=\"Tomcat：\"></a>Tomcat：</h3><p>Tomcat是应用（Java）服务器，它只是一个Servlet(JSP也翻译成Servlet)容器，可以认为是Apache的扩展，但是可以独立于Apache运行。</p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><p>Nginx是俄罗斯人编写的十分轻量级的HTTP服务器,Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。</p>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><h3 id=\"Apache与Tomcat的比较\"><a href=\"#Apache与Tomcat的比较\" class=\"headerlink\" title=\"Apache与Tomcat的比较\"></a>Apache与Tomcat的比较</h3><p>相同点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两者都是Apache组织开发的</span><br><span class=\"line\">两者都有HTTP服务的功能</span><br><span class=\"line\">两者都是免费的</span><br></pre></td></tr></table></figure></p>\n<p>不同点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Apache是专门用了提供HTTP服务的，以及相关配置的（例如虚拟主机、URL转发等等），而Tomcat是Apache组织在符合Java EE的JSP、Servlet标准下开发的一个JSP服务器. </span><br><span class=\"line\"></span><br><span class=\"line\">Apache是一个Web服务器环境程序,启用他可以作为Web服务器使用,不过只支持静态网页如(ASP,PHP,CGI,JSP)等动态网页的就不行。如果要在Apache环境下运行JSP的话就需要一个解释器来执行JSP网页,而这个JSP解释器就是Tomcat。</span><br><span class=\"line\"></span><br><span class=\"line\">Apache:侧重于HTTPServer ，Tomcat:侧重于Servlet引擎，如果以Standalone方式运行，功能上与Apache等效，支持JSP，但对静态网页不太理想；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache是Web服务器，Tomcat是应用（Java）服务器，它只是一个Servlet(JSP也翻译成Servlet)容器，可以认为是Apache的扩展，但是可以独立于Apache运行。</span><br></pre></td></tr></table></figure></p>\n<p>实际使用中Apache与Tomcat常常是整合使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果客户端请求的是静态页面，则只需要Apache服务器响应请求。</span><br><span class=\"line\"></span><br><span class=\"line\">如果客户端请求动态页面，则是Tomcat服务器响应请求。</span><br><span class=\"line\"></span><br><span class=\"line\">因为JSP是服务器端解释代码的，这样整合就可以减少Tomcat的服务开销。</span><br><span class=\"line\"></span><br><span class=\"line\">可以理解Tomcat为Apache的一种扩展。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Nginx与Apache比较\"><a href=\"#Nginx与Apache比较\" class=\"headerlink\" title=\"Nginx与Apache比较\"></a>Nginx与Apache比较</h3><h3 id=\"nginx相对于apache的优点\"><a href=\"#nginx相对于apache的优点\" class=\"headerlink\" title=\"nginx相对于apache的优点\"></a>nginx相对于apache的优点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">轻量级，同样起web 服务，比apache占用更少的内存及资源 </span><br><span class=\"line\"></span><br><span class=\"line\">抗并发，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 </span><br><span class=\"line\"></span><br><span class=\"line\">高度模块化的设计，编写模块相对简单 </span><br><span class=\"line\"></span><br><span class=\"line\">提供负载均衡</span><br><span class=\"line\"></span><br><span class=\"line\">社区活跃，各种高性能模块出品迅速</span><br></pre></td></tr></table></figure>\n<h4 id=\"apache-相对于nginx-的优点\"><a href=\"#apache-相对于nginx-的优点\" class=\"headerlink\" title=\"apache 相对于nginx 的优点\"></a>apache 相对于nginx 的优点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apache的 rewrite 比nginx 的强大 ；</span><br><span class=\"line\"></span><br><span class=\"line\">支持动态页面；</span><br><span class=\"line\"></span><br><span class=\"line\">支持的模块多，基本涵盖所有应用；</span><br><span class=\"line\"></span><br><span class=\"line\">性能稳定，而nginx相对bug较多。</span><br></pre></td></tr></table></figure>\n<h3 id=\"两者优缺点比较\"><a href=\"#两者优缺点比较\" class=\"headerlink\" title=\"两者优缺点比较\"></a>两者优缺点比较</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nginx 配置简洁, Apache 复杂 ；</span><br><span class=\"line\"></span><br><span class=\"line\">Nginx 静态处理性能比 Apache 高 3倍以上 ；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache 对 PHP 支持比较简单，Nginx 需要配合其他后端用；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache 的组件比 Nginx 多 ；</span><br><span class=\"line\"></span><br><span class=\"line\">apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程；</span><br><span class=\"line\"></span><br><span class=\"line\">nginx处理静态文件好,耗费内存少；</span><br><span class=\"line\"></span><br><span class=\"line\">动态请求由apache去做，nginx只适合静态和反向；</span><br><span class=\"line\"></span><br><span class=\"line\">Nginx适合做前端服务器，负载性能很好；</span><br><span class=\"line\"></span><br><span class=\"line\">Nginx本身就是一个反向代理服务器 ，且支持负载均衡</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nginx优点：负载均衡、反向代理、处理静态文件优势。nginx处理静态请求的速度高于apache；</span><br><span class=\"line\"></span><br><span class=\"line\">Apache优点：相对于Tomcat服务器来说处理静态文件是它的优势，速度快。Apache是静态解析，适合静态HTML、图片等。</span><br><span class=\"line\"></span><br><span class=\"line\">Tomcat：动态解析容器，处理动态请求，是编译JSP\\Servlet的容器，Nginx有动态分离机制，静态请求直接就可以通过Nginx处理，动态请求才转发请求到后台交由Tomcat进行处理。</span><br><span class=\"line\"></span><br><span class=\"line\">Apache在处理动态有优势，Nginx并发性比较好，CPU内存占用低，如果rewrite频繁，那还是Apache较适合。</span><br></pre></td></tr></table></figure>\n<h4 id=\"反向代理的理解：\"><a href=\"#反向代理的理解：\" class=\"headerlink\" title=\"反向代理的理解：\"></a>反向代理的理解：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，</span><br><span class=\"line\"></span><br><span class=\"line\">并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</span><br></pre></td></tr></table></figure>","categories":[{"name":"随笔","path":"api/categories/随笔.json"}],"tags":[]}