{"title":"运维自动化工具puppet","slug":"linux/运维自动化工具puppet","date":"2017-08-07T11:42:22.000Z","updated":"2018-04-22T09:29:33.000Z","comments":true,"path":"api/articles/linux/运维自动化工具puppet.json","excerpt":null,"covers":["https://www.linuxidc.com/upload/2017_12/171221202568971.png"],"content":"<h2 id=\"puppet的概念\"><a href=\"#puppet的概念\" class=\"headerlink\" title=\"puppet的概念\"></a>puppet的概念</h2><p>Puppet是一款使用GPLV2X协议授权的开源管理配置工具，用Ruby语言开发。其既可以通过客户端–服务器的方式运行，也可以独立运行。Puppet可以为系统管理员提供方便、快捷的系统自动化管理。对于系统管理员来说通过Puppet配置管理系统，底层的操作系统的发行版本是透明的，Puppet通过（Provider又称提供者）属性来完成软件的配置与安装，管理员不必关心操作系统的种类与发行版本，<br>Puppet还可以提供一个强大的框架来完成系统管理功能，在框架的基础上系统管理员可以通过Puppet语言来描述系统的一些事务，如安装软件、初始化系统、启动、删除服务、推送配置文件和差异化配置管理服务器等。同时系统管理员和系统管理员之间可以分享用Puppet语言描述好的事务，从而减少重复劳动，提高工作效率。</p>\n<h3 id=\"puppet工作模型\"><a href=\"#puppet工作模型\" class=\"headerlink\" title=\"puppet工作模型\"></a>puppet工作模型</h3><ul>\n<li>a.部署调度<ul>\n<li>puppet master在一台服务器以守护进程方式运行，同时也包含客户端各节点的配置信息，puppet agent 在与master的通信过程中，通过标准的SSL协议进行加密和验证，验证通过后，agent从masteer上读取响应节点信息应用在本地。</li>\n</ul>\n</li>\n<li>b.配置语言和资源抽象<ul>\n<li>puppet使用描述性语言来定义配置项，在puppet中将配置项被称为resource，当Agent连接Master时，Master并不知道Agent的操作系统型号和版本。Agent通过Facter工具收集系统相关信息，并通过SSL协议将Agent的信息传递给Master。Master根据Agent收集到的相关信息，通过资源的提供者来为Agent服务。比如Package资源收到Agent的信息后，会识别Agent的系统型号版本，并通过资源提供者（如yum aptitude pkgadd apt-get等）匹配，为Agent服务。</li>\n</ul>\n</li>\n<li>c.事物层<pre><code>Puppet事务层其实就是它的解析引擎。Puppet事务层配置每一台主机的过程包括：\n</code></pre><ul>\n<li>解析和配置编译。</li>\n<li>将编译好的配置同步到Agent。</li>\n<li>在Agent上应用配置。</li>\n<li>向Master报告运行结果。</li>\n</ul>\n</li>\n</ul>\n<p>首先Puppet会创建一个图表来表示所有资源的关系和上下游执行顺序，以及和Agent的关系。然后Puppet将按照资源之间的关系和上下游顺序依次执行。<br>接着Puppet为每一个Agent获取相应的资源，并把它们编译成“目录”，然后将目录依次分发到各主机，并通过Agent来应用它们，最后应用结果以报告形式反馈给Master。自动化运维工具puppet安装配置</p>\n<h3 id=\"puppet的细节和原理\"><a href=\"#puppet的细节和原理\" class=\"headerlink\" title=\"puppet的细节和原理\"></a>puppet的细节和原理</h3><p><center><br><img src=\"https://www.linuxidc.com/upload/2017_12/171221202568971.png\" alt><br></center><br>Puppet采用了非常简单的C/S架构，所有数据的交互都通过SSL进行，以保证安全。</p>\n<ol>\n<li>客户端Puppetd向Master发起认证请求，或使用带签名的证书。</li>\n<li>Master告诉Client你是合法的。</li>\n<li>客户端Puppetd调用Facter，Facter探测出主机的一些变量，例如主机名、内存大小、IP地址等。Puppetd将这些信息通过SSL连接发送到服务器端。</li>\n<li>服务器端的Puppet Master检测客户端的主机名，然后找到manifest对应的node配置，并对该部分内容进行解析。Facter送过来的信息可以作为变量处 理，node牵涉到的代码才解析，其他没牵涉的代码不解析。解析分为几个阶段，首先是语法检查，如果语法错误就报错；如果语法没错，就继续解析，解析的结 果生成一个中间的“伪代码”（catelog），然后把伪代码发给客户端。</li>\n<li>客户端接收到“伪代码”，并且执行。</li>\n<li>客户端在执行时判断有没有File文件，如果有，则向fileserver发起请求。</li>\n<li>客户端判断有没有配置Report，如果已配置，则把执行结果发送给服务器。</li>\n<li>服务器端把客户端的执行结果写入日志，并发送给报告系统。</li>\n</ol>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两台机器：</span><br><span class=\"line\">192.168.1.100（服务端）</span><br><span class=\"line\">192.168.1.101 （客户端）</span><br><span class=\"line\">两台机器关闭selinux，清空iptables规则，并保存，设置hostname</span><br><span class=\"line\"></span><br><span class=\"line\">100上</span><br><span class=\"line\">hostname   master.aming.com</span><br><span class=\"line\">编辑/etc/sysconfig/network  定义hostname</span><br><span class=\"line\"></span><br><span class=\"line\">101上</span><br><span class=\"line\">hostname   client.aming.com</span><br><span class=\"line\">编辑/etc/sysconfig/network  定义hostname</span><br><span class=\"line\">重启服务器</span><br><span class=\"line\"></span><br><span class=\"line\">编辑hosts文件</span><br><span class=\"line\">100和101全部为</span><br><span class=\"line\">192.168.1.100  master.aming.com</span><br><span class=\"line\">192.168.1.101   client.aming.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">安装ntpdate，并建立自动同步时间的任务计划：</span><br><span class=\"line\">yum install -y ntp</span><br><span class=\"line\">cront -e   //加入</span><br><span class=\"line\">*/10  * * * * ntpdate time.windows.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端安装\"><a href=\"#服务端安装\" class=\"headerlink\" title=\"服务端安装\"></a>服务端安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装puppet 源</span><br><span class=\"line\">rpm -ivh  http://yum.puppetlabs.com/el/6/p ... ease-6-7.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">安装服务端程序</span><br><span class=\"line\">yum install -y puppet-server</span><br><span class=\"line\">启动服务</span><br><span class=\"line\">service  puppetmaster start</span><br><span class=\"line\"></span><br><span class=\"line\">开机启动</span><br><span class=\"line\">chkconfig  puppetmaster on</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装puppet 源</span><br><span class=\"line\">rpm -ivh http://yum.puppetlabs.com/el/6/p ... ease-6-7.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">安装客户端程序</span><br><span class=\"line\">yum install -y puppet</span><br><span class=\"line\"></span><br><span class=\"line\">修改配置文件</span><br><span class=\"line\">vi /etc/puppet/puppet.conf</span><br><span class=\"line\">在最后面添加：</span><br><span class=\"line\">listen = true</span><br><span class=\"line\">server = master.aming.com</span><br><span class=\"line\">runinterval = 30   //主动更新，每隔30s</span><br><span class=\"line\"></span><br><span class=\"line\">然后启动puppet服务</span><br><span class=\"line\">/etc/init.d/puppet start</span><br><span class=\"line\"></span><br><span class=\"line\">手动生成ssl证书</span><br><span class=\"line\">puppet agent  --test  --server  master.aming.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端查看，签发客户端的证书\"><a href=\"#服务端查看，签发客户端的证书\" class=\"headerlink\" title=\"服务端查看，签发客户端的证书\"></a>服务端查看，签发客户端的证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puppet cert list --all</span><br><span class=\"line\">会看到client.aming.com 的key，正常应该会在行首有一个+，如果没有说明还没有签发</span><br><span class=\"line\"></span><br><span class=\"line\">签发客户端</span><br><span class=\"line\">puppet cert --sign client.aming.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端上</span><br><span class=\"line\">vi /etc/puppet/manifests/site.pp</span><br><span class=\"line\">加入如下内容：</span><br><span class=\"line\">node default &#123;</span><br><span class=\"line\">file &#123;</span><br><span class=\"line\">&quot;/tmp/123.txt&quot;: content =&gt; &quot;test,test&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">客户端上</span><br><span class=\"line\">puppet agent --test --server  master.aming.com</span><br><span class=\"line\">这样会在客户端上生成一个 /tmp/123.txt的文件，并且内容为 testtest</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置自动签发证书\"><a href=\"#配置自动签发证书\" class=\"headerlink\" title=\"配置自动签发证书\"></a>配置自动签发证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端上删除客户端证书</span><br><span class=\"line\">puppet cert clean client.aming.com</span><br><span class=\"line\"></span><br><span class=\"line\">客户端上删除ssl下的文件</span><br><span class=\"line\">rm -rf /var/lib/puppet/ssl/*</span><br><span class=\"line\"></span><br><span class=\"line\">服务端更改配置文件</span><br><span class=\"line\">vim /etc/puppet/puppet.conf在[main]下面加一行</span><br><span class=\"line\">autosign = true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">服务端创建自动签发的配置文件</span><br><span class=\"line\">vim /etc/puppet/autosign.conf</span><br><span class=\"line\">加入如下内容：</span><br><span class=\"line\">*.aming.com </span><br><span class=\"line\"></span><br><span class=\"line\">重启puppetmaster服务</span><br><span class=\"line\">/etc/init.d/puppetmaster restart</span><br><span class=\"line\"></span><br><span class=\"line\">客户端重启puppet服务</span><br><span class=\"line\">/etc/init.d/puppet restart</span><br><span class=\"line\"></span><br><span class=\"line\">这样就能在服务端上自动签发证书了。当然不重启服务，手动连一下服务端也可以</span><br><span class=\"line\">客户端执行：</span><br><span class=\"line\">puppet agent --test --server  master.aming.com</span><br><span class=\"line\"></span><br><span class=\"line\">扩展： puppet更新方式  http://www.cnphp6.com/archives/66975</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先要理解几个概念，模块、类、资源。 模块是puppet的最大单元，模块里面有类，类下面有资源。 </span><br><span class=\"line\">puppet管理的文件、用户、服务、任务计划等全部由这些单元组成。</span><br><span class=\"line\"></span><br><span class=\"line\">下面我们来定义一个模块：</span><br><span class=\"line\">在服务端上做如下操作：</span><br><span class=\"line\">mkdir /etc/puppet/modules/testm  //模块名字就是testm</span><br><span class=\"line\">cd !$</span><br><span class=\"line\">mkdir &#123;files,manifests,templates&#125;   //一个模块下需要有这三个目录，files存一些文件（可以为空），manifests存配置文件，templates存模板（可以留空）</span><br><span class=\"line\">touch manifests/init.pp  //这个是必须的</span><br><span class=\"line\">vi  manifests/init.pp   //内容如下</span><br><span class=\"line\">class testm&#123;</span><br><span class=\"line\">file &#123;&quot;/tmp/2.txt&quot;:</span><br><span class=\"line\">owner =&gt; &quot;root&quot;,</span><br><span class=\"line\">group =&gt; &quot;root&quot;,</span><br><span class=\"line\">mode =&gt; 0400,</span><br><span class=\"line\">source =&gt; &quot;puppet://$puppetserver/modules/testm/1.txt&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">说明：类名字也叫做testm, 类下面定义了一个资源file，文件名字叫做/tmp/2.txt ，owner，group，mode定义文件的属主、数组以及权限，</span><br><span class=\"line\">source定义这个文件从哪里获取。 $puppetserver一会也要定义一下，这里指的是puppet server服务器上/etc/puppet/modules/testm/files/1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">下面要继续定义一个很关键的配置文件：</span><br><span class=\"line\">vim  /etc/puppet/manifests/site.pp   //内容如下</span><br><span class=\"line\">$puppetserver = &apos;master.aming.com&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">node &apos;client.aming.com&apos;&#123;</span><br><span class=\"line\">    include testm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">说明：$puppetserver 定义服务端的主机名，node后面为客户端的主机名，这里面定义该客户端要加载的模块</span><br><span class=\"line\">配置完成后，在客户端执行命令：</span><br><span class=\"line\">puppet agent --test  --server=master.aming.com   //如果客户端上启动了puppet服务，不用执行这命令，它也会自动同步的</span><br><span class=\"line\">上面的模块其实只是同步了一个文件而已，那么要想同步一个目录如何做？我们可以通过实现同步一个目录来做一个包发布系统。</span><br><span class=\"line\">比如在一台机器上编译安装好了apache，那么就可以通过这样的模块把这个apache目录整个分发到其他机器上。</span><br><span class=\"line\"></span><br><span class=\"line\">模块配置文件如下：</span><br><span class=\"line\">class apache&#123;</span><br><span class=\"line\">file &#123;&quot;/usr/local/apache2&quot;:</span><br><span class=\"line\">owner =&gt; &quot;root&quot;,</span><br><span class=\"line\">group =&gt; &quot;root&quot;,</span><br><span class=\"line\">source =&gt; &quot;puppet://$puppetserver/modules/apache/apache2&quot;,</span><br><span class=\"line\">recurse =&gt; true,</span><br><span class=\"line\">purge =&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">其中recurse=&gt;true 这个参数很关键，它表示递归的意思，没有这个不能同步目录。purge参数可以保证当服务端删除某个文件，客户端可以跟着删除。</span><br><span class=\"line\"></span><br><span class=\"line\">远程执行命令：</span><br><span class=\"line\">exec &#123;&quot;123&quot;:</span><br><span class=\"line\">unless =&gt; &quot;test -f /tmp/aminglinux.txt&quot;,</span><br><span class=\"line\">path =&gt; [&quot;/bin&quot;, &quot;/sbin&quot;, &quot;/usr/bin&quot;, &quot;/usr/sbin&quot;],</span><br><span class=\"line\">command =&gt; &quot;/bin/touch /tmp/aminglinux.txt&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">说明：unless后面的命令作为一个条件，当条件成立时，不会执行下面的命令，如果想要条件成立时，执行下面的命令，用 onlyif。</span><br><span class=\"line\">要注意的是，我们一定要给执行的这条命令加个条件，使用unless就可以，必须满足这个条件才能执行命令，否则这个命令会一直执行，不太妥当。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cron资源：</span><br><span class=\"line\">cron &#123;&quot;aming1&quot;:</span><br><span class=\"line\">command =&gt; &quot;/sbin/ntpdate time.windows.com&quot;,</span><br><span class=\"line\">user =&gt; &quot;root&quot;,</span><br><span class=\"line\">minute =&gt; &quot;*/10&quot;,</span><br><span class=\"line\"># ensure =&gt; &quot;absent&quot;  //当增加了这行配置，则会把该cron删除掉</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">说明：分时日月周分别对应puppet里面的minute，hour，monthday，month，weekday</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展学习\"><a href=\"#扩展学习\" class=\"headerlink\" title=\"扩展学习\"></a>扩展学习</h2><ul>\n<li><a href=\"http://blog.chinaunix.net/uid-20639775-id-3314583.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-20639775-id-3314583.html</a></li>\n</ul>\n<p>资源： </p>\n<ul>\n<li>package  <a href=\"http://puppet.wikidot.com/package\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/package</a></li>\n<li>service <a href=\"http://puppet.wikidot.com/srv\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/srv</a></li>\n<li>exec <a href=\"http://puppet.wikidot.com/exec\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/exec</a></li>\n<li>cron <a href=\"http://puppet.wikidot.com/cron\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/cron</a></li>\n</ul>\n","more":"<h2 id=\"puppet的概念\"><a href=\"#puppet的概念\" class=\"headerlink\" title=\"puppet的概念\"></a>puppet的概念</h2><p>Puppet是一款使用GPLV2X协议授权的开源管理配置工具，用Ruby语言开发。其既可以通过客户端–服务器的方式运行，也可以独立运行。Puppet可以为系统管理员提供方便、快捷的系统自动化管理。对于系统管理员来说通过Puppet配置管理系统，底层的操作系统的发行版本是透明的，Puppet通过（Provider又称提供者）属性来完成软件的配置与安装，管理员不必关心操作系统的种类与发行版本，<br>Puppet还可以提供一个强大的框架来完成系统管理功能，在框架的基础上系统管理员可以通过Puppet语言来描述系统的一些事务，如安装软件、初始化系统、启动、删除服务、推送配置文件和差异化配置管理服务器等。同时系统管理员和系统管理员之间可以分享用Puppet语言描述好的事务，从而减少重复劳动，提高工作效率。</p>\n<h3 id=\"puppet工作模型\"><a href=\"#puppet工作模型\" class=\"headerlink\" title=\"puppet工作模型\"></a>puppet工作模型</h3><ul>\n<li>a.部署调度<ul>\n<li>puppet master在一台服务器以守护进程方式运行，同时也包含客户端各节点的配置信息，puppet agent 在与master的通信过程中，通过标准的SSL协议进行加密和验证，验证通过后，agent从masteer上读取响应节点信息应用在本地。</li>\n</ul>\n</li>\n<li>b.配置语言和资源抽象<ul>\n<li>puppet使用描述性语言来定义配置项，在puppet中将配置项被称为resource，当Agent连接Master时，Master并不知道Agent的操作系统型号和版本。Agent通过Facter工具收集系统相关信息，并通过SSL协议将Agent的信息传递给Master。Master根据Agent收集到的相关信息，通过资源的提供者来为Agent服务。比如Package资源收到Agent的信息后，会识别Agent的系统型号版本，并通过资源提供者（如yum aptitude pkgadd apt-get等）匹配，为Agent服务。</li>\n</ul>\n</li>\n<li>c.事物层<pre><code>Puppet事务层其实就是它的解析引擎。Puppet事务层配置每一台主机的过程包括：\n</code></pre><ul>\n<li>解析和配置编译。</li>\n<li>将编译好的配置同步到Agent。</li>\n<li>在Agent上应用配置。</li>\n<li>向Master报告运行结果。</li>\n</ul>\n</li>\n</ul>\n<p>首先Puppet会创建一个图表来表示所有资源的关系和上下游执行顺序，以及和Agent的关系。然后Puppet将按照资源之间的关系和上下游顺序依次执行。<br>接着Puppet为每一个Agent获取相应的资源，并把它们编译成“目录”，然后将目录依次分发到各主机，并通过Agent来应用它们，最后应用结果以报告形式反馈给Master。自动化运维工具puppet安装配置</p>\n<h3 id=\"puppet的细节和原理\"><a href=\"#puppet的细节和原理\" class=\"headerlink\" title=\"puppet的细节和原理\"></a>puppet的细节和原理</h3><p><center><br><img src=\"https://www.linuxidc.com/upload/2017_12/171221202568971.png\" alt><br></center><br>Puppet采用了非常简单的C/S架构，所有数据的交互都通过SSL进行，以保证安全。</p>\n<ol>\n<li>客户端Puppetd向Master发起认证请求，或使用带签名的证书。</li>\n<li>Master告诉Client你是合法的。</li>\n<li>客户端Puppetd调用Facter，Facter探测出主机的一些变量，例如主机名、内存大小、IP地址等。Puppetd将这些信息通过SSL连接发送到服务器端。</li>\n<li>服务器端的Puppet Master检测客户端的主机名，然后找到manifest对应的node配置，并对该部分内容进行解析。Facter送过来的信息可以作为变量处 理，node牵涉到的代码才解析，其他没牵涉的代码不解析。解析分为几个阶段，首先是语法检查，如果语法错误就报错；如果语法没错，就继续解析，解析的结 果生成一个中间的“伪代码”（catelog），然后把伪代码发给客户端。</li>\n<li>客户端接收到“伪代码”，并且执行。</li>\n<li>客户端在执行时判断有没有File文件，如果有，则向fileserver发起请求。</li>\n<li>客户端判断有没有配置Report，如果已配置，则把执行结果发送给服务器。</li>\n<li>服务器端把客户端的执行结果写入日志，并发送给报告系统。</li>\n</ol>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两台机器：</span><br><span class=\"line\">192.168.1.100（服务端）</span><br><span class=\"line\">192.168.1.101 （客户端）</span><br><span class=\"line\">两台机器关闭selinux，清空iptables规则，并保存，设置hostname</span><br><span class=\"line\"></span><br><span class=\"line\">100上</span><br><span class=\"line\">hostname   master.aming.com</span><br><span class=\"line\">编辑/etc/sysconfig/network  定义hostname</span><br><span class=\"line\"></span><br><span class=\"line\">101上</span><br><span class=\"line\">hostname   client.aming.com</span><br><span class=\"line\">编辑/etc/sysconfig/network  定义hostname</span><br><span class=\"line\">重启服务器</span><br><span class=\"line\"></span><br><span class=\"line\">编辑hosts文件</span><br><span class=\"line\">100和101全部为</span><br><span class=\"line\">192.168.1.100  master.aming.com</span><br><span class=\"line\">192.168.1.101   client.aming.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">安装ntpdate，并建立自动同步时间的任务计划：</span><br><span class=\"line\">yum install -y ntp</span><br><span class=\"line\">cront -e   //加入</span><br><span class=\"line\">*/10  * * * * ntpdate time.windows.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端安装\"><a href=\"#服务端安装\" class=\"headerlink\" title=\"服务端安装\"></a>服务端安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装puppet 源</span><br><span class=\"line\">rpm -ivh  http://yum.puppetlabs.com/el/6/p ... ease-6-7.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">安装服务端程序</span><br><span class=\"line\">yum install -y puppet-server</span><br><span class=\"line\">启动服务</span><br><span class=\"line\">service  puppetmaster start</span><br><span class=\"line\"></span><br><span class=\"line\">开机启动</span><br><span class=\"line\">chkconfig  puppetmaster on</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装puppet 源</span><br><span class=\"line\">rpm -ivh http://yum.puppetlabs.com/el/6/p ... ease-6-7.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">安装客户端程序</span><br><span class=\"line\">yum install -y puppet</span><br><span class=\"line\"></span><br><span class=\"line\">修改配置文件</span><br><span class=\"line\">vi /etc/puppet/puppet.conf</span><br><span class=\"line\">在最后面添加：</span><br><span class=\"line\">listen = true</span><br><span class=\"line\">server = master.aming.com</span><br><span class=\"line\">runinterval = 30   //主动更新，每隔30s</span><br><span class=\"line\"></span><br><span class=\"line\">然后启动puppet服务</span><br><span class=\"line\">/etc/init.d/puppet start</span><br><span class=\"line\"></span><br><span class=\"line\">手动生成ssl证书</span><br><span class=\"line\">puppet agent  --test  --server  master.aming.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务端查看，签发客户端的证书\"><a href=\"#服务端查看，签发客户端的证书\" class=\"headerlink\" title=\"服务端查看，签发客户端的证书\"></a>服务端查看，签发客户端的证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puppet cert list --all</span><br><span class=\"line\">会看到client.aming.com 的key，正常应该会在行首有一个+，如果没有说明还没有签发</span><br><span class=\"line\"></span><br><span class=\"line\">签发客户端</span><br><span class=\"line\">puppet cert --sign client.aming.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端上</span><br><span class=\"line\">vi /etc/puppet/manifests/site.pp</span><br><span class=\"line\">加入如下内容：</span><br><span class=\"line\">node default &#123;</span><br><span class=\"line\">file &#123;</span><br><span class=\"line\">&quot;/tmp/123.txt&quot;: content =&gt; &quot;test,test&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">客户端上</span><br><span class=\"line\">puppet agent --test --server  master.aming.com</span><br><span class=\"line\">这样会在客户端上生成一个 /tmp/123.txt的文件，并且内容为 testtest</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置自动签发证书\"><a href=\"#配置自动签发证书\" class=\"headerlink\" title=\"配置自动签发证书\"></a>配置自动签发证书</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端上删除客户端证书</span><br><span class=\"line\">puppet cert clean client.aming.com</span><br><span class=\"line\"></span><br><span class=\"line\">客户端上删除ssl下的文件</span><br><span class=\"line\">rm -rf /var/lib/puppet/ssl/*</span><br><span class=\"line\"></span><br><span class=\"line\">服务端更改配置文件</span><br><span class=\"line\">vim /etc/puppet/puppet.conf在[main]下面加一行</span><br><span class=\"line\">autosign = true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">服务端创建自动签发的配置文件</span><br><span class=\"line\">vim /etc/puppet/autosign.conf</span><br><span class=\"line\">加入如下内容：</span><br><span class=\"line\">*.aming.com </span><br><span class=\"line\"></span><br><span class=\"line\">重启puppetmaster服务</span><br><span class=\"line\">/etc/init.d/puppetmaster restart</span><br><span class=\"line\"></span><br><span class=\"line\">客户端重启puppet服务</span><br><span class=\"line\">/etc/init.d/puppet restart</span><br><span class=\"line\"></span><br><span class=\"line\">这样就能在服务端上自动签发证书了。当然不重启服务，手动连一下服务端也可以</span><br><span class=\"line\">客户端执行：</span><br><span class=\"line\">puppet agent --test --server  master.aming.com</span><br><span class=\"line\"></span><br><span class=\"line\">扩展： puppet更新方式  http://www.cnphp6.com/archives/66975</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先要理解几个概念，模块、类、资源。 模块是puppet的最大单元，模块里面有类，类下面有资源。 </span><br><span class=\"line\">puppet管理的文件、用户、服务、任务计划等全部由这些单元组成。</span><br><span class=\"line\"></span><br><span class=\"line\">下面我们来定义一个模块：</span><br><span class=\"line\">在服务端上做如下操作：</span><br><span class=\"line\">mkdir /etc/puppet/modules/testm  //模块名字就是testm</span><br><span class=\"line\">cd !$</span><br><span class=\"line\">mkdir &#123;files,manifests,templates&#125;   //一个模块下需要有这三个目录，files存一些文件（可以为空），manifests存配置文件，templates存模板（可以留空）</span><br><span class=\"line\">touch manifests/init.pp  //这个是必须的</span><br><span class=\"line\">vi  manifests/init.pp   //内容如下</span><br><span class=\"line\">class testm&#123;</span><br><span class=\"line\">file &#123;&quot;/tmp/2.txt&quot;:</span><br><span class=\"line\">owner =&gt; &quot;root&quot;,</span><br><span class=\"line\">group =&gt; &quot;root&quot;,</span><br><span class=\"line\">mode =&gt; 0400,</span><br><span class=\"line\">source =&gt; &quot;puppet://$puppetserver/modules/testm/1.txt&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">说明：类名字也叫做testm, 类下面定义了一个资源file，文件名字叫做/tmp/2.txt ，owner，group，mode定义文件的属主、数组以及权限，</span><br><span class=\"line\">source定义这个文件从哪里获取。 $puppetserver一会也要定义一下，这里指的是puppet server服务器上/etc/puppet/modules/testm/files/1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">下面要继续定义一个很关键的配置文件：</span><br><span class=\"line\">vim  /etc/puppet/manifests/site.pp   //内容如下</span><br><span class=\"line\">$puppetserver = &apos;master.aming.com&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">node &apos;client.aming.com&apos;&#123;</span><br><span class=\"line\">    include testm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">说明：$puppetserver 定义服务端的主机名，node后面为客户端的主机名，这里面定义该客户端要加载的模块</span><br><span class=\"line\">配置完成后，在客户端执行命令：</span><br><span class=\"line\">puppet agent --test  --server=master.aming.com   //如果客户端上启动了puppet服务，不用执行这命令，它也会自动同步的</span><br><span class=\"line\">上面的模块其实只是同步了一个文件而已，那么要想同步一个目录如何做？我们可以通过实现同步一个目录来做一个包发布系统。</span><br><span class=\"line\">比如在一台机器上编译安装好了apache，那么就可以通过这样的模块把这个apache目录整个分发到其他机器上。</span><br><span class=\"line\"></span><br><span class=\"line\">模块配置文件如下：</span><br><span class=\"line\">class apache&#123;</span><br><span class=\"line\">file &#123;&quot;/usr/local/apache2&quot;:</span><br><span class=\"line\">owner =&gt; &quot;root&quot;,</span><br><span class=\"line\">group =&gt; &quot;root&quot;,</span><br><span class=\"line\">source =&gt; &quot;puppet://$puppetserver/modules/apache/apache2&quot;,</span><br><span class=\"line\">recurse =&gt; true,</span><br><span class=\"line\">purge =&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">其中recurse=&gt;true 这个参数很关键，它表示递归的意思，没有这个不能同步目录。purge参数可以保证当服务端删除某个文件，客户端可以跟着删除。</span><br><span class=\"line\"></span><br><span class=\"line\">远程执行命令：</span><br><span class=\"line\">exec &#123;&quot;123&quot;:</span><br><span class=\"line\">unless =&gt; &quot;test -f /tmp/aminglinux.txt&quot;,</span><br><span class=\"line\">path =&gt; [&quot;/bin&quot;, &quot;/sbin&quot;, &quot;/usr/bin&quot;, &quot;/usr/sbin&quot;],</span><br><span class=\"line\">command =&gt; &quot;/bin/touch /tmp/aminglinux.txt&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">说明：unless后面的命令作为一个条件，当条件成立时，不会执行下面的命令，如果想要条件成立时，执行下面的命令，用 onlyif。</span><br><span class=\"line\">要注意的是，我们一定要给执行的这条命令加个条件，使用unless就可以，必须满足这个条件才能执行命令，否则这个命令会一直执行，不太妥当。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cron资源：</span><br><span class=\"line\">cron &#123;&quot;aming1&quot;:</span><br><span class=\"line\">command =&gt; &quot;/sbin/ntpdate time.windows.com&quot;,</span><br><span class=\"line\">user =&gt; &quot;root&quot;,</span><br><span class=\"line\">minute =&gt; &quot;*/10&quot;,</span><br><span class=\"line\"># ensure =&gt; &quot;absent&quot;  //当增加了这行配置，则会把该cron删除掉</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">说明：分时日月周分别对应puppet里面的minute，hour，monthday，month，weekday</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展学习\"><a href=\"#扩展学习\" class=\"headerlink\" title=\"扩展学习\"></a>扩展学习</h2><ul>\n<li><a href=\"http://blog.chinaunix.net/uid-20639775-id-3314583.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-20639775-id-3314583.html</a></li>\n</ul>\n<p>资源： </p>\n<ul>\n<li>package  <a href=\"http://puppet.wikidot.com/package\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/package</a></li>\n<li>service <a href=\"http://puppet.wikidot.com/srv\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/srv</a></li>\n<li>exec <a href=\"http://puppet.wikidot.com/exec\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/exec</a></li>\n<li>cron <a href=\"http://puppet.wikidot.com/cron\" target=\"_blank\" rel=\"noopener\">http://puppet.wikidot.com/cron</a></li>\n</ul>\n","categories":[{"name":"linux","path":"api/categories/linux.json"},{"name":"运维自动化工具","path":"api/categories/运维自动化工具.json"}],"tags":[{"name":"puppet","path":"api/tags/puppet.json"}]}