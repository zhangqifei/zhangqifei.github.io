{"title":"Systemd 入门教程：命令篇","slug":"linux/Systemd 入门教程：命令篇","date":"2017-05-06T01:31:25.000Z","updated":"2018-04-22T09:30:14.835Z","comments":true,"path":"api/articles/linux/Systemd 入门教程：命令篇.json","excerpt":null,"covers":["http://zhangqifei.top/picture/ifeier/data/systemd.jpg","http://zhangqifei.top/picture/ifeier/data/systemd.png"],"content":"<center><img src=\"http://zhangqifei.top/picture/ifeier/data/systemd.jpg\" width=\"500\" height=\"200\" alt=\"markdown\" align=\"center\"></center><br>Systemd 是 Linux 系统工具，用来启动<strong>守护进程</strong>，已成为大多数发行版的标准配置。<br><br>本文介绍它的基本用法，分为上下两篇。今天介绍它的主要命令，<strong>下一篇</strong>介绍如何用于实战。<br>历史上，Linux 的启动一直采用<code>init</code>进程。<br><br>下面的命令用来启动服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/apache2 start</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">$ service apache2 start</span><br></pre></td></tr></table></figure><br><br><strong>这种方法有两个缺点。</strong><br>1. 启动时间长。init进程是串行启动，只有前一个进程启动完，才会启动下一个进程。<br>2. 启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。<br><br>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。<br><br>根据 Linux 惯例，字母d是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。<br><br><br><center><img src=\"http://zhangqifei.top/picture/ifeier/data/dystemdname.jpg\" width=\"500\" height=\"200\" alt=\"Systemdname\" align=\"center\"><br>（Systemd 作者 Lennart Poettering）</center>\n\n<p>使用了 Systemd，就不需要再用<code>init</code>了。Systemd 取代了<code>initd</code>，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl --version    //查看 Systemd 的版本。</span><br></pre></td></tr></table></figure></p>\n<p>Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反”keep simple, keep stupid”的<strong>Unix 哲学</strong></p>\n<p><center><img src=\"http://zhangqifei.top/picture/ifeier/data/systemd.png\" width=\"500\" height=\"200\" alt=\"Systemdname\" align=\"center\"><br>（Systemd 架构图）</center><br>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p>\n<h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST --&gt; Boot Sequence --&gt; Bootloader --&gt; kernel + initramfs(initrd) --&gt; rootfs--&gt; /sbin/init</span><br><span class=\"line\">    init:CentOS 5: SysV init</span><br><span class=\"line\">    CentOS 6: Upstart</span><br><span class=\"line\">    CentOS 7: Systemd</span><br></pre></td></tr></table></figure>\n<p>Systemd：系统启动和服务器守护进程管理器，负责在系统启动或运行时，激活系统资源，服务器进程和其它进程</p>\n<p><strong>Systemd新特性：</strong></p>\n<ul>\n<li>系统引导时实现服务并行启动</li>\n<li>按需启动守护进程</li>\n<li>自动化的服务依赖关系管理</li>\n<li>同时采用socket式与D-Bus总线式激活服务</li>\n<li>系统状态快照</li>\n</ul>\n<p><strong>核心概念：</strong> unit表示不同类型的systemd对象，通过配置文件进行标识和配置；文件中主要包含了系统服务、监听socket、保存的系统快照以及其它与init相关的信息</p>\n<p><strong>配置文件：</strong></p>\n<ul>\n<li>/usr/lib/systemd/system:每个服务最主要的启动脚本设置,类似于之前的/etc/init.d/</li>\n<li>/run/systemd/system:系统执行过程中所产生的服务脚本,比上面目录优先运行</li>\n<li>/etc/systemd/system:管理员建立的执行脚本,类似于/etc/rc.d/rcN.d/Sxx类的功能,比上面目录优先运行</li>\n</ul>\n<h3 id=\"Unit类型\"><a href=\"#Unit类型\" class=\"headerlink\" title=\"Unit类型\"></a>Unit类型</h3><ol>\n<li>Systemctl –t help 查看unit类型</li>\n<li>Service unit: 文件扩展名为.service, 用于定义系统服务</li>\n<li>Target unit: 文件扩展名为.target，用于模拟实现运行级别</li>\n<li>Device unit: .device, 用于定义内核识别的设备</li>\n<li>Mount unit: .mount, 定义文件系统挂载点</li>\n<li>Socket unit: .socket,用于标识进程间通信用的socket文件，也可在系统启动时，延迟启动服务，实现按需启动</li>\n<li>Scope Unit：不是由 Systemd 启动的外部进程</li>\n<li>Slice Unit：进程组</li>\n<li>Snapshot unit: .snapshot, 管理系统快照</li>\n<li>Swap unit: .swap, 用于标识swap设备</li>\n<li>Automount unit: .automount，文件系统的自动挂载点</li>\n<li>Path unit: .path，用于定义文件系统中的一个文件或目录使用,常用于当文件系统变化时，延迟激活服务，如：spool 目录</li>\n</ol>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>关键特性：</p>\n<ul>\n<li>基于socket的激活机制：socket与服务程序分离</li>\n<li>基于d-bus的激活机制：</li>\n<li>基于device的激活机制：</li>\n<li>基于path的激活机制：</li>\n<li>系统快照：保存各unit的当前状态信息于持久存储设备中向后兼容sysvinit脚本</li>\n</ul>\n<p>不兼容：</p>\n<ul>\n<li>systemctl命令固定不变，不可扩展</li>\n<li>非由systemd启动的服务，systemctl无法与之通信和控制</li>\n</ul>\n<h3 id=\"管理服务\"><a href=\"#管理服务\" class=\"headerlink\" title=\"管理服务\"></a>管理服务</h3><ul>\n<li>管理系统服务：CentOS 7: service unit</li>\n</ul>\n<blockquote>\n<p>注意：能兼容早期的服务脚本<br> 命令：systemctl COMMAND name.service</p>\n</blockquote>\n<ul>\n<li>启动：service name start ==&gt; systemctl start name.service</li>\n<li>停止：service name stop ==&gt; systemctl stop name.service</li>\n<li>重启：service name restart ==&gt; systemctl restart name.service</li>\n<li>状态：service name status ==&gt; systemctl status name.service</li>\n<li>条件式重启：已启动才重启，否则不做操作<br> service name condrestart ==&gt; systemctl try-restart name.service</li>\n<li>重载或重启服务：先加载，再启动<br> systemctl reload-or-restart name.service</li>\n<li>重载或条件式重启服务：<br> systemctl reload-or-try-restart name.service</li>\n<li>禁止自动和手动启动：<br> systemctl mask name.service</li>\n<li>取消禁止：<br> systemctl unmask name.service</li>\n</ul>\n<h3 id=\"服务查看\"><a href=\"#服务查看\" class=\"headerlink\" title=\"服务查看\"></a>服务查看</h3><ul>\n<li>查看某服务当前激活与否的状态：<br>systemctl is-active name.service</li>\n<li>查看所有已经激活的服务：<br>systemctl list-units –type|-t service </li>\n<li>查看所有服务：<br>systemctl list-units –type service –all|-a</li>\n</ul>\n<p><strong>chkconfig命令的对应关系：</strong></p>\n<ul>\n<li>设定某服务开机自启：<br>chkconfig name on ==&gt; systemctl enable name.service</li>\n<li>设定某服务开机禁止启动：<br>chkconfig name off ==&gt; systemctl disable name.service</li>\n<li>查看所有服务的开机自启状态：<br>chkconfig –list ==&gt; systemctl list-unit-files –type service </li>\n<li>用来列出该服务在哪些运行级别下启用和禁用<br>chkconfig sshd–list ==&gt;ls /etc/systemd/system/*.wants/sshd.service</li>\n<li>查看服务是否开机自启：<br>systemctl is-enabled name.service</li>\n<li>其它命令：查看服务的依赖关系：<br>systemctl list-dependencies name.service</li>\n<li>杀掉进程：<br>systemctl kill unitname</li>\n</ul>\n<h3 id=\"服务状态\"><a href=\"#服务状态\" class=\"headerlink\" title=\"服务状态\"></a>服务状态</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl list-unit-files --<span class=\"built_in\">type</span> service --all显示状态</span><br><span class=\"line\">    loaded:Unit:配置文件已处理</span><br><span class=\"line\">    active(running):一次或多次持续处理的运行</span><br><span class=\"line\">    active(exited):成功完成一次性的配置</span><br><span class=\"line\">    active(waiting):运行中，等待一个事件</span><br><span class=\"line\">    inactive:不运行</span><br><span class=\"line\">    enabled:开机启动</span><br><span class=\"line\">    disabled:开机不启动</span><br><span class=\"line\">    static:开机不启动，但可被另一个启用的服务激活</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令。</p>\n</blockquote>\n<blockquote>\n<p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。</p>\n</blockquote>\n<h3 id=\"systemctl-命令示例\"><a href=\"#systemctl-命令示例\" class=\"headerlink\" title=\"systemctl 命令示例\"></a>systemctl 命令示例</h3><ul>\n<li>显示所有单元状态<br>systemctl或systemctl list-units</li>\n<li>只显示服务单元的状态<br>systemctl –type=service ==&gt;systemctl -t=service</li>\n<li>显示sshd服务单元<br>systemctl –l status sshd.service</li>\n<li>验证sshd服务当前是否活动<br>systemctl is-active sshd</li>\n<li>启动，停止和重启sshd服务<br>systemctl start sshd.service<br>systemctl stop sshd.service<br>systemctl restart sshd.service</li>\n<li>重新加载配置<br>systemctl reload sshd.service</li>\n<li>列出活动状态的所有服务单元<br>systemctl list-units –type=service</li>\n<li>列出所有服务单元<br>systemctl list-units –type=service –all</li>\n<li>查看服务单元的启用和禁用状态<br>systemctl list-unit-files  –type=service</li>\n<li>列出失败的服务<br>systemctl –failed –type=servicesy</li>\n<li>列出依赖的单元<br>systemctl list-dependencies sshd</li>\n<li>验证sshd服务是否开机启动<br>systemctl is-enabled sshd</li>\n<li>禁用network，使之不能自动启动,但手动可以<br>systemctl disable network</li>\n<li>启用network<br>systemctl enable  network</li>\n<li>禁用network，使之不能手动或自动启动<br>systemctl mask network</li>\n<li>启用network<br>systemctl unmask network</li>\n</ul>\n<h3 id=\"systemd-analyze\"><a href=\"#systemd-analyze\" class=\"headerlink\" title=\"systemd-analyze\"></a>systemd-analyze</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看启动耗时</span></span><br><span class=\"line\">$ systemd-analyze                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每个服务的启动耗时</span></span><br><span class=\"line\">$ systemd-analyze blame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示瀑布状的启动过程流</span></span><br><span class=\"line\">$ systemd-analyze critical-chain</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># 显示指定服务的启动流</span></span><br><span class=\"line\">$ systemd-analyze critical-chain atd.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"hostnamectl查看当前主机的信息。\"><a href=\"#hostnamectl查看当前主机的信息。\" class=\"headerlink\" title=\"hostnamectl查看当前主机的信息。\"></a>hostnamectl查看当前主机的信息。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前主机的信息</span></span><br><span class=\"line\">$ hostnamectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置主机名。</span></span><br><span class=\"line\">$ hostnamectl <span class=\"built_in\">set</span>-hostname rhel7</span><br></pre></td></tr></table></figure>\n<h3 id=\"localectl查看本地化设置。\"><a href=\"#localectl查看本地化设置。\" class=\"headerlink\" title=\"localectl查看本地化设置。\"></a>localectl查看本地化设置。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地化设置</span></span><br><span class=\"line\">$ localectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置本地化参数。</span></span><br><span class=\"line\">$ localectl <span class=\"built_in\">set</span>-locale LANG=en_GB.utf8</span><br><span class=\"line\">$ localectl <span class=\"built_in\">set</span>-keymap en_GB  </span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"comment\">### timedatectl查看当前时区设置。</span></span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"comment\"># 查看当前时区设置</span></span><br><span class=\"line\">$ timedatectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有可用的时区</span></span><br><span class=\"line\">$ timedatectl list-timezones                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前时区</span></span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-timezone America/New_York</span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-time YYYY-MM-DD</span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-time HH:MM:SS</span><br></pre></td></tr></table></figure>\n<h3 id=\"loginctl查看当前登录的用户。\"><a href=\"#loginctl查看当前登录的用户。\" class=\"headerlink\" title=\"loginctl查看当前登录的用户。\"></a>loginctl查看当前登录的用户。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前session</span></span><br><span class=\"line\">$ loginctl list-sessions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前登录用户</span></span><br><span class=\"line\">$ loginctl list-users</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出显示指定用户的信息</span></span><br><span class=\"line\">$ loginctl show-user ruanyf</span><br></pre></td></tr></table></figure>\n<h3 id=\"service-unit文件格式\"><a href=\"#service-unit文件格式\" class=\"headerlink\" title=\"service unit文件格式\"></a>service unit文件格式</h3><ul>\n<li>/etc/systemd/system：系统管理员和用户使用<br>/usr/lib/systemd/system：发行版打包者使用</li>\n<li>以“#” 开头的行后面的内容会被认为是注释</li>\n<li>相关布尔值，1、yes、on、true 都是开启，0、no、off、false 都是关闭</li>\n<li>时间单位默认是秒，所以要用毫秒（ms）分钟（m）等须显式说明</li>\n<li>service unit file文件通常由三部分组成：<br>[Unit]：定义与Unit类型无关的通用选项；用于提供unit的描述信息、unit行为及依赖关系等<br>[Service]：与特定类型相关的专用选项；此处为Service类型<br>[Install]：定义由“systemctlenable”以及”systemctldisable“命令在实现服务启用或禁用时用到的一些选项</li>\n</ul>\n<h4 id=\"Unit-段的常用选项：\"><a href=\"#Unit-段的常用选项：\" class=\"headerlink\" title=\"[Unit]段的常用选项：\"></a>[Unit]段的常用选项：</h4><p> Description：描述信息<br> Documentation：文档地址<br> Requires：依赖到的其它units，强依赖，被依赖的units无法激活时，当前unit也无法激活<br> Wants：依赖到的其它units，弱依赖<br> Conflicts：定义units间的冲突关系<br> Condition…：当前 Unit 运行必须满足的条件，否则不会运行<br> Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败<br> After：定义unit的启动次序，表示当前unit应该晚于哪些unit启动，其功能与Before相反<br> BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行<br> Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</p>\n<blockquote>\n<p>从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如[Unit]。注意，配置文件的区块名和字段名，都是大小写敏感的。每个区块内部是一些等号连接的键值对;注意，键值对的等号两侧不能有空格.</p>\n</blockquote>\n<h4 id=\"Service-段的常用选项：\"><a href=\"#Service-段的常用选项：\" class=\"headerlink\" title=\"[Service]段的常用选项：\"></a>[Service]段的常用选项：</h4><p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p>\n<ul>\n<li>Type：定义影响ExecStart及相关参数的功能的unit进程启动类型<br>Type=simple：默认值，这个daemon主要由ExecStart接的指令串来启动，启动后常驻于内存中<br>Type=forking：由ExecStart启动的程序透过spawns延伸出其他子程序来作为此daemon的主要服务。原生父程序在启动结束后就会终止<br>Type=oneshot：与simple类似，不过这个程序在工作完毕后就结束了，不会常驻在内存中<br>Type=dbus：与simple类似，但这个daemon必须要在取得一个D-Bus的名称后，才会继续运作.因此通常也要同时设定BusNname= 才行<br>Type=notify：在启动完成后会发送一个通知消息。还需要配合NotifyAccess 来让Systemd 接收消息<br>Type=idle：与simple类似，要执行这个daemon必须要所有的工作都顺利执行完毕后才会执行。这类的daemon通常是开机到最后才执行即可的服务</li>\n</ul>\n<ul>\n<li>EnvironmentFile：环境配置文件</li>\n<li>ExecStart：指明启动unit要运行命令或脚本的绝对路径</li>\n<li>ExecStartPre：ExecStart前运行(启动当前服务之前执行的命令)</li>\n<li>ExecStartPost：ExecStart后运行(启动当前服务之后执行的命令)</li>\n<li>ExecStop：指明停止unit要运行的命令或脚本(停止当前服务时执行的命令)</li>\n<li>Restart：当设定Restart=1 时，则当次daemon服务意外终止后，会再次自动启动此服务(定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog)</li>\n<li>ExecReload：重启当前服务时执行的命令</li>\n<li>ExecStopPost：停止当其服务之后执行的命令</li>\n<li>RestartSec：自动重启当前服务间隔的秒数</li>\n<li>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</li>\n<li>Environment：指定环境变量</li>\n</ul>\n<h4 id=\"Install-段的常用选项：\"><a href=\"#Install-段的常用选项：\" class=\"headerlink\" title=\"[Install]段的常用选项：\"></a>[Install]段的常用选项：</h4><p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p>\n<ul>\n<li>Alias：别名，可使用systemctlcommand Alias.service</li>\n<li>RequiredBy：被哪些units所依赖，强依赖(它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中)</li>\n<li>WantedBy：被哪些units所依赖，弱依赖(它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中)</li>\n<li>Also：安装本服务的时候还要安装别的相关服务</li>\n</ul>\n<blockquote>\n<p>注意：对于新创建的unit文件，或者修改了的unit文件，要通知systemd重载此配置文件,而后可以选择重启systemctl daemon-reload<br>Unit 配置文件的完整字段清单，请参考<a href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n</blockquote>\n<h3 id=\"服务Unit文件示例：\"><a href=\"#服务Unit文件示例：\" class=\"headerlink\" title=\"服务Unit文件示例：\"></a>服务Unit文件示例：</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/bak.service </span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=backup  /etc</span><br><span class=\"line\">Requires=atd.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/bin/bash -c <span class=\"string\">\"echo /testdir/bak.sh|at now\"</span></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>systemctl daemon-reload</li>\n<li>systemctl start bak</li>\n<li>启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。</li>\n<li>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</li>\n<li>传统的init启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</li>\n</ul>\n<h3 id=\"运行级别\"><a href=\"#运行级别\" class=\"headerlink\" title=\"运行级别\"></a>运行级别</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> target units：</span><br><span class=\"line\">     unit配置文件：.target</span><br><span class=\"line\">     ls /usr/lib/systemd/system/*.target</span><br><span class=\"line\">     systemctl list-unit-files --<span class=\"built_in\">type</span> target  --all</span><br><span class=\"line\"> 运行级别：</span><br><span class=\"line\"> 0  ==&gt; runlevel0.target -&gt; poweroff.target</span><br><span class=\"line\"> 1  ==&gt; runlevel1.target -&gt; rescue.target</span><br><span class=\"line\"> 2  ==&gt; runlevel2.target -&gt; multi-user.target</span><br><span class=\"line\"> 3  ==&gt; runlevel3.target -&gt; multi-user.target</span><br><span class=\"line\"> 4  ==&gt; runlevel4.target -&gt; multi-user.target</span><br><span class=\"line\"> 5  ==&gt; runlevel5.target -&gt; graphical.target</span><br><span class=\"line\"> 6  ==&gt; runlevel6.target -&gt; reboot.target</span><br><span class=\"line\"> </span><br><span class=\"line\">（1）默认的 RunLevel（在/etc/inittab文件设置）现在被默认的 Target 取代，位置是/etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。</span><br><span class=\"line\"> </span><br><span class=\"line\">（2）启动脚本的位置，以前是/etc/init.d目录，符号链接到不同的 RunLevel 目录 （比如/etc/rc3.d、/etc/rc5.d等），现在则存放在/lib/systemd/system和/etc/systemd/system目录。</span><br><span class=\"line\"> </span><br><span class=\"line\">（3）配置文件的位置，以前init进程的配置文件是/etc/inittab，各种服务的配置文件存放在/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd目录，在/etc/systemd目录里面的修改可以覆盖原始设置。</span><br><span class=\"line\"> </span><br><span class=\"line\"> 查看依赖性：</span><br><span class=\"line\"> systemctl list-dependencies graphical.target</span><br><span class=\"line\"> </span><br><span class=\"line\"> 级别切换：</span><br><span class=\"line\"> initN ==&gt; systemctl isolate name.target</span><br><span class=\"line\"> systemctl isolate multi-user.target</span><br><span class=\"line\"> 注：只有/lib/systemd/system/*.target文件中AllowIsolate=yes 才能切换(修改文件需执行systemctl daemon-reload才能生效)</span><br><span class=\"line\"> </span><br><span class=\"line\"> 查看target：</span><br><span class=\"line\"> runlevel;   who -r</span><br><span class=\"line\"> systemctl list-units --<span class=\"built_in\">type</span> target</span><br><span class=\"line\"> </span><br><span class=\"line\"> 获取默认运行级别：</span><br><span class=\"line\"> /etc/inittab==&gt; systemctl get-default</span><br><span class=\"line\"> 修改默认级别：</span><br><span class=\"line\"> /etc/inittab==&gt; systemctl <span class=\"built_in\">set</span>-default name.target</span><br><span class=\"line\"> systemctl <span class=\"built_in\">set</span>-default multi-user.target</span><br><span class=\"line\"> ls –l /etc/systemd/system/default.target</span><br><span class=\"line\"> </span><br><span class=\"line\"> 其它命令</span><br><span class=\"line\"> 切换至紧急救援模式（单用户状态）：</span><br><span class=\"line\"> systemctl rescue </span><br><span class=\"line\"> 切换至emergency模式： </span><br><span class=\"line\"> systemctl emergency</span><br><span class=\"line\"> 其它常用命令：</span><br><span class=\"line\"> 传统命令init，poweroff，halt，reboot都成为systemctl的软链接</span><br><span class=\"line\"> 关机：systemctl halt、systemctl poweroff</span><br><span class=\"line\"> 重启：systemctl reboot</span><br><span class=\"line\"> 挂起：systemctl <span class=\"built_in\">suspend</span></span><br><span class=\"line\"> 休眠：systemctl hibernate</span><br><span class=\"line\"> 休眠并挂起：systemctl hybrid-sleep</span><br></pre></td></tr></table></figure>\n<p> Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用<code>journalctl</code>一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是<code>/etc/systemd/journald.conf</code></p>\n<h3 id=\"journalctl功能强大，用法非常多。\"><a href=\"#journalctl功能强大，用法非常多。\" class=\"headerlink\" title=\"journalctl功能强大，用法非常多。\"></a>journalctl功能强大，用法非常多。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class=\"line\">$ journalctl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核日志（不显示应用日志）</span></span><br><span class=\"line\">$ journalctl -k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统本次启动的日志</span></span><br><span class=\"line\">$ journalctl -b</span><br><span class=\"line\">$ journalctl -b -0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看上一次启动的日志（需更改设置）</span></span><br><span class=\"line\">$ journalctl -b -1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定时间的日志</span></span><br><span class=\"line\">$ journalctl --since=<span class=\"string\">\"2012-10-30 18:17:16\"</span></span><br><span class=\"line\">$ journalctl --since <span class=\"string\">\"20 min ago\"</span></span><br><span class=\"line\">$ journalctl --since yesterday</span><br><span class=\"line\">$ journalctl --since <span class=\"string\">\"2015-01-10\"</span> --until <span class=\"string\">\"2015-01-11 03:00\"</span></span><br><span class=\"line\">$ journalctl --since 09:00 --until <span class=\"string\">\"1 hour ago\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部的最新10行日志</span></span><br><span class=\"line\">$ journalctl -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部指定行数的日志</span></span><br><span class=\"line\">$ journalctl -n 20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示最新日志</span></span><br><span class=\"line\">$ journalctl -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定服务的日志</span></span><br><span class=\"line\">$ journalctl /usr/lib/systemd/systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程的日志</span></span><br><span class=\"line\">$ journalctl _PID=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个路径的脚本的日志</span></span><br><span class=\"line\">$ journalctl /usr/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定用户的日志</span></span><br><span class=\"line\">$ journalctl _UID=33 --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个 Unit 的日志</span></span><br><span class=\"line\">$ journalctl -u nginx.service</span><br><span class=\"line\">$ journalctl -u nginx.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class=\"line\">$ journalctl -u nginx.service -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并显示多个 Unit 的日志</span></span><br><span class=\"line\">$ journalctl -u nginx.service -u php-fpm.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class=\"line\"><span class=\"comment\"># 0: emerg</span></span><br><span class=\"line\"><span class=\"comment\"># 1: alert</span></span><br><span class=\"line\"><span class=\"comment\"># 2: crit</span></span><br><span class=\"line\"><span class=\"comment\"># 3: err</span></span><br><span class=\"line\"><span class=\"comment\"># 4: warning</span></span><br><span class=\"line\"><span class=\"comment\"># 5: notice</span></span><br><span class=\"line\"><span class=\"comment\"># 6: info</span></span><br><span class=\"line\"><span class=\"comment\"># 7: debug</span></span><br><span class=\"line\">$ journalctl -p err -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class=\"line\">$ journalctl --no-pager</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（单行）输出</span></span><br><span class=\"line\">$ journalctl -b -u nginx.service -o json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class=\"line\">$ journalctl -b -u nginx.serviceqq</span><br><span class=\"line\">-o json-pretty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示日志占据的硬盘空间</span></span><br><span class=\"line\">$ journalctl --disk-usage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件占据的最大空间</span></span><br><span class=\"line\">$ journalctl --vacuum-size=1G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件保存多久</span></span><br><span class=\"line\">$ journalctl --vacuum-time=1years</span><br></pre></td></tr></table></figure>","more":"<center><img src=\"http://zhangqifei.top/picture/ifeier/data/systemd.jpg\" width=\"500\" height=\"200\" alt=\"markdown\" align=\"center\"></center><br>Systemd 是 Linux 系统工具，用来启动<strong>守护进程</strong>，已成为大多数发行版的标准配置。<br><br>本文介绍它的基本用法，分为上下两篇。今天介绍它的主要命令，<strong>下一篇</strong>介绍如何用于实战。<br>历史上，Linux 的启动一直采用<code>init</code>进程。<br><br>下面的命令用来启动服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/apache2 start</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">$ service apache2 start</span><br></pre></td></tr></table></figure><br><br><strong>这种方法有两个缺点。</strong><br>1. 启动时间长。init进程是串行启动，只有前一个进程启动完，才会启动下一个进程。<br>2. 启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。<br><br>Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。<br><br>根据 Linux 惯例，字母d是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。<br><br><br><center><img src=\"http://zhangqifei.top/picture/ifeier/data/dystemdname.jpg\" width=\"500\" height=\"200\" alt=\"Systemdname\" align=\"center\"><br>（Systemd 作者 Lennart Poettering）</center>\n\n<p>使用了 Systemd，就不需要再用<code>init</code>了。Systemd 取代了<code>initd</code>，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl --version    //查看 Systemd 的版本。</span><br></pre></td></tr></table></figure></p>\n<p>Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反”keep simple, keep stupid”的<strong>Unix 哲学</strong></p>\n<p><center><img src=\"http://zhangqifei.top/picture/ifeier/data/systemd.png\" width=\"500\" height=\"200\" alt=\"Systemdname\" align=\"center\"><br>（Systemd 架构图）</center><br>Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。</p>\n<h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST --&gt; Boot Sequence --&gt; Bootloader --&gt; kernel + initramfs(initrd) --&gt; rootfs--&gt; /sbin/init</span><br><span class=\"line\">    init:CentOS 5: SysV init</span><br><span class=\"line\">    CentOS 6: Upstart</span><br><span class=\"line\">    CentOS 7: Systemd</span><br></pre></td></tr></table></figure>\n<p>Systemd：系统启动和服务器守护进程管理器，负责在系统启动或运行时，激活系统资源，服务器进程和其它进程</p>\n<p><strong>Systemd新特性：</strong></p>\n<ul>\n<li>系统引导时实现服务并行启动</li>\n<li>按需启动守护进程</li>\n<li>自动化的服务依赖关系管理</li>\n<li>同时采用socket式与D-Bus总线式激活服务</li>\n<li>系统状态快照</li>\n</ul>\n<p><strong>核心概念：</strong> unit表示不同类型的systemd对象，通过配置文件进行标识和配置；文件中主要包含了系统服务、监听socket、保存的系统快照以及其它与init相关的信息</p>\n<p><strong>配置文件：</strong></p>\n<ul>\n<li>/usr/lib/systemd/system:每个服务最主要的启动脚本设置,类似于之前的/etc/init.d/</li>\n<li>/run/systemd/system:系统执行过程中所产生的服务脚本,比上面目录优先运行</li>\n<li>/etc/systemd/system:管理员建立的执行脚本,类似于/etc/rc.d/rcN.d/Sxx类的功能,比上面目录优先运行</li>\n</ul>\n<h3 id=\"Unit类型\"><a href=\"#Unit类型\" class=\"headerlink\" title=\"Unit类型\"></a>Unit类型</h3><ol>\n<li>Systemctl –t help 查看unit类型</li>\n<li>Service unit: 文件扩展名为.service, 用于定义系统服务</li>\n<li>Target unit: 文件扩展名为.target，用于模拟实现运行级别</li>\n<li>Device unit: .device, 用于定义内核识别的设备</li>\n<li>Mount unit: .mount, 定义文件系统挂载点</li>\n<li>Socket unit: .socket,用于标识进程间通信用的socket文件，也可在系统启动时，延迟启动服务，实现按需启动</li>\n<li>Scope Unit：不是由 Systemd 启动的外部进程</li>\n<li>Slice Unit：进程组</li>\n<li>Snapshot unit: .snapshot, 管理系统快照</li>\n<li>Swap unit: .swap, 用于标识swap设备</li>\n<li>Automount unit: .automount，文件系统的自动挂载点</li>\n<li>Path unit: .path，用于定义文件系统中的一个文件或目录使用,常用于当文件系统变化时，延迟激活服务，如：spool 目录</li>\n</ol>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>关键特性：</p>\n<ul>\n<li>基于socket的激活机制：socket与服务程序分离</li>\n<li>基于d-bus的激活机制：</li>\n<li>基于device的激活机制：</li>\n<li>基于path的激活机制：</li>\n<li>系统快照：保存各unit的当前状态信息于持久存储设备中向后兼容sysvinit脚本</li>\n</ul>\n<p>不兼容：</p>\n<ul>\n<li>systemctl命令固定不变，不可扩展</li>\n<li>非由systemd启动的服务，systemctl无法与之通信和控制</li>\n</ul>\n<h3 id=\"管理服务\"><a href=\"#管理服务\" class=\"headerlink\" title=\"管理服务\"></a>管理服务</h3><ul>\n<li>管理系统服务：CentOS 7: service unit</li>\n</ul>\n<blockquote>\n<p>注意：能兼容早期的服务脚本<br> 命令：systemctl COMMAND name.service</p>\n</blockquote>\n<ul>\n<li>启动：service name start ==&gt; systemctl start name.service</li>\n<li>停止：service name stop ==&gt; systemctl stop name.service</li>\n<li>重启：service name restart ==&gt; systemctl restart name.service</li>\n<li>状态：service name status ==&gt; systemctl status name.service</li>\n<li>条件式重启：已启动才重启，否则不做操作<br> service name condrestart ==&gt; systemctl try-restart name.service</li>\n<li>重载或重启服务：先加载，再启动<br> systemctl reload-or-restart name.service</li>\n<li>重载或条件式重启服务：<br> systemctl reload-or-try-restart name.service</li>\n<li>禁止自动和手动启动：<br> systemctl mask name.service</li>\n<li>取消禁止：<br> systemctl unmask name.service</li>\n</ul>\n<h3 id=\"服务查看\"><a href=\"#服务查看\" class=\"headerlink\" title=\"服务查看\"></a>服务查看</h3><ul>\n<li>查看某服务当前激活与否的状态：<br>systemctl is-active name.service</li>\n<li>查看所有已经激活的服务：<br>systemctl list-units –type|-t service </li>\n<li>查看所有服务：<br>systemctl list-units –type service –all|-a</li>\n</ul>\n<p><strong>chkconfig命令的对应关系：</strong></p>\n<ul>\n<li>设定某服务开机自启：<br>chkconfig name on ==&gt; systemctl enable name.service</li>\n<li>设定某服务开机禁止启动：<br>chkconfig name off ==&gt; systemctl disable name.service</li>\n<li>查看所有服务的开机自启状态：<br>chkconfig –list ==&gt; systemctl list-unit-files –type service </li>\n<li>用来列出该服务在哪些运行级别下启用和禁用<br>chkconfig sshd–list ==&gt;ls /etc/systemd/system/*.wants/sshd.service</li>\n<li>查看服务是否开机自启：<br>systemctl is-enabled name.service</li>\n<li>其它命令：查看服务的依赖关系：<br>systemctl list-dependencies name.service</li>\n<li>杀掉进程：<br>systemctl kill unitname</li>\n</ul>\n<h3 id=\"服务状态\"><a href=\"#服务状态\" class=\"headerlink\" title=\"服务状态\"></a>服务状态</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl list-unit-files --<span class=\"built_in\">type</span> service --all显示状态</span><br><span class=\"line\">    loaded:Unit:配置文件已处理</span><br><span class=\"line\">    active(running):一次或多次持续处理的运行</span><br><span class=\"line\">    active(exited):成功完成一次性的配置</span><br><span class=\"line\">    active(waiting):运行中，等待一个事件</span><br><span class=\"line\">    inactive:不运行</span><br><span class=\"line\">    enabled:开机启动</span><br><span class=\"line\">    disabled:开机不启动</span><br><span class=\"line\">    static:开机不启动，但可被另一个启用的服务激活</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令。</p>\n</blockquote>\n<blockquote>\n<p>一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。</p>\n</blockquote>\n<h3 id=\"systemctl-命令示例\"><a href=\"#systemctl-命令示例\" class=\"headerlink\" title=\"systemctl 命令示例\"></a>systemctl 命令示例</h3><ul>\n<li>显示所有单元状态<br>systemctl或systemctl list-units</li>\n<li>只显示服务单元的状态<br>systemctl –type=service ==&gt;systemctl -t=service</li>\n<li>显示sshd服务单元<br>systemctl –l status sshd.service</li>\n<li>验证sshd服务当前是否活动<br>systemctl is-active sshd</li>\n<li>启动，停止和重启sshd服务<br>systemctl start sshd.service<br>systemctl stop sshd.service<br>systemctl restart sshd.service</li>\n<li>重新加载配置<br>systemctl reload sshd.service</li>\n<li>列出活动状态的所有服务单元<br>systemctl list-units –type=service</li>\n<li>列出所有服务单元<br>systemctl list-units –type=service –all</li>\n<li>查看服务单元的启用和禁用状态<br>systemctl list-unit-files  –type=service</li>\n<li>列出失败的服务<br>systemctl –failed –type=servicesy</li>\n<li>列出依赖的单元<br>systemctl list-dependencies sshd</li>\n<li>验证sshd服务是否开机启动<br>systemctl is-enabled sshd</li>\n<li>禁用network，使之不能自动启动,但手动可以<br>systemctl disable network</li>\n<li>启用network<br>systemctl enable  network</li>\n<li>禁用network，使之不能手动或自动启动<br>systemctl mask network</li>\n<li>启用network<br>systemctl unmask network</li>\n</ul>\n<h3 id=\"systemd-analyze\"><a href=\"#systemd-analyze\" class=\"headerlink\" title=\"systemd-analyze\"></a>systemd-analyze</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看启动耗时</span></span><br><span class=\"line\">$ systemd-analyze                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看每个服务的启动耗时</span></span><br><span class=\"line\">$ systemd-analyze blame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示瀑布状的启动过程流</span></span><br><span class=\"line\">$ systemd-analyze critical-chain</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\"># 显示指定服务的启动流</span></span><br><span class=\"line\">$ systemd-analyze critical-chain atd.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"hostnamectl查看当前主机的信息。\"><a href=\"#hostnamectl查看当前主机的信息。\" class=\"headerlink\" title=\"hostnamectl查看当前主机的信息。\"></a>hostnamectl查看当前主机的信息。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前主机的信息</span></span><br><span class=\"line\">$ hostnamectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置主机名。</span></span><br><span class=\"line\">$ hostnamectl <span class=\"built_in\">set</span>-hostname rhel7</span><br></pre></td></tr></table></figure>\n<h3 id=\"localectl查看本地化设置。\"><a href=\"#localectl查看本地化设置。\" class=\"headerlink\" title=\"localectl查看本地化设置。\"></a>localectl查看本地化设置。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地化设置</span></span><br><span class=\"line\">$ localectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置本地化参数。</span></span><br><span class=\"line\">$ localectl <span class=\"built_in\">set</span>-locale LANG=en_GB.utf8</span><br><span class=\"line\">$ localectl <span class=\"built_in\">set</span>-keymap en_GB  </span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"comment\">### timedatectl查看当前时区设置。</span></span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"comment\"># 查看当前时区设置</span></span><br><span class=\"line\">$ timedatectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有可用的时区</span></span><br><span class=\"line\">$ timedatectl list-timezones                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前时区</span></span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-timezone America/New_York</span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-time YYYY-MM-DD</span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-time HH:MM:SS</span><br></pre></td></tr></table></figure>\n<h3 id=\"loginctl查看当前登录的用户。\"><a href=\"#loginctl查看当前登录的用户。\" class=\"headerlink\" title=\"loginctl查看当前登录的用户。\"></a>loginctl查看当前登录的用户。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前session</span></span><br><span class=\"line\">$ loginctl list-sessions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前登录用户</span></span><br><span class=\"line\">$ loginctl list-users</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出显示指定用户的信息</span></span><br><span class=\"line\">$ loginctl show-user ruanyf</span><br></pre></td></tr></table></figure>\n<h3 id=\"service-unit文件格式\"><a href=\"#service-unit文件格式\" class=\"headerlink\" title=\"service unit文件格式\"></a>service unit文件格式</h3><ul>\n<li>/etc/systemd/system：系统管理员和用户使用<br>/usr/lib/systemd/system：发行版打包者使用</li>\n<li>以“#” 开头的行后面的内容会被认为是注释</li>\n<li>相关布尔值，1、yes、on、true 都是开启，0、no、off、false 都是关闭</li>\n<li>时间单位默认是秒，所以要用毫秒（ms）分钟（m）等须显式说明</li>\n<li>service unit file文件通常由三部分组成：<br>[Unit]：定义与Unit类型无关的通用选项；用于提供unit的描述信息、unit行为及依赖关系等<br>[Service]：与特定类型相关的专用选项；此处为Service类型<br>[Install]：定义由“systemctlenable”以及”systemctldisable“命令在实现服务启用或禁用时用到的一些选项</li>\n</ul>\n<h4 id=\"Unit-段的常用选项：\"><a href=\"#Unit-段的常用选项：\" class=\"headerlink\" title=\"[Unit]段的常用选项：\"></a>[Unit]段的常用选项：</h4><p> Description：描述信息<br> Documentation：文档地址<br> Requires：依赖到的其它units，强依赖，被依赖的units无法激活时，当前unit也无法激活<br> Wants：依赖到的其它units，弱依赖<br> Conflicts：定义units间的冲突关系<br> Condition…：当前 Unit 运行必须满足的条件，否则不会运行<br> Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败<br> After：定义unit的启动次序，表示当前unit应该晚于哪些unit启动，其功能与Before相反<br> BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行<br> Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</p>\n<blockquote>\n<p>从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如[Unit]。注意，配置文件的区块名和字段名，都是大小写敏感的。每个区块内部是一些等号连接的键值对;注意，键值对的等号两侧不能有空格.</p>\n</blockquote>\n<h4 id=\"Service-段的常用选项：\"><a href=\"#Service-段的常用选项：\" class=\"headerlink\" title=\"[Service]段的常用选项：\"></a>[Service]段的常用选项：</h4><p>[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p>\n<ul>\n<li>Type：定义影响ExecStart及相关参数的功能的unit进程启动类型<br>Type=simple：默认值，这个daemon主要由ExecStart接的指令串来启动，启动后常驻于内存中<br>Type=forking：由ExecStart启动的程序透过spawns延伸出其他子程序来作为此daemon的主要服务。原生父程序在启动结束后就会终止<br>Type=oneshot：与simple类似，不过这个程序在工作完毕后就结束了，不会常驻在内存中<br>Type=dbus：与simple类似，但这个daemon必须要在取得一个D-Bus的名称后，才会继续运作.因此通常也要同时设定BusNname= 才行<br>Type=notify：在启动完成后会发送一个通知消息。还需要配合NotifyAccess 来让Systemd 接收消息<br>Type=idle：与simple类似，要执行这个daemon必须要所有的工作都顺利执行完毕后才会执行。这类的daemon通常是开机到最后才执行即可的服务</li>\n</ul>\n<ul>\n<li>EnvironmentFile：环境配置文件</li>\n<li>ExecStart：指明启动unit要运行命令或脚本的绝对路径</li>\n<li>ExecStartPre：ExecStart前运行(启动当前服务之前执行的命令)</li>\n<li>ExecStartPost：ExecStart后运行(启动当前服务之后执行的命令)</li>\n<li>ExecStop：指明停止unit要运行的命令或脚本(停止当前服务时执行的命令)</li>\n<li>Restart：当设定Restart=1 时，则当次daemon服务意外终止后，会再次自动启动此服务(定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog)</li>\n<li>ExecReload：重启当前服务时执行的命令</li>\n<li>ExecStopPost：停止当其服务之后执行的命令</li>\n<li>RestartSec：自动重启当前服务间隔的秒数</li>\n<li>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</li>\n<li>Environment：指定环境变量</li>\n</ul>\n<h4 id=\"Install-段的常用选项：\"><a href=\"#Install-段的常用选项：\" class=\"headerlink\" title=\"[Install]段的常用选项：\"></a>[Install]段的常用选项：</h4><p>[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p>\n<ul>\n<li>Alias：别名，可使用systemctlcommand Alias.service</li>\n<li>RequiredBy：被哪些units所依赖，强依赖(它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中)</li>\n<li>WantedBy：被哪些units所依赖，弱依赖(它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中)</li>\n<li>Also：安装本服务的时候还要安装别的相关服务</li>\n</ul>\n<blockquote>\n<p>注意：对于新创建的unit文件，或者修改了的unit文件，要通知systemd重载此配置文件,而后可以选择重启systemctl daemon-reload<br>Unit 配置文件的完整字段清单，请参考<a href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n</blockquote>\n<h3 id=\"服务Unit文件示例：\"><a href=\"#服务Unit文件示例：\" class=\"headerlink\" title=\"服务Unit文件示例：\"></a>服务Unit文件示例：</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/bak.service </span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=backup  /etc</span><br><span class=\"line\">Requires=atd.service</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/bin/bash -c <span class=\"string\">\"echo /testdir/bak.sh|at now\"</span></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<ul>\n<li>systemctl daemon-reload</li>\n<li>systemctl start bak</li>\n<li>启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。</li>\n<li>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</li>\n<li>传统的init启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</li>\n</ul>\n<h3 id=\"运行级别\"><a href=\"#运行级别\" class=\"headerlink\" title=\"运行级别\"></a>运行级别</h3> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> target units：</span><br><span class=\"line\">     unit配置文件：.target</span><br><span class=\"line\">     ls /usr/lib/systemd/system/*.target</span><br><span class=\"line\">     systemctl list-unit-files --<span class=\"built_in\">type</span> target  --all</span><br><span class=\"line\"> 运行级别：</span><br><span class=\"line\"> 0  ==&gt; runlevel0.target -&gt; poweroff.target</span><br><span class=\"line\"> 1  ==&gt; runlevel1.target -&gt; rescue.target</span><br><span class=\"line\"> 2  ==&gt; runlevel2.target -&gt; multi-user.target</span><br><span class=\"line\"> 3  ==&gt; runlevel3.target -&gt; multi-user.target</span><br><span class=\"line\"> 4  ==&gt; runlevel4.target -&gt; multi-user.target</span><br><span class=\"line\"> 5  ==&gt; runlevel5.target -&gt; graphical.target</span><br><span class=\"line\"> 6  ==&gt; runlevel6.target -&gt; reboot.target</span><br><span class=\"line\"> </span><br><span class=\"line\">（1）默认的 RunLevel（在/etc/inittab文件设置）现在被默认的 Target 取代，位置是/etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。</span><br><span class=\"line\"> </span><br><span class=\"line\">（2）启动脚本的位置，以前是/etc/init.d目录，符号链接到不同的 RunLevel 目录 （比如/etc/rc3.d、/etc/rc5.d等），现在则存放在/lib/systemd/system和/etc/systemd/system目录。</span><br><span class=\"line\"> </span><br><span class=\"line\">（3）配置文件的位置，以前init进程的配置文件是/etc/inittab，各种服务的配置文件存放在/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd目录，在/etc/systemd目录里面的修改可以覆盖原始设置。</span><br><span class=\"line\"> </span><br><span class=\"line\"> 查看依赖性：</span><br><span class=\"line\"> systemctl list-dependencies graphical.target</span><br><span class=\"line\"> </span><br><span class=\"line\"> 级别切换：</span><br><span class=\"line\"> initN ==&gt; systemctl isolate name.target</span><br><span class=\"line\"> systemctl isolate multi-user.target</span><br><span class=\"line\"> 注：只有/lib/systemd/system/*.target文件中AllowIsolate=yes 才能切换(修改文件需执行systemctl daemon-reload才能生效)</span><br><span class=\"line\"> </span><br><span class=\"line\"> 查看target：</span><br><span class=\"line\"> runlevel;   who -r</span><br><span class=\"line\"> systemctl list-units --<span class=\"built_in\">type</span> target</span><br><span class=\"line\"> </span><br><span class=\"line\"> 获取默认运行级别：</span><br><span class=\"line\"> /etc/inittab==&gt; systemctl get-default</span><br><span class=\"line\"> 修改默认级别：</span><br><span class=\"line\"> /etc/inittab==&gt; systemctl <span class=\"built_in\">set</span>-default name.target</span><br><span class=\"line\"> systemctl <span class=\"built_in\">set</span>-default multi-user.target</span><br><span class=\"line\"> ls –l /etc/systemd/system/default.target</span><br><span class=\"line\"> </span><br><span class=\"line\"> 其它命令</span><br><span class=\"line\"> 切换至紧急救援模式（单用户状态）：</span><br><span class=\"line\"> systemctl rescue </span><br><span class=\"line\"> 切换至emergency模式： </span><br><span class=\"line\"> systemctl emergency</span><br><span class=\"line\"> 其它常用命令：</span><br><span class=\"line\"> 传统命令init，poweroff，halt，reboot都成为systemctl的软链接</span><br><span class=\"line\"> 关机：systemctl halt、systemctl poweroff</span><br><span class=\"line\"> 重启：systemctl reboot</span><br><span class=\"line\"> 挂起：systemctl <span class=\"built_in\">suspend</span></span><br><span class=\"line\"> 休眠：systemctl hibernate</span><br><span class=\"line\"> 休眠并挂起：systemctl hybrid-sleep</span><br></pre></td></tr></table></figure>\n<p> Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用<code>journalctl</code>一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是<code>/etc/systemd/journald.conf</code></p>\n<h3 id=\"journalctl功能强大，用法非常多。\"><a href=\"#journalctl功能强大，用法非常多。\" class=\"headerlink\" title=\"journalctl功能强大，用法非常多。\"></a>journalctl功能强大，用法非常多。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有日志（默认情况下 ，只保存本次启动的日志）</span></span><br><span class=\"line\">$ journalctl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核日志（不显示应用日志）</span></span><br><span class=\"line\">$ journalctl -k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统本次启动的日志</span></span><br><span class=\"line\">$ journalctl -b</span><br><span class=\"line\">$ journalctl -b -0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看上一次启动的日志（需更改设置）</span></span><br><span class=\"line\">$ journalctl -b -1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定时间的日志</span></span><br><span class=\"line\">$ journalctl --since=<span class=\"string\">\"2012-10-30 18:17:16\"</span></span><br><span class=\"line\">$ journalctl --since <span class=\"string\">\"20 min ago\"</span></span><br><span class=\"line\">$ journalctl --since yesterday</span><br><span class=\"line\">$ journalctl --since <span class=\"string\">\"2015-01-10\"</span> --until <span class=\"string\">\"2015-01-11 03:00\"</span></span><br><span class=\"line\">$ journalctl --since 09:00 --until <span class=\"string\">\"1 hour ago\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部的最新10行日志</span></span><br><span class=\"line\">$ journalctl -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示尾部指定行数的日志</span></span><br><span class=\"line\">$ journalctl -n 20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示最新日志</span></span><br><span class=\"line\">$ journalctl -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定服务的日志</span></span><br><span class=\"line\">$ journalctl /usr/lib/systemd/systemd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定进程的日志</span></span><br><span class=\"line\">$ journalctl _PID=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个路径的脚本的日志</span></span><br><span class=\"line\">$ journalctl /usr/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定用户的日志</span></span><br><span class=\"line\">$ journalctl _UID=33 --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看某个 Unit 的日志</span></span><br><span class=\"line\">$ journalctl -u nginx.service</span><br><span class=\"line\">$ journalctl -u nginx.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时滚动显示某个 Unit 的最新日志</span></span><br><span class=\"line\">$ journalctl -u nginx.service -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并显示多个 Unit 的日志</span></span><br><span class=\"line\">$ journalctl -u nginx.service -u php-fpm.service --since today</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class=\"line\"><span class=\"comment\"># 0: emerg</span></span><br><span class=\"line\"><span class=\"comment\"># 1: alert</span></span><br><span class=\"line\"><span class=\"comment\"># 2: crit</span></span><br><span class=\"line\"><span class=\"comment\"># 3: err</span></span><br><span class=\"line\"><span class=\"comment\"># 4: warning</span></span><br><span class=\"line\"><span class=\"comment\"># 5: notice</span></span><br><span class=\"line\"><span class=\"comment\"># 6: info</span></span><br><span class=\"line\"><span class=\"comment\"># 7: debug</span></span><br><span class=\"line\">$ journalctl -p err -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志默认分页输出，--no-pager 改为正常的标准输出</span></span><br><span class=\"line\">$ journalctl --no-pager</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（单行）输出</span></span><br><span class=\"line\">$ journalctl -b -u nginx.service -o json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式（多行）输出，可读性更好</span></span><br><span class=\"line\">$ journalctl -b -u nginx.serviceqq</span><br><span class=\"line\">-o json-pretty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示日志占据的硬盘空间</span></span><br><span class=\"line\">$ journalctl --disk-usage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件占据的最大空间</span></span><br><span class=\"line\">$ journalctl --vacuum-size=1G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志文件保存多久</span></span><br><span class=\"line\">$ journalctl --vacuum-time=1years</span><br></pre></td></tr></table></figure>","categories":[{"name":"centos","path":"api/categories/centos.json"}],"tags":[{"name":"centos7","path":"api/tags/centos7.json"}]}