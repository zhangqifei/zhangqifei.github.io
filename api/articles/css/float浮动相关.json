{"title":"float浮动相关","slug":"css/float浮动相关","date":"2017-01-06T17:50:32.000Z","updated":"2019-05-22T05:47:15.359Z","comments":true,"path":"api/articles/css/float浮动相关.json","excerpt":null,"covers":null,"content":"<h1 id=\"float特性\"><a href=\"#float特性\" class=\"headerlink\" title=\"float特性\"></a>float特性</h1><p><strong>float的设计初衷，是为了实现文字环绕图片的图文混排效果</strong> ，图片元素浮动后，文本内容会环绕在其周围。</p>\n<blockquote>\n<p>浮动的框可以向左或向右移动，直到它的<strong>外边缘碰到包含框或另一个浮动框的边框</strong>为止。</p>\n</blockquote>\n<p>##脱离正常流</p>\n<p>元素设置浮动后（float不为none），该元素会<strong>脱离正常流（normal flow，或称为普通流/标准流）</strong> ，让出原本在正常流中占据的位置。</p>\n<h3 id=\"文本内容环绕浮动元素\"><a href=\"#文本内容环绕浮动元素\" class=\"headerlink\" title=\"文本内容环绕浮动元素\"></a>文本内容环绕浮动元素</h3><p>即float最初设计需要实现的效果。</p>\n<p>浮动元素让出了空间，文本内容向上方浮动元素原有位置方向附近移动，但是<a href=\"#某些元素不会进入浮动元素原有位置\">文本内容又不会进入浮动元素原有位置</a>，文本就只能移动到浮动元素周围位置（看起来就像浮动元素还“部分存在流中”一样）。</p>\n<h4 id=\"清除inline-block之间的空白\"><a href=\"#清除inline-block之间的空白\" class=\"headerlink\" title=\"清除inline-block之间的空白\"></a>清除inline-block之间的空白</h4><p>利用浮动元素的文本环绕效果可以消除nline-block之间的空白。</p>\n<p>空白产生原因：HTML代码中，<strong>相邻的两个inline-block元素代码之间使用了换行符</strong>后（即在不同的代码行），换行符会被浏览器绘制为空格（不同浏览器效果可能不一致）。示例，以下内容会显示两排按钮，第一排的两个按钮之间会有空白区域，而第二排的两个按钮则是紧连的。：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将相邻的不同行inline-block元素浮动后，空白内容（换行符）就“环绕”到浮动元素的后面去了，两个元素之间的空白区域也就没有了。</p>\n<h3 id=\"未设置高度的父元素“塌陷”\"><a href=\"#未设置高度的父元素“塌陷”\" class=\"headerlink\" title=\"未设置高度的父元素“塌陷”\"></a>未设置高度的父元素“塌陷”</h3><p>元素浮动脱离正常流 –&gt;  该元素离开父元素内部  –&gt; 该元素原本占据的位置空出 –&gt; 该元素不再撑开父元素  –&gt; 父元素高度塌陷</p>\n<p>当然：</p>\n<ul>\n<li>如父元素中还有其他内容撑开高度，继续保留其他内容撑开的高度，只是由浮动元素撑开的高度不再有效。</li>\n<li>如父元素设置有高度，则其高度也与该子元素是否浮动无关了。</li>\n</ul>\n<h3 id=\"某些元素不会进入浮动元素原有位置\"><a href=\"#某些元素不会进入浮动元素原有位置\" class=\"headerlink\" title=\"某些元素不会进入浮动元素原有位置\"></a>某些元素不会进入浮动元素原有位置</h3><blockquote>\n<p>css元素3定位机制：正常流、浮动和绝对定位</p>\n</blockquote>\n<p><strong>元素脱离正常流让出原有位置后，其后面的元素也不一定能进入浮动元素的原有位置</strong>，这与postion:absolute/fixed（简称绝对定位）元素脱离正常流让出的原有位置的被占用情况有所不同：</p>\n<ul>\n<li><p><strong>绝对定位元素影响所有类型的元素</strong>——绝对元素后面的任何类型的元素都会进入绝对定位元素让出的位置</p>\n</li>\n<li><p>浮动元素后面的元素是否进入浮动元素原有位置分为以下情况：</p>\n<ul>\n<li><p>不进入浮动元素让出位置的元素类型（<strong>即使给以下类型元素设置display:block属性依然如此</strong>）：</p>\n<ul>\n<li><strong>inline</strong></li>\n<li><strong>inline-block</strong></li>\n<li>各种table（如<strong>table</strong>、<strong>table-cell</strong>、<strong>table-caption</strong>等）</li>\n</ul>\n<p>当然浮动元素后面的文本内容也不会进入的浮动元素原有位置，绝对定位后面的文本内容会进入绝对定位元素原有位置。</p>\n<p>inline元素和文本内容不会进入浮动元素原有位置应该是为符合float的设计目的——图文环绕效果，而inline-block类和table类元素不能进入float让出区域应该和<a href=\"#BFC特性\">BFC特性</a>相关。</p>\n</li>\n<li><p>进入浮动元素让出位置的元素类型（给这些类型元素设置dislplay：inline-block等属性，浮动元素会继续占有位置）：</p>\n<ul>\n<li><strong>block</strong></li>\n<li><strong>run-in</strong></li>\n<li><strong>list-item</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元素行内-块级化（inline-block）\"><a href=\"#元素行内-块级化（inline-block）\" class=\"headerlink\" title=\"元素行内-块级化（inline-block）\"></a>元素行内-块级化（inline-block）</h2><p><strong>浮动元素inline-block化</strong>：</p>\n<ul>\n<li>原先没有设置宽度的块级（block）元素的宽度会收缩至自适应内部元素的宽度（inline的特性）</li>\n<li>原先不能设置宽高（当然还有上下margin/padding值）的行内（inline）元素可以设置宽高（block的特性）</li>\n</ul>\n<p>注意：行内元素设置上下margin/padding值从显示效果来看是有变化的，但其实设置的是无效的，<strong>并不会对他周围的元素产生任何影响</strong>。</p>\n<h1 id=\"消除浮动的负面影响\"><a href=\"#消除浮动的负面影响\" class=\"headerlink\" title=\"消除浮动的负面影响\"></a>消除浮动的负面影响</h1><p>为消除float带来的布局问题——主要是<strong>未设置高度的父元素高度塌陷问题</strong>，需要使用一些方法来消除浮动动带来的负面影响。</p>\n<p>解决方法主要可分为两类：</p>\n<ul>\n<li>使用clear属性清除浮动</li>\n<li>利用<a href=\"#BFC（flow root）\">BFC原理</a>闭合浮动</li>\n</ul>\n<hr>\n<ul>\n<li><p>::after 伪元素+clear</p>\n<ul>\n<li><p><a href=\"http://www.positioniseverything.net/easyclearing.html\" target=\"_blank\" rel=\"noopener\">How To Clear Floats Without Structural Markup</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\".\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123; *zoom:1; &#125;  /** for IE **/</span><br></pre></td></tr></table></figure>\n<p>更推荐以下简单容易记方案：</p>\n</li>\n<li><p>使用“零宽度空格”字符<a href=\"http://www.fileformat.info/info/unicode/char/200b/index.htm\" target=\"_blank\" rel=\"noopener\">U+200B </a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"200B\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123; *zoom:1; &#125;/* For IE 6/7 (trigger hasLayout) */</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空content以及display:table+伪元素清除浮动</p>\n<p>来自Nicolas Gallagher – <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\" target=\"_blank\" rel=\"noopener\">A new micro clearfix hack</a> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">::before</span>,<span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">::after</span> &#123; </span><br><span class=\"line\">     <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cf</span> &#123; <span class=\"attribute\">zoom</span>:<span class=\"number\">1</span>; &#125;<span class=\"comment\">/* For IE 6/7 (trigger hasLayout) */</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>父元素定义高度</p>\n<p>父元素拥有自己的高度，也就不存在高度塌陷的问题。只适合固定高度的情况，<strong>非固定高度的情况不要使用</strong>。</p>\n</li>\n</ul>\n<ul>\n<li><p>父元素overflow</p>\n<ul>\n<li><p><code>overflow：hidden</code></p>\n<p>必须定义宽度且不能定义高度，浏览器会自动检查浮动区域高度，不能和position配合使用，因为超出的尺寸会被隐藏，无法显示需要溢出的元素。<strong>谨慎使用</strong></p>\n</li>\n<li><p><code>overflow:auto</code></p>\n<p>必须定义宽度且不能定义高度，浏览器自动检查浮动区域的高度，内部宽高超过父元素高度时，会出现<strong>滚动条</strong>。<strong>谨慎使用</strong></p>\n</li>\n</ul>\n</li>\n<li><p>父元素也设置浮动</p>\n<p>与父元素相邻的元素的布局会受到影响，产生新的浮动问题。<strong>不要使用</strong></p>\n</li>\n<li><p>父元素设置<code>display:table</code></p>\n<p>更改了盒模型，可能带来更多麻烦。<strong>不要使用</strong></p>\n</li>\n<li><p>额外标签+clear属性</p>\n<p>浮动元素末尾添加一个空的标签，如在浮动元素之后添加一个<br>标签或者没有内容的<div></div>标签，为其增加<code>clear:both</code>。</p>\n<p>添加了无意义标签，不符合语义化原则，不利于维护。<strong>不要使用</strong></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"BFC（flow-root）\"><a href=\"#BFC（flow-root）\" class=\"headerlink\" title=\"BFC（flow root）\"></a>BFC（flow root）</h2><blockquote>\n<p>Formatting Context：指页面中一个渲染区域，并且拥有一套渲染规则，他决定了其子元素如何定位，以及与其他元素的相互关系和作用。</p>\n</blockquote>\n<p>BFC：Block formatting contexts，块级格式化上下文，规定块级（block）元素的渲染规则。BFC就是页面上的一个隔离的<strong>独立容器</strong>，<strong>容器里面的子元素不会影响到外面的元素</strong>，反之亦然；</p>\n<h3 id=\"BFC触发条件\"><a href=\"#BFC触发条件\" class=\"headerlink\" title=\"BFC触发条件\"></a>BFC触发条件</h3><ul>\n<li><p>页面的根元素</p>\n</li>\n<li><p>fieldset元素</p>\n</li>\n<li><p>float  除了none以外的值——<strong>浮动</strong></p>\n</li>\n<li><p>overflow  除了visible 以外的值（<code>overflow: hidden |auto | scroll</code> ）</p>\n</li>\n<li><p><code>position: absolute |fixed</code> ——<strong>绝对定位</strong></p>\n</li>\n<li><p><code>display : table-cell | table-caption |inline-block</code></p>\n<p><code>display:table</code> 本身并不会创建BFC，但是它会产生匿名框(anonymous boxes)，而匿名框中的<code>display:table-cell</code>可以创建新的BFC。</p>\n</li>\n</ul>\n<h3 id=\"BFC特性\"><a href=\"#BFC特性\" class=\"headerlink\" title=\"BFC特性\"></a>BFC特性</h3><ul>\n<li>同一BFC中上下相邻子元素上下外边距（margin）值叠加。</li>\n<li>同一BFC中每一个子元素的外边距和包含块的左边界相接触（对于从右到左的格式化则是右外边距和右边界相接触）——除非这个子元素也创建了一个新的BFC（比如浮动）。</li>\n<li>BFC会完全包含内部的浮动元素（闭合浮动）。</li>\n<li>BFC区域不会与浮动元素区域相重叠。</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li><p>JavaScript中设置元素对象style的float，不能直接使用float（这是JavaScript保留字），而必须使用cssFloat。</p>\n<p>示例：<code>element.style.cssFloat=&quot;left&quot;</code> 。</p>\n</li>\n</ul>\n","more":"<h1 id=\"float特性\"><a href=\"#float特性\" class=\"headerlink\" title=\"float特性\"></a>float特性</h1><p><strong>float的设计初衷，是为了实现文字环绕图片的图文混排效果</strong> ，图片元素浮动后，文本内容会环绕在其周围。</p>\n<blockquote>\n<p>浮动的框可以向左或向右移动，直到它的<strong>外边缘碰到包含框或另一个浮动框的边框</strong>为止。</p>\n</blockquote>\n<p>##脱离正常流</p>\n<p>元素设置浮动后（float不为none），该元素会<strong>脱离正常流（normal flow，或称为普通流/标准流）</strong> ，让出原本在正常流中占据的位置。</p>\n<h3 id=\"文本内容环绕浮动元素\"><a href=\"#文本内容环绕浮动元素\" class=\"headerlink\" title=\"文本内容环绕浮动元素\"></a>文本内容环绕浮动元素</h3><p>即float最初设计需要实现的效果。</p>\n<p>浮动元素让出了空间，文本内容向上方浮动元素原有位置方向附近移动，但是<a href=\"#某些元素不会进入浮动元素原有位置\">文本内容又不会进入浮动元素原有位置</a>，文本就只能移动到浮动元素周围位置（看起来就像浮动元素还“部分存在流中”一样）。</p>\n<h4 id=\"清除inline-block之间的空白\"><a href=\"#清除inline-block之间的空白\" class=\"headerlink\" title=\"清除inline-block之间的空白\"></a>清除inline-block之间的空白</h4><p>利用浮动元素的文本环绕效果可以消除nline-block之间的空白。</p>\n<p>空白产生原因：HTML代码中，<strong>相邻的两个inline-block元素代码之间使用了换行符</strong>后（即在不同的代码行），换行符会被浏览器绘制为空格（不同浏览器效果可能不一致）。示例，以下内容会显示两排按钮，第一排的两个按钮之间会有空白区域，而第二排的两个按钮则是紧连的。：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将相邻的不同行inline-block元素浮动后，空白内容（换行符）就“环绕”到浮动元素的后面去了，两个元素之间的空白区域也就没有了。</p>\n<h3 id=\"未设置高度的父元素“塌陷”\"><a href=\"#未设置高度的父元素“塌陷”\" class=\"headerlink\" title=\"未设置高度的父元素“塌陷”\"></a>未设置高度的父元素“塌陷”</h3><p>元素浮动脱离正常流 –&gt;  该元素离开父元素内部  –&gt; 该元素原本占据的位置空出 –&gt; 该元素不再撑开父元素  –&gt; 父元素高度塌陷</p>\n<p>当然：</p>\n<ul>\n<li>如父元素中还有其他内容撑开高度，继续保留其他内容撑开的高度，只是由浮动元素撑开的高度不再有效。</li>\n<li>如父元素设置有高度，则其高度也与该子元素是否浮动无关了。</li>\n</ul>\n<h3 id=\"某些元素不会进入浮动元素原有位置\"><a href=\"#某些元素不会进入浮动元素原有位置\" class=\"headerlink\" title=\"某些元素不会进入浮动元素原有位置\"></a>某些元素不会进入浮动元素原有位置</h3><blockquote>\n<p>css元素3定位机制：正常流、浮动和绝对定位</p>\n</blockquote>\n<p><strong>元素脱离正常流让出原有位置后，其后面的元素也不一定能进入浮动元素的原有位置</strong>，这与postion:absolute/fixed（简称绝对定位）元素脱离正常流让出的原有位置的被占用情况有所不同：</p>\n<ul>\n<li><p><strong>绝对定位元素影响所有类型的元素</strong>——绝对元素后面的任何类型的元素都会进入绝对定位元素让出的位置</p>\n</li>\n<li><p>浮动元素后面的元素是否进入浮动元素原有位置分为以下情况：</p>\n<ul>\n<li><p>不进入浮动元素让出位置的元素类型（<strong>即使给以下类型元素设置display:block属性依然如此</strong>）：</p>\n<ul>\n<li><strong>inline</strong></li>\n<li><strong>inline-block</strong></li>\n<li>各种table（如<strong>table</strong>、<strong>table-cell</strong>、<strong>table-caption</strong>等）</li>\n</ul>\n<p>当然浮动元素后面的文本内容也不会进入的浮动元素原有位置，绝对定位后面的文本内容会进入绝对定位元素原有位置。</p>\n<p>inline元素和文本内容不会进入浮动元素原有位置应该是为符合float的设计目的——图文环绕效果，而inline-block类和table类元素不能进入float让出区域应该和<a href=\"#BFC特性\">BFC特性</a>相关。</p>\n</li>\n<li><p>进入浮动元素让出位置的元素类型（给这些类型元素设置dislplay：inline-block等属性，浮动元素会继续占有位置）：</p>\n<ul>\n<li><strong>block</strong></li>\n<li><strong>run-in</strong></li>\n<li><strong>list-item</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元素行内-块级化（inline-block）\"><a href=\"#元素行内-块级化（inline-block）\" class=\"headerlink\" title=\"元素行内-块级化（inline-block）\"></a>元素行内-块级化（inline-block）</h2><p><strong>浮动元素inline-block化</strong>：</p>\n<ul>\n<li>原先没有设置宽度的块级（block）元素的宽度会收缩至自适应内部元素的宽度（inline的特性）</li>\n<li>原先不能设置宽高（当然还有上下margin/padding值）的行内（inline）元素可以设置宽高（block的特性）</li>\n</ul>\n<p>注意：行内元素设置上下margin/padding值从显示效果来看是有变化的，但其实设置的是无效的，<strong>并不会对他周围的元素产生任何影响</strong>。</p>\n<h1 id=\"消除浮动的负面影响\"><a href=\"#消除浮动的负面影响\" class=\"headerlink\" title=\"消除浮动的负面影响\"></a>消除浮动的负面影响</h1><p>为消除float带来的布局问题——主要是<strong>未设置高度的父元素高度塌陷问题</strong>，需要使用一些方法来消除浮动动带来的负面影响。</p>\n<p>解决方法主要可分为两类：</p>\n<ul>\n<li>使用clear属性清除浮动</li>\n<li>利用<a href=\"#BFC（flow root）\">BFC原理</a>闭合浮动</li>\n</ul>\n<hr>\n<ul>\n<li><p>::after 伪元素+clear</p>\n<ul>\n<li><p><a href=\"http://www.positioniseverything.net/easyclearing.html\" target=\"_blank\" rel=\"noopener\">How To Clear Floats Without Structural Markup</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\".\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123; *zoom:1; &#125;  /** for IE **/</span><br></pre></td></tr></table></figure>\n<p>更推荐以下简单容易记方案：</p>\n</li>\n<li><p>使用“零宽度空格”字符<a href=\"http://www.fileformat.info/info/unicode/char/200b/index.htm\" target=\"_blank\" rel=\"noopener\">U+200B </a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"200B\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123; *zoom:1; &#125;/* For IE 6/7 (trigger hasLayout) */</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空content以及display:table+伪元素清除浮动</p>\n<p>来自Nicolas Gallagher – <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\" target=\"_blank\" rel=\"noopener\">A new micro clearfix hack</a> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">::before</span>,<span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">::after</span> &#123; </span><br><span class=\"line\">     <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cf</span> &#123; <span class=\"attribute\">zoom</span>:<span class=\"number\">1</span>; &#125;<span class=\"comment\">/* For IE 6/7 (trigger hasLayout) */</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>父元素定义高度</p>\n<p>父元素拥有自己的高度，也就不存在高度塌陷的问题。只适合固定高度的情况，<strong>非固定高度的情况不要使用</strong>。</p>\n</li>\n</ul>\n<ul>\n<li><p>父元素overflow</p>\n<ul>\n<li><p><code>overflow：hidden</code></p>\n<p>必须定义宽度且不能定义高度，浏览器会自动检查浮动区域高度，不能和position配合使用，因为超出的尺寸会被隐藏，无法显示需要溢出的元素。<strong>谨慎使用</strong></p>\n</li>\n<li><p><code>overflow:auto</code></p>\n<p>必须定义宽度且不能定义高度，浏览器自动检查浮动区域的高度，内部宽高超过父元素高度时，会出现<strong>滚动条</strong>。<strong>谨慎使用</strong></p>\n</li>\n</ul>\n</li>\n<li><p>父元素也设置浮动</p>\n<p>与父元素相邻的元素的布局会受到影响，产生新的浮动问题。<strong>不要使用</strong></p>\n</li>\n<li><p>父元素设置<code>display:table</code></p>\n<p>更改了盒模型，可能带来更多麻烦。<strong>不要使用</strong></p>\n</li>\n<li><p>额外标签+clear属性</p>\n<p>浮动元素末尾添加一个空的标签，如在浮动元素之后添加一个<br>标签或者没有内容的<div></div>标签，为其增加<code>clear:both</code>。</p>\n<p>添加了无意义标签，不符合语义化原则，不利于维护。<strong>不要使用</strong></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"BFC（flow-root）\"><a href=\"#BFC（flow-root）\" class=\"headerlink\" title=\"BFC（flow root）\"></a>BFC（flow root）</h2><blockquote>\n<p>Formatting Context：指页面中一个渲染区域，并且拥有一套渲染规则，他决定了其子元素如何定位，以及与其他元素的相互关系和作用。</p>\n</blockquote>\n<p>BFC：Block formatting contexts，块级格式化上下文，规定块级（block）元素的渲染规则。BFC就是页面上的一个隔离的<strong>独立容器</strong>，<strong>容器里面的子元素不会影响到外面的元素</strong>，反之亦然；</p>\n<h3 id=\"BFC触发条件\"><a href=\"#BFC触发条件\" class=\"headerlink\" title=\"BFC触发条件\"></a>BFC触发条件</h3><ul>\n<li><p>页面的根元素</p>\n</li>\n<li><p>fieldset元素</p>\n</li>\n<li><p>float  除了none以外的值——<strong>浮动</strong></p>\n</li>\n<li><p>overflow  除了visible 以外的值（<code>overflow: hidden |auto | scroll</code> ）</p>\n</li>\n<li><p><code>position: absolute |fixed</code> ——<strong>绝对定位</strong></p>\n</li>\n<li><p><code>display : table-cell | table-caption |inline-block</code></p>\n<p><code>display:table</code> 本身并不会创建BFC，但是它会产生匿名框(anonymous boxes)，而匿名框中的<code>display:table-cell</code>可以创建新的BFC。</p>\n</li>\n</ul>\n<h3 id=\"BFC特性\"><a href=\"#BFC特性\" class=\"headerlink\" title=\"BFC特性\"></a>BFC特性</h3><ul>\n<li>同一BFC中上下相邻子元素上下外边距（margin）值叠加。</li>\n<li>同一BFC中每一个子元素的外边距和包含块的左边界相接触（对于从右到左的格式化则是右外边距和右边界相接触）——除非这个子元素也创建了一个新的BFC（比如浮动）。</li>\n<li>BFC会完全包含内部的浮动元素（闭合浮动）。</li>\n<li>BFC区域不会与浮动元素区域相重叠。</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li><p>JavaScript中设置元素对象style的float，不能直接使用float（这是JavaScript保留字），而必须使用cssFloat。</p>\n<p>示例：<code>element.style.cssFloat=&quot;left&quot;</code> 。</p>\n</li>\n</ul>\n","categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[]}