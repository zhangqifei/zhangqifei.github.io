{"title":"CSS3新特性","slug":"css/CSS3新特性","date":"2017-01-06T17:50:32.000Z","updated":"2019-05-22T05:49:08.593Z","comments":true,"path":"api/articles/css/CSS3新特性.json","excerpt":null,"covers":null,"content":"<p><code>[]</code>括起来的内容表示可选项，<code>|</code>分隔的项目表示所有可使用的项。默认值可省略。</p>\n<h1 id=\"尺寸-size\"><a href=\"#尺寸-size\" class=\"headerlink\" title=\"尺寸 size\"></a>尺寸 size</h1><h2 id=\"用户调整尺寸-resize\"><a href=\"#用户调整尺寸-resize\" class=\"headerlink\" title=\"用户调整尺寸 resize\"></a>用户调整尺寸 resize</h2><p><code>resize: none|both|horizontal|vertical;</code></p>\n<h2 id=\"响应式尺寸-response-size\"><a href=\"#响应式尺寸-response-size\" class=\"headerlink\" title=\"响应式尺寸 response size\"></a>响应式尺寸 response size</h2><p><code>max/min-width/height</code></p>\n<p>注意：应用于图片时，尺寸大小不可能变化到大于其原始大小。</p>\n<h2 id=\"盒子尺寸-box-sizing\"><a href=\"#盒子尺寸-box-sizing\" class=\"headerlink\" title=\"盒子尺寸 box-sizing\"></a>盒子尺寸 box-sizing</h2><p><code>box-sizing: content-box|border-box|inherit</code></p>\n<h1 id=\"边框风格-border-style\"><a href=\"#边框风格-border-style\" class=\"headerlink\" title=\"边框风格 border style\"></a>边框风格 border style</h1><h2 id=\"轮廓-outline\"><a href=\"#轮廓-outline\" class=\"headerlink\" title=\"轮廓 outline\"></a>轮廓 outline</h2><p><code>outline:[outline-color] [outline-style] [outline-width] [outline-offset] |inherit</code></p>\n<ul>\n<li>颜色 outline-color：color | invert | inherit</li>\n<li>风格 outline-style：none | dotted | dashed | solid | double | groove | ridge | inset | outset | inherit</li>\n<li>宽度 outline-width： thin | medium | thick | length | inherit</li>\n</ul>\n<h2 id=\"轮廓偏移-outline-offset\"><a href=\"#轮廓偏移-outline-offset\" class=\"headerlink\" title=\"轮廓偏移 outline-offset\"></a>轮廓偏移 outline-offset</h2><p>在 border 边缘外的偏移。Outlines 在两个方面不同于边框：Outlines 不占用空间； Outlines 可能非矩形。</p>\n<h2 id=\"盒阴影-box-shadow\"><a href=\"#盒阴影-box-shadow\" class=\"headerlink\" title=\"盒阴影 box-shadow\"></a>盒阴影 box-shadow</h2><p><code>box-shadow: h-shadow v-shadow [blur] [spread] [color] [inset]</code><br>h 是水平方向上的阴影，v 是垂直方向上的阴影。盒阴影默认默认在外侧。<br>h 和 v 设置为 0 并设置 blur 模糊、spread 扩展的值，可以实现盒子边框四周阴影。</p>\n<h2 id=\"边框圆角-border-radius\"><a href=\"#边框圆角-border-radius\" class=\"headerlink\" title=\"边框圆角 border-radius\"></a>边框圆角 border-radius</h2><p><code>border-radius:px|em|%|rem</code></p>\n<p>注意：百分比值以该元素宽度为标准的。</p>\n<h2 id=\"边框图像-border-image\"><a href=\"#边框图像-border-image\" class=\"headerlink\" title=\"边框图像 border-image\"></a>边框图像 border-image</h2><p><code>border-image: border-image-source border-image-slice border-image-repeat</code><br><strong>图片来源、图片偏移值和图片铺排方式是必须的三个值。</strong> border-image 用于设置:</p>\n<ul>\n<li><p><code>border-image-source: url()|none</code></p>\n</li>\n<li><p><code>border-image-slice: number|%|fill</code></p>\n</li>\n<li><p><code>border-image-repeat: stetch|repeat|round|space|initial|inherit</code></p>\n</li>\n<li><p><code>border-image-width:number|%|auto</code></p>\n</li>\n<li><p><code>border-image-outset: length|number</code> </p>\n<p>注意：number 是倍数值。</p>\n<h1 id=\"背景-background\"><a href=\"#背景-background\" class=\"headerlink\" title=\"背景 background\"></a>背景 background</h1></li>\n</ul>\n<h2 id=\"背景图像-background-image\"><a href=\"#背景图像-background-image\" class=\"headerlink\" title=\"背景图像 background-image\"></a>背景图像 background-image</h2><ul>\n<li><p>图像来源 <code>background-image: url()</code></p>\n</li>\n<li><p>背景尺寸 <code>background-size: length|percentage|cover|contain;</code></p>\n</li>\n<li><p>背景区域 <code>background-origin: padding-box|border-box|content-box;</code></p>\n</li>\n<li><p>背景绘制 <code>background-clip: border-box|padding-box|content-box;</code></p>\n</li>\n</ul>\n<h2 id=\"渐变-gradient\"><a href=\"#渐变-gradient\" class=\"headerlink\" title=\"渐变 gradient\"></a>渐变 gradient</h2><p>渐变的颜色值后可跟上（空格隔开）百分比，用以确定颜色的百分比分布值。</p>\n<ul>\n<li><p>线性渐变 linear-gradient</p>\n<p><code>background: linear-gradient(direction color-stop1 color-stop2, ...);</code></p>\n<p>direction 指定渐变的方向（或角度）。</p>\n</li>\n</ul>\n<ul>\n<li><p>重复的线性渐变：</p>\n<p><code>background: repeating-linear-gradient(direction color-stop1 color-stop2 ...);</code></p>\n</li>\n<li><p>径向渐变 radial-gradient</p>\n<p><code>background: radial-gradient(shape size position start-color ... last-color);</code></p>\n<p>shape 确定圆的类型: ellipse （默认），椭圆形的径向渐变； circle 圆形的径向渐变。size 定义渐变的大小：farthest-corner (默认) |closest-side |closest-corner|farthest-side；position 定义渐变的位置：center（默认）|top|bottom</p>\n</li>\n</ul>\n<ul>\n<li><p>重复径向渐变如：</p>\n<p><code>background: repeatin-gradial-gradient(shape size position start-color ... last-color);</code></p>\n</li>\n</ul>\n<h1 id=\"文字和字体-text-and-font\"><a href=\"#文字和字体-text-and-font\" class=\"headerlink\" title=\"文字和字体 text and font\"></a>文字和字体 text and font</h1><h2 id=\"文本效果-text-effect\"><a href=\"#文本效果-text-effect\" class=\"headerlink\" title=\"文本效果 text effect\"></a>文本效果 text effect</h2><ul>\n<li>文本阴影 <code>text-shadow: h-shadow v-shadow [blur] [color];</code></li>\n<li>文本溢出 <code>text-overflow: clip|ellipsis|string;</code></li>\n<li>文本轮廓 <code>text-outline: thickness [blur] [color];</code></li>\n<li>文本换行 <code>text-wrap: normal|none|unrestricted|suppress;</code></li>\n<li>长文本换行断词 <code>word-wrap: normal|break-word;</code></li>\n<li>非中日韩文本断行 <code>word-break: normal|break-all|keep-all;</code><br>……</li>\n</ul>\n<h2 id=\"网络字体-font-face\"><a href=\"#网络字体-font-face\" class=\"headerlink\" title=\"网络字体@font-face\"></a>网络字体@font-face</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>:font-name;<span class=\"comment\">/*规定字体的名称*/</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>:<span class=\"built_in\">url</span>(xx);<span class=\"comment\">/*字体来源地址*/</span></span><br><span class=\"line\">  font-stretch：/*如何拉伸字体 可选*/</span><br><span class=\"line\">  <span class=\"selector-tag\">font-style</span>: <span class=\"comment\">/*文字风格 可选*/</span></span><br><span class=\"line\">  <span class=\"selector-tag\">font-weight</span>: <span class=\"comment\">/*字体粗细 可选*/</span></span><br><span class=\"line\">  <span class=\"selector-tag\">unicode-range</span>：<span class=\"comment\">/*定义字体支持的 UNICODE 字符范围（默认是 \"U+0-10FFFF\"） 可选*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"变换-transform\"><a href=\"#变换-transform\" class=\"headerlink\" title=\"变换 transform\"></a>变换 transform</h1><h2 id=\"变换基准点-transform-origin\"><a href=\"#变换基准点-transform-origin\" class=\"headerlink\" title=\"变换基准点 transform-origin\"></a>变换基准点 transform-origin</h2><p><code>transform-origin: x-axis y-axis z-axis;</code></p>\n<p>用于更改转换元素的位置。x-axis|y-axis|z-axis 设置试图被置于 x|y|z 轴的何处。</p>\n<ul>\n<li><p>x-axis:left|center|right|length|%</p>\n</li>\n<li><p>y-axis:top|bottom|center|length|%</p>\n</li>\n<li><p>z-axis:lenght</p>\n</li>\n</ul>\n<h2 id=\"变换元素呈现方式-transform-style\"><a href=\"#变换元素呈现方式-transform-style\" class=\"headerlink\" title=\"变换元素呈现方式 transform-style\"></a>变换元素呈现方式 transform-style</h2><p><code>transform-style: flat|preserve-3d;</code></p>\n<p>flat 所有子元素在 2D 平面呈现。preserve-3d 所有子元素在 3D 空间中呈现。</p>\n<h2 id=\"2D-变换-2d-transform\"><a href=\"#2D-变换-2d-transform\" class=\"headerlink\" title=\"2D 变换 2d transform\"></a>2D 变换 2d transform</h2><p><code>transform:none|transform-function`</code></p>\n<ul>\n<li>位移<code>translate(x,y)</code></li>\n<li>旋转<code>rotate(angle)</code></li>\n<li>缩放<code>scale(x-nmber,[y-number])</code></li>\n<li>倾斜<code>skew(x-angle,[y-angle])</code></li>\n<li>矩阵<code>martrix(a,b,c,d,e,f)</code></li>\n</ul>\n<blockquote>\n<p>a db ec f</p>\n</blockquote>\n<p>坐标(x,y)在的算法：</p>\n<blockquote>\n<p>x=ax+cy+ey=bx+dy+f</p>\n</blockquote>\n<p>tanslate(x,y)–matrix(1,0,0,1,x,y)</p>\n<p>scale(x,y)—matrix(x,0,0,y,0,0)</p>\n<p>skew(x,y)—matrix(1,tan(θy),tan(θx),1,0,0)</p>\n<p>rotate(θ)—matrix(cosθ,sinθ,-sinθ,cosθ,0,0)</p>\n<h2 id=\"3D-变换-3d-transform\"><a href=\"#3D-变换-3d-transform\" class=\"headerlink\" title=\"3D 变换 3d transform\"></a>3D 变换 3d transform</h2><p><code>transform:none|transform-function</code></p>\n<p>transform-function 变换方法包括：</p>\n<ul>\n<li><p>位移 <code>translate3d(x,y,z)</code></p>\n</li>\n<li><p>旋转 <code>rotate3d(x,y,z,angle)</code></p>\n</li>\n<li><p>缩放 <code>scale3d(x-nmber,y-number,z-number)</code></p>\n</li>\n<li><p>矩阵 <code>martrix(a,b,c,d,e,f,h,i,j,k,l,m,n,o,p,q)</code></p>\n</li>\n<li><p>透视 <code>perspective(n|none)</code>n 是像素值，书写不带 px 单位。</p>\n</li>\n<li><p>3D 元素透视基准 <code>perspective-origin: x-axis y-axis;</code></p>\n<p>3D 元素所基于的 X 轴和 Y 轴。x-axis 定义该视图在 x 轴上的位置（默认值：50%）： left|center|right|length|%y-axis 定义该视图在 y 轴上的位置（默认值：50%）： top|center|bottom|length|%</p>\n</li>\n</ul>\n<ul>\n<li>3D 元素背面可见性 <code>backface-visibility: visible|hidden;</code></li>\n</ul>\n<p><strong>2D 和 3D 变换都可以单独设置一个轴的变换方式，如<code>translateX(x)</code>。</strong></p>\n<h1 id=\"过渡-transition\"><a href=\"#过渡-transition\" class=\"headerlink\" title=\"过渡 transition\"></a>过渡 transition</h1><p>过渡是元素从一种样式逐渐改变为另一种的效果。</p>\n<ul>\n<li><p>简写方法：<code>transiton：property duration [timing-function] [delay];</code>，默认值分别对应：all 0 ease 0</p>\n<p>简写方法相当于：</p>\n<ul>\n<li><p>应用的属性（可选，不设置则默认为全部<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties\" target=\"_blank\" rel=\"noopener\">可使用过渡效果的属性</a>）</p>\n<p><code>transition-property: none|all|property;</code></p>\n<p>property 定义应用过渡效果的 CSS 属性名称列表，all 则会应用到所有 CSS 属性上。</p>\n</li>\n<li><p>耗时（必须，原因是默认值为 0，没有过渡效果，过渡无意义）</p>\n<p><code>transition-duration: time;</code></p>\n</li>\n<li><p>过渡速度变化曲线（可选）</p>\n<p><code>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code></p>\n<p>可参看<a href=\"cubic-bezier.com\">贝塞尔曲线 cubiz-bezier</a></p>\n</li>\n<li><p>过渡延迟时间（可选）</p>\n<p><code>transition-delay: time;</code></p>\n</li>\n</ul>\n<p>​</p>\n</li>\n<li><p>要实现效果，需要：</p>\n<ol>\n<li>给目标元素设置 transition</li>\n<li>给目标元素添加过渡效果的触发方式（如 hover、事件监听）及过渡效果完毕后的最终样式。（<strong>必须</strong>）</li>\n</ol>\n<ul>\n<li>使用事件监听：在目标元素对象事件处理函数中设置目标元素对象的最终样式。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--要应用过渡效果的元素--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">div&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">width</span> 2<span class=\"selector-tag\">s</span>;<span class=\"comment\">/*该元素需要实现的过渡效果：针对宽度变化，过渡时间持续2秒*/</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;<span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;<span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:hover</span>&#123;<span class=\"comment\">/*当悬停在该元素上触发效果*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:300px</span>;<span class=\"comment\">/*过渡效果完毕后的状态*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动画-keyframes\"><a href=\"#动画-keyframes\" class=\"headerlink\" title=\"动画@keyframes\"></a>动画@keyframes</h1><p>一个动画效果包括两部分 CSS 样式：动画规则部分规定动画的具体实现方式，动画属性部分用以绑定动画规则以及设置该绑定的动画。</p>\n<h2 id=\"动画规则-animation-rule\"><a href=\"#动画规则-animation-rule\" class=\"headerlink\" title=\"动画规则 animation rule\"></a>动画规则 animation rule</h2><p><code>@keyframes animationname {keyframes-selector {css-styles;}}</code></p>\n<ul>\n<li>animationname 必需的 定义 animation 的名称。</li>\n<li>keyframes-selector 必需的 动画持续时间的百分比：0-100%|from (和 0%相同)|to (和 100%相同)</li>\n<li>css-styles 必需的 一个或多个合法的 CSS 样式属性</li>\n</ul>\n<h2 id=\"动画属性-animation-properties\"><a href=\"#动画属性-animation-properties\" class=\"headerlink\" title=\"动画属性 animation properties\"></a>动画属性 animation properties</h2><p><code>animation: name duration [timing-function] [delay] [iteration-count] [direction] [fill-mode] [play-state];</code></p>\n<ul>\n<li>动画名称<code>animation-name: *keyframename*|none;</code></li>\n</ul>\n<p>animation-name 属性为 @keyframes 动画指定名称。</p>\n<ul>\n<li><p>动画耗时<code>animation-duration:time;</code></p>\n</li>\n<li><p>动画速度变化曲线：<code>animation-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code></p>\n</li>\n<li><p>动画延迟时间<code>animation-delay: *time*;</code></p>\n</li>\n<li><p>动画播放次数<code>animation-iteration-count: n|infinite;</code></p>\n<p>n 是播放的次数（阿拉伯数字），infinite 是无限次播放。</p>\n</li>\n<li><p>动画反向播放<code>animation-direction: normal|reverse|alternate|alternate-reverse|initial|inherit;</code></p>\n<ul>\n<li>reverse 反向播放</li>\n<li>alternate 动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</li>\n<li>alternate-reverse 动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。</li>\n</ul>\n</li>\n<li><p>动画运行状态<code>animation-play-state: paused|running;</code></p>\n</li>\n</ul>\n<h1 id=\"媒体查询-media\"><a href=\"#媒体查询-media\" class=\"headerlink\" title=\"媒体查询@media\"></a>媒体查询@media</h1><p>css 语法：<code>@media not|only|all mediatype and (expression){css-style}</code>（注意 and 和小括号之间有一个空格）</p>\n<p>也可以 link 样式文件：<code>&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (expressions)&quot; href=&quot;cssname.css&quot;&gt;</code></p>\n<ul>\n<li>mediatype 媒体类型：all|screen|print|speech</li>\n<li>expression 属性：width/height|min/max-width/height|device-width/height|max/min-reslution 等等。</li>\n</ul>\n<p>媒体查询可用于检测如：</p>\n<ul>\n<li>viewport(视窗) 的宽度与高度</li>\n<li>设备的宽度与高度</li>\n<li>朝向 (智能手机横屏，竖屏) 。</li>\n<li>分辨率</li>\n</ul>\n<h1 id=\"生成内容content\"><a href=\"#生成内容content\" class=\"headerlink\" title=\"生成内容content\"></a>生成内容content</h1><p>使用伪元素和 content 属性添加内容，content 取值：</p>\n<ul>\n<li>none – 不生成任何内容</li>\n<li>attr – 插入标签属性值</li>\n<li>url – 插入一个外部资源（图像，声频，视频或浏览器支持的其他任何资源）</li>\n<li>string – 插入字符串</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"弹性盒子-flexbox\"><a href=\"#弹性盒子-flexbox\" class=\"headerlink\" title=\"弹性盒子 flexbox\"></a>弹性盒子 flexbox</h1><p>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。弹性容器内包含了一个或多个弹性子元素。</p>\n<h2 id=\"弹性容器flex-container的属性\"><a href=\"#弹性容器flex-container的属性\" class=\"headerlink\" title=\"弹性容器flex-container的属性\"></a>弹性容器flex-container的属性</h2><ul>\n<li><p>使用弹性盒子 <code>display:flex</code>或<code>display: inline-flex</code></p>\n<p>使用该属性后，该容器成为弹性盒子。注意：默认弹性盒子内主轴是水平轴，所有子元素排列在一行。</p>\n</li>\n<li><p>子元素排列方式</p>\n<p><code>flex-flow: [flex-direction]|[flex-wrap]|initial|inherit;</code></p>\n<ul>\n<li><p>子元素排列方向</p>\n<p><code>flex-direction: row|row-reverse|column|column-reverse|initial|inherit;</code></p>\n<p>每个弹性框布局包含两个轴，弹性项目沿其依次排列的那根轴称为<strong>主轴(main axis)</strong> ，垂直于<strong>主轴</strong>的那根轴称为<strong>侧轴(cross axis)</strong>。因此，flex-direction 的可以确立主轴（默认情况下排列方式是水平排列，因此默认情况下主轴是水平轴或者说横轴）。</p>\n</li>\n<li><p>子元素换行方式</p>\n<p><code>flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;</code></p>\n<p><strong>默认</strong>情况每个容器只有一行（因为默认的 flex-wrap 值是 nowrap）。</p>\n</li>\n</ul>\n</li>\n<li><p>子元素在主轴的对齐方式</p>\n<p><code>justify-content: flex-start|flex-end|center|space-between|space-around|initial|inherit;</code></p>\n</li>\n<li><p>子元素在侧轴的对齐方式</p>\n<ul>\n<li><code>align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit;</code></li>\n<li><code>align-content: stretch|center|flex-start|flex-end|space-between|space-around|initial|inherit;</code></li>\n</ul>\n<p>使用区别：</p>\n<ul>\n<li><code>align-content</code>属性只适用于<strong>多行子元素</strong>（超过一行，当然如果主轴是垂直轴，则应该称为多列，下同）的 flex 容器，<strong>如果只有一行子元素，该属性不起作用；</strong><code>align-items</code>适用于任意行子元素的<code>flex</code>容器。</li>\n<li><code>align-content</code>是设置一列子元素在整个侧轴上的对其方式；而<code>align-items</code>是设置每个子元素在该行的高度范围内的侧轴上的对齐方式，相当于将侧轴按行平分，设置的是子元素在该行高度范围内的对齐方式。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"弹性子元素flex-items的属性\"><a href=\"#弹性子元素flex-items的属性\" class=\"headerlink\" title=\"弹性子元素flex-items的属性\"></a>弹性子元素flex-items的属性</h2><ul>\n<li><p>子元素出现的顺序</p>\n<p><code>order: number|initial|inherit;</code></p>\n</li>\n<li><p>某个子元素在<strong>交叉轴</strong>上的对齐方式</p>\n<p><code>align-self: auto|stretch|center|flex-start|flex-end|baseline|initial|inherit;</code></p>\n<p>该属性需写在子元素的样式上。</p>\n</li>\n<li><p>子元素空间分配</p>\n<p><code>flex: [flex-grow]|[flex-shrink]|[flex-basis]|auto|initial|none|inherit;</code></p>\n<p>其中auto相当于1 1 auto ，none相当于0 0 auto，intial相当于0 1 auto</p>\n<ul>\n<li>弹性盒子伸缩基准值<code>flex-basis: number|auto|initial|inherit;</code></li>\n<li>弹性盒子的扩展比率<code>flex-grow: number|initial|inherit;</code></li>\n<li>弹性盒子的收缩比率<code>flex-shrink: number|initial|inherit;</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"网格布局grid\"><a href=\"#网格布局grid\" class=\"headerlink\" title=\"网格布局grid\"></a>网格布局grid</h1><p>//todo</p>\n<h1 id=\"多列-columns\"><a href=\"#多列-columns\" class=\"headerlink\" title=\"多列 columns\"></a>多列 columns</h1><ul>\n<li><p>列宽和列数<code>columns: column-width column-count;</code></p>\n<ul>\n<li>列宽<code>column-width: auto|length;</code></li>\n<li>列数<code>column-count: n|auto;</code></li>\n</ul>\n</li>\n<li><p>列间距<code>column-gap: length|normal;</code><br>normal 指定一个列之间的普通差距。 W3C 建议 1EM 值。</p>\n</li>\n<li><p>列间样式<code>column-rule: column-rule-width column-rule-style column-rule-color;</code></p>\n<ul>\n<li><code>column-rule-width</code> 设置列中之间的宽度规则</li>\n<li><code>column-rule-style</code> 设置列中之间的样式规则</li>\n<li><code>column-rule-color</code> 设置列中之间的颜色规则</li>\n</ul>\n</li>\n<li><p>跨列数<code>column-span: 1|all;</code></p>\n</li>\n<li><p>列填充<code>column-fill: balance|auto;</code></p>\n<p>balance 列长短平衡。浏览器应尽量减少改变列的长度</p>\n</li>\n</ul>\n<h1 id=\"图片滤镜-image-filter\"><a href=\"#图片滤镜-image-filter\" class=\"headerlink\" title=\"图片滤镜 image filter\"></a>图片滤镜 image filter</h1><p><code>filter: none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia() | url();</code></p>\n<ul>\n<li>blur(px) 高斯模糊 这个参数可设置 css 长度值(但不接受百分比值） 默认 0</li>\n<li>brightness(%) 亮度 默认 1</li>\n<li>contrast(%) 对比度 默认 1</li>\n<li>drop-shadow(h-shadow v-shadow blur spread color) 阴影效果（接受<shadow>(在 CSS3 背景中定义)类型的值，除了”inset”关键字）该函数与已有的 box-shadow box-shadow 属性很相似；<em>不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速。</em></shadow></li>\n<li>grayscale(%) 灰度 默认 0</li>\n<li>hue-rotate(deg) 色相旋转 默认 0deg</li>\n<li>invert(%) 反转输入图像 默认是 0</li>\n<li>opacity(%) 透明度 默认 1<br>该函数与已有的 opacity 属性很相似，<em>不同之处在于通过 filter，一些浏览器为了提升性能会提供硬件加速。</em></li>\n<li>saturate(%) 饱和度 默认。<ul>\n<li>sepia(%) 转换为深褐色 默认 0</li>\n</ul>\n</li>\n<li>url() URL 函数接受一个 XML 文件，该文件设置了 一个 SVG 滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。例如：<code>filter: url(svg-url#element-id)</code></li>\n</ul>\n<h1 id=\"选择器-selector\"><a href=\"#选择器-selector\" class=\"headerlink\" title=\"选择器 selector\"></a>选择器 selector</h1><p>CSS3 新增的选择器</p>\n<ul>\n<li><p>元素选择器</p>\n<ul>\n<li>同级别<code>~</code>：<code>p ~ ul</code></li>\n</ul>\n</li>\n<li><p>属性选择器</p>\n<ul>\n<li><p>以某字符串作为开头的属性值–<code>^=</code><br><code>a[src^=&quot;https&quot;]</code>–src 属性值以 “https” 开头的 a 元素</p>\n</li>\n<li><p>以某字符串为结尾的属性值–<code>$=</code><br><code>a[src$=&quot;.pdf&quot;]</code>–src 属性值以”.pdf”结尾的 a 元素</p>\n</li>\n<li><p>包含某字符串的属性值–<code>*=</code><br><code>a[src*=&quot;abc&quot;]</code>–src 属性包含 abc 的”a”元素</p>\n</li>\n</ul>\n</li>\n<li><p>伪类选择器</p>\n<ul>\n<li>某（些）类子元素<ul>\n<li><code>:only-child</code></li>\n<li><code>:first-of-type</code></li>\n<li><code>:last-of-type</code></li>\n<li><code>:nth-of-type(n)</code></li>\n<li><code>:nth-last-of-type(n)</code></li>\n<li><code>:only-of-type</code></li>\n</ul>\n</li>\n<li>某个子元素<ul>\n<li><code>:first-child</code></li>\n<li><code>:last-child</code></li>\n<li><code>:nth-child(n)</code></li>\n<li><code>:nth-last-child(n)</code></li>\n</ul>\n</li>\n<li>根元素 <code>:root</code></li>\n<li>没有子元素的元素 <code>:empty</code></li>\n<li>当前活动的元素 <code>:target</code></li>\n<li>选中的元素 <code>:checked</code></li>\n<li>非某种（个）元素 <code>:not(selector)</code></li>\n<li>启用或禁用的元素元素可以设置 disabled 属性（如果为设置默认 enabled）<ul>\n<li>启用的元素 <code>:enabled</code></li>\n<li>禁用的元素 <code>:disabled</code></li>\n</ul>\n</li>\n<li>有校验属性的元素设置了 min 和 max 的 input 元素以及 email 元素等可以校验输入情况<ul>\n<li>输入值为非法的元素 <code>:invalid</code></li>\n<li>输入值为合法的元素 <code>:valid</code></li>\n</ul>\n</li>\n<li>必要和可选属性的元素表单元素可以设置 required 属性（不设置就是 optional）<ul>\n<li>有可选的输入元素 <code>:optional</code></li>\n<li>有 required 属性的元素 <code>:required</code></li>\n</ul>\n</li>\n<li><p>读写属性的元素<br>input、textarea 等元素可以设置 readonly 属性（不设置则是读写）</p>\n<ul>\n<li>有 readonly 属性的元素 <code>:read-only</code></li>\n<li>有读写属性的元素 <code>:read-write</code></li>\n</ul>\n</li>\n<li><p>input 区间指定元素<br>input 元素可以设置 min 和 max 属性规定输入的区间</p>\n<ul>\n<li>指定区间内的 input 元素 <code>:in-range</code></li>\n<li>指定区间外的 input 元素 <code>:out-of-range</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>伪类选择器</p>\n<ul>\n<li>选中的元素 <code>::selection</code></li>\n</ul>\n</li>\n</ul>\n","more":"<p><code>[]</code>括起来的内容表示可选项，<code>|</code>分隔的项目表示所有可使用的项。默认值可省略。</p>\n<h1 id=\"尺寸-size\"><a href=\"#尺寸-size\" class=\"headerlink\" title=\"尺寸 size\"></a>尺寸 size</h1><h2 id=\"用户调整尺寸-resize\"><a href=\"#用户调整尺寸-resize\" class=\"headerlink\" title=\"用户调整尺寸 resize\"></a>用户调整尺寸 resize</h2><p><code>resize: none|both|horizontal|vertical;</code></p>\n<h2 id=\"响应式尺寸-response-size\"><a href=\"#响应式尺寸-response-size\" class=\"headerlink\" title=\"响应式尺寸 response size\"></a>响应式尺寸 response size</h2><p><code>max/min-width/height</code></p>\n<p>注意：应用于图片时，尺寸大小不可能变化到大于其原始大小。</p>\n<h2 id=\"盒子尺寸-box-sizing\"><a href=\"#盒子尺寸-box-sizing\" class=\"headerlink\" title=\"盒子尺寸 box-sizing\"></a>盒子尺寸 box-sizing</h2><p><code>box-sizing: content-box|border-box|inherit</code></p>\n<h1 id=\"边框风格-border-style\"><a href=\"#边框风格-border-style\" class=\"headerlink\" title=\"边框风格 border style\"></a>边框风格 border style</h1><h2 id=\"轮廓-outline\"><a href=\"#轮廓-outline\" class=\"headerlink\" title=\"轮廓 outline\"></a>轮廓 outline</h2><p><code>outline:[outline-color] [outline-style] [outline-width] [outline-offset] |inherit</code></p>\n<ul>\n<li>颜色 outline-color：color | invert | inherit</li>\n<li>风格 outline-style：none | dotted | dashed | solid | double | groove | ridge | inset | outset | inherit</li>\n<li>宽度 outline-width： thin | medium | thick | length | inherit</li>\n</ul>\n<h2 id=\"轮廓偏移-outline-offset\"><a href=\"#轮廓偏移-outline-offset\" class=\"headerlink\" title=\"轮廓偏移 outline-offset\"></a>轮廓偏移 outline-offset</h2><p>在 border 边缘外的偏移。Outlines 在两个方面不同于边框：Outlines 不占用空间； Outlines 可能非矩形。</p>\n<h2 id=\"盒阴影-box-shadow\"><a href=\"#盒阴影-box-shadow\" class=\"headerlink\" title=\"盒阴影 box-shadow\"></a>盒阴影 box-shadow</h2><p><code>box-shadow: h-shadow v-shadow [blur] [spread] [color] [inset]</code><br>h 是水平方向上的阴影，v 是垂直方向上的阴影。盒阴影默认默认在外侧。<br>h 和 v 设置为 0 并设置 blur 模糊、spread 扩展的值，可以实现盒子边框四周阴影。</p>\n<h2 id=\"边框圆角-border-radius\"><a href=\"#边框圆角-border-radius\" class=\"headerlink\" title=\"边框圆角 border-radius\"></a>边框圆角 border-radius</h2><p><code>border-radius:px|em|%|rem</code></p>\n<p>注意：百分比值以该元素宽度为标准的。</p>\n<h2 id=\"边框图像-border-image\"><a href=\"#边框图像-border-image\" class=\"headerlink\" title=\"边框图像 border-image\"></a>边框图像 border-image</h2><p><code>border-image: border-image-source border-image-slice border-image-repeat</code><br><strong>图片来源、图片偏移值和图片铺排方式是必须的三个值。</strong> border-image 用于设置:</p>\n<ul>\n<li><p><code>border-image-source: url()|none</code></p>\n</li>\n<li><p><code>border-image-slice: number|%|fill</code></p>\n</li>\n<li><p><code>border-image-repeat: stetch|repeat|round|space|initial|inherit</code></p>\n</li>\n<li><p><code>border-image-width:number|%|auto</code></p>\n</li>\n<li><p><code>border-image-outset: length|number</code> </p>\n<p>注意：number 是倍数值。</p>\n<h1 id=\"背景-background\"><a href=\"#背景-background\" class=\"headerlink\" title=\"背景 background\"></a>背景 background</h1></li>\n</ul>\n<h2 id=\"背景图像-background-image\"><a href=\"#背景图像-background-image\" class=\"headerlink\" title=\"背景图像 background-image\"></a>背景图像 background-image</h2><ul>\n<li><p>图像来源 <code>background-image: url()</code></p>\n</li>\n<li><p>背景尺寸 <code>background-size: length|percentage|cover|contain;</code></p>\n</li>\n<li><p>背景区域 <code>background-origin: padding-box|border-box|content-box;</code></p>\n</li>\n<li><p>背景绘制 <code>background-clip: border-box|padding-box|content-box;</code></p>\n</li>\n</ul>\n<h2 id=\"渐变-gradient\"><a href=\"#渐变-gradient\" class=\"headerlink\" title=\"渐变 gradient\"></a>渐变 gradient</h2><p>渐变的颜色值后可跟上（空格隔开）百分比，用以确定颜色的百分比分布值。</p>\n<ul>\n<li><p>线性渐变 linear-gradient</p>\n<p><code>background: linear-gradient(direction color-stop1 color-stop2, ...);</code></p>\n<p>direction 指定渐变的方向（或角度）。</p>\n</li>\n</ul>\n<ul>\n<li><p>重复的线性渐变：</p>\n<p><code>background: repeating-linear-gradient(direction color-stop1 color-stop2 ...);</code></p>\n</li>\n<li><p>径向渐变 radial-gradient</p>\n<p><code>background: radial-gradient(shape size position start-color ... last-color);</code></p>\n<p>shape 确定圆的类型: ellipse （默认），椭圆形的径向渐变； circle 圆形的径向渐变。size 定义渐变的大小：farthest-corner (默认) |closest-side |closest-corner|farthest-side；position 定义渐变的位置：center（默认）|top|bottom</p>\n</li>\n</ul>\n<ul>\n<li><p>重复径向渐变如：</p>\n<p><code>background: repeatin-gradial-gradient(shape size position start-color ... last-color);</code></p>\n</li>\n</ul>\n<h1 id=\"文字和字体-text-and-font\"><a href=\"#文字和字体-text-and-font\" class=\"headerlink\" title=\"文字和字体 text and font\"></a>文字和字体 text and font</h1><h2 id=\"文本效果-text-effect\"><a href=\"#文本效果-text-effect\" class=\"headerlink\" title=\"文本效果 text effect\"></a>文本效果 text effect</h2><ul>\n<li>文本阴影 <code>text-shadow: h-shadow v-shadow [blur] [color];</code></li>\n<li>文本溢出 <code>text-overflow: clip|ellipsis|string;</code></li>\n<li>文本轮廓 <code>text-outline: thickness [blur] [color];</code></li>\n<li>文本换行 <code>text-wrap: normal|none|unrestricted|suppress;</code></li>\n<li>长文本换行断词 <code>word-wrap: normal|break-word;</code></li>\n<li>非中日韩文本断行 <code>word-break: normal|break-all|keep-all;</code><br>……</li>\n</ul>\n<h2 id=\"网络字体-font-face\"><a href=\"#网络字体-font-face\" class=\"headerlink\" title=\"网络字体@font-face\"></a>网络字体@font-face</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">font-face</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>:font-name;<span class=\"comment\">/*规定字体的名称*/</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>:<span class=\"built_in\">url</span>(xx);<span class=\"comment\">/*字体来源地址*/</span></span><br><span class=\"line\">  font-stretch：/*如何拉伸字体 可选*/</span><br><span class=\"line\">  <span class=\"selector-tag\">font-style</span>: <span class=\"comment\">/*文字风格 可选*/</span></span><br><span class=\"line\">  <span class=\"selector-tag\">font-weight</span>: <span class=\"comment\">/*字体粗细 可选*/</span></span><br><span class=\"line\">  <span class=\"selector-tag\">unicode-range</span>：<span class=\"comment\">/*定义字体支持的 UNICODE 字符范围（默认是 \"U+0-10FFFF\"） 可选*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"变换-transform\"><a href=\"#变换-transform\" class=\"headerlink\" title=\"变换 transform\"></a>变换 transform</h1><h2 id=\"变换基准点-transform-origin\"><a href=\"#变换基准点-transform-origin\" class=\"headerlink\" title=\"变换基准点 transform-origin\"></a>变换基准点 transform-origin</h2><p><code>transform-origin: x-axis y-axis z-axis;</code></p>\n<p>用于更改转换元素的位置。x-axis|y-axis|z-axis 设置试图被置于 x|y|z 轴的何处。</p>\n<ul>\n<li><p>x-axis:left|center|right|length|%</p>\n</li>\n<li><p>y-axis:top|bottom|center|length|%</p>\n</li>\n<li><p>z-axis:lenght</p>\n</li>\n</ul>\n<h2 id=\"变换元素呈现方式-transform-style\"><a href=\"#变换元素呈现方式-transform-style\" class=\"headerlink\" title=\"变换元素呈现方式 transform-style\"></a>变换元素呈现方式 transform-style</h2><p><code>transform-style: flat|preserve-3d;</code></p>\n<p>flat 所有子元素在 2D 平面呈现。preserve-3d 所有子元素在 3D 空间中呈现。</p>\n<h2 id=\"2D-变换-2d-transform\"><a href=\"#2D-变换-2d-transform\" class=\"headerlink\" title=\"2D 变换 2d transform\"></a>2D 变换 2d transform</h2><p><code>transform:none|transform-function`</code></p>\n<ul>\n<li>位移<code>translate(x,y)</code></li>\n<li>旋转<code>rotate(angle)</code></li>\n<li>缩放<code>scale(x-nmber,[y-number])</code></li>\n<li>倾斜<code>skew(x-angle,[y-angle])</code></li>\n<li>矩阵<code>martrix(a,b,c,d,e,f)</code></li>\n</ul>\n<blockquote>\n<p>a db ec f</p>\n</blockquote>\n<p>坐标(x,y)在的算法：</p>\n<blockquote>\n<p>x=ax+cy+ey=bx+dy+f</p>\n</blockquote>\n<p>tanslate(x,y)–matrix(1,0,0,1,x,y)</p>\n<p>scale(x,y)—matrix(x,0,0,y,0,0)</p>\n<p>skew(x,y)—matrix(1,tan(θy),tan(θx),1,0,0)</p>\n<p>rotate(θ)—matrix(cosθ,sinθ,-sinθ,cosθ,0,0)</p>\n<h2 id=\"3D-变换-3d-transform\"><a href=\"#3D-变换-3d-transform\" class=\"headerlink\" title=\"3D 变换 3d transform\"></a>3D 变换 3d transform</h2><p><code>transform:none|transform-function</code></p>\n<p>transform-function 变换方法包括：</p>\n<ul>\n<li><p>位移 <code>translate3d(x,y,z)</code></p>\n</li>\n<li><p>旋转 <code>rotate3d(x,y,z,angle)</code></p>\n</li>\n<li><p>缩放 <code>scale3d(x-nmber,y-number,z-number)</code></p>\n</li>\n<li><p>矩阵 <code>martrix(a,b,c,d,e,f,h,i,j,k,l,m,n,o,p,q)</code></p>\n</li>\n<li><p>透视 <code>perspective(n|none)</code>n 是像素值，书写不带 px 单位。</p>\n</li>\n<li><p>3D 元素透视基准 <code>perspective-origin: x-axis y-axis;</code></p>\n<p>3D 元素所基于的 X 轴和 Y 轴。x-axis 定义该视图在 x 轴上的位置（默认值：50%）： left|center|right|length|%y-axis 定义该视图在 y 轴上的位置（默认值：50%）： top|center|bottom|length|%</p>\n</li>\n</ul>\n<ul>\n<li>3D 元素背面可见性 <code>backface-visibility: visible|hidden;</code></li>\n</ul>\n<p><strong>2D 和 3D 变换都可以单独设置一个轴的变换方式，如<code>translateX(x)</code>。</strong></p>\n<h1 id=\"过渡-transition\"><a href=\"#过渡-transition\" class=\"headerlink\" title=\"过渡 transition\"></a>过渡 transition</h1><p>过渡是元素从一种样式逐渐改变为另一种的效果。</p>\n<ul>\n<li><p>简写方法：<code>transiton：property duration [timing-function] [delay];</code>，默认值分别对应：all 0 ease 0</p>\n<p>简写方法相当于：</p>\n<ul>\n<li><p>应用的属性（可选，不设置则默认为全部<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties\" target=\"_blank\" rel=\"noopener\">可使用过渡效果的属性</a>）</p>\n<p><code>transition-property: none|all|property;</code></p>\n<p>property 定义应用过渡效果的 CSS 属性名称列表，all 则会应用到所有 CSS 属性上。</p>\n</li>\n<li><p>耗时（必须，原因是默认值为 0，没有过渡效果，过渡无意义）</p>\n<p><code>transition-duration: time;</code></p>\n</li>\n<li><p>过渡速度变化曲线（可选）</p>\n<p><code>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code></p>\n<p>可参看<a href=\"cubic-bezier.com\">贝塞尔曲线 cubiz-bezier</a></p>\n</li>\n<li><p>过渡延迟时间（可选）</p>\n<p><code>transition-delay: time;</code></p>\n</li>\n</ul>\n<p>​</p>\n</li>\n<li><p>要实现效果，需要：</p>\n<ol>\n<li>给目标元素设置 transition</li>\n<li>给目标元素添加过渡效果的触发方式（如 hover、事件监听）及过渡效果完毕后的最终样式。（<strong>必须</strong>）</li>\n</ol>\n<ul>\n<li>使用事件监听：在目标元素对象事件处理函数中设置目标元素对象的最终样式。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--要应用过渡效果的元素--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">div&#123;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">width</span> 2<span class=\"selector-tag\">s</span>;<span class=\"comment\">/*该元素需要实现的过渡效果：针对宽度变化，过渡时间持续2秒*/</span></span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100px</span>;<span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:100px</span>;<span class=\"selector-tag\">background</span><span class=\"selector-pseudo\">:red</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:hover</span>&#123;<span class=\"comment\">/*当悬停在该元素上触发效果*/</span></span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:300px</span>;<span class=\"comment\">/*过渡效果完毕后的状态*/</span></span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动画-keyframes\"><a href=\"#动画-keyframes\" class=\"headerlink\" title=\"动画@keyframes\"></a>动画@keyframes</h1><p>一个动画效果包括两部分 CSS 样式：动画规则部分规定动画的具体实现方式，动画属性部分用以绑定动画规则以及设置该绑定的动画。</p>\n<h2 id=\"动画规则-animation-rule\"><a href=\"#动画规则-animation-rule\" class=\"headerlink\" title=\"动画规则 animation rule\"></a>动画规则 animation rule</h2><p><code>@keyframes animationname {keyframes-selector {css-styles;}}</code></p>\n<ul>\n<li>animationname 必需的 定义 animation 的名称。</li>\n<li>keyframes-selector 必需的 动画持续时间的百分比：0-100%|from (和 0%相同)|to (和 100%相同)</li>\n<li>css-styles 必需的 一个或多个合法的 CSS 样式属性</li>\n</ul>\n<h2 id=\"动画属性-animation-properties\"><a href=\"#动画属性-animation-properties\" class=\"headerlink\" title=\"动画属性 animation properties\"></a>动画属性 animation properties</h2><p><code>animation: name duration [timing-function] [delay] [iteration-count] [direction] [fill-mode] [play-state];</code></p>\n<ul>\n<li>动画名称<code>animation-name: *keyframename*|none;</code></li>\n</ul>\n<p>animation-name 属性为 @keyframes 动画指定名称。</p>\n<ul>\n<li><p>动画耗时<code>animation-duration:time;</code></p>\n</li>\n<li><p>动画速度变化曲线：<code>animation-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code></p>\n</li>\n<li><p>动画延迟时间<code>animation-delay: *time*;</code></p>\n</li>\n<li><p>动画播放次数<code>animation-iteration-count: n|infinite;</code></p>\n<p>n 是播放的次数（阿拉伯数字），infinite 是无限次播放。</p>\n</li>\n<li><p>动画反向播放<code>animation-direction: normal|reverse|alternate|alternate-reverse|initial|inherit;</code></p>\n<ul>\n<li>reverse 反向播放</li>\n<li>alternate 动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</li>\n<li>alternate-reverse 动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。</li>\n</ul>\n</li>\n<li><p>动画运行状态<code>animation-play-state: paused|running;</code></p>\n</li>\n</ul>\n<h1 id=\"媒体查询-media\"><a href=\"#媒体查询-media\" class=\"headerlink\" title=\"媒体查询@media\"></a>媒体查询@media</h1><p>css 语法：<code>@media not|only|all mediatype and (expression){css-style}</code>（注意 and 和小括号之间有一个空格）</p>\n<p>也可以 link 样式文件：<code>&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (expressions)&quot; href=&quot;cssname.css&quot;&gt;</code></p>\n<ul>\n<li>mediatype 媒体类型：all|screen|print|speech</li>\n<li>expression 属性：width/height|min/max-width/height|device-width/height|max/min-reslution 等等。</li>\n</ul>\n<p>媒体查询可用于检测如：</p>\n<ul>\n<li>viewport(视窗) 的宽度与高度</li>\n<li>设备的宽度与高度</li>\n<li>朝向 (智能手机横屏，竖屏) 。</li>\n<li>分辨率</li>\n</ul>\n<h1 id=\"生成内容content\"><a href=\"#生成内容content\" class=\"headerlink\" title=\"生成内容content\"></a>生成内容content</h1><p>使用伪元素和 content 属性添加内容，content 取值：</p>\n<ul>\n<li>none – 不生成任何内容</li>\n<li>attr – 插入标签属性值</li>\n<li>url – 插入一个外部资源（图像，声频，视频或浏览器支持的其他任何资源）</li>\n<li>string – 插入字符串</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.cf</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"弹性盒子-flexbox\"><a href=\"#弹性盒子-flexbox\" class=\"headerlink\" title=\"弹性盒子 flexbox\"></a>弹性盒子 flexbox</h1><p>弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。弹性容器内包含了一个或多个弹性子元素。</p>\n<h2 id=\"弹性容器flex-container的属性\"><a href=\"#弹性容器flex-container的属性\" class=\"headerlink\" title=\"弹性容器flex-container的属性\"></a>弹性容器flex-container的属性</h2><ul>\n<li><p>使用弹性盒子 <code>display:flex</code>或<code>display: inline-flex</code></p>\n<p>使用该属性后，该容器成为弹性盒子。注意：默认弹性盒子内主轴是水平轴，所有子元素排列在一行。</p>\n</li>\n<li><p>子元素排列方式</p>\n<p><code>flex-flow: [flex-direction]|[flex-wrap]|initial|inherit;</code></p>\n<ul>\n<li><p>子元素排列方向</p>\n<p><code>flex-direction: row|row-reverse|column|column-reverse|initial|inherit;</code></p>\n<p>每个弹性框布局包含两个轴，弹性项目沿其依次排列的那根轴称为<strong>主轴(main axis)</strong> ，垂直于<strong>主轴</strong>的那根轴称为<strong>侧轴(cross axis)</strong>。因此，flex-direction 的可以确立主轴（默认情况下排列方式是水平排列，因此默认情况下主轴是水平轴或者说横轴）。</p>\n</li>\n<li><p>子元素换行方式</p>\n<p><code>flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;</code></p>\n<p><strong>默认</strong>情况每个容器只有一行（因为默认的 flex-wrap 值是 nowrap）。</p>\n</li>\n</ul>\n</li>\n<li><p>子元素在主轴的对齐方式</p>\n<p><code>justify-content: flex-start|flex-end|center|space-between|space-around|initial|inherit;</code></p>\n</li>\n<li><p>子元素在侧轴的对齐方式</p>\n<ul>\n<li><code>align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit;</code></li>\n<li><code>align-content: stretch|center|flex-start|flex-end|space-between|space-around|initial|inherit;</code></li>\n</ul>\n<p>使用区别：</p>\n<ul>\n<li><code>align-content</code>属性只适用于<strong>多行子元素</strong>（超过一行，当然如果主轴是垂直轴，则应该称为多列，下同）的 flex 容器，<strong>如果只有一行子元素，该属性不起作用；</strong><code>align-items</code>适用于任意行子元素的<code>flex</code>容器。</li>\n<li><code>align-content</code>是设置一列子元素在整个侧轴上的对其方式；而<code>align-items</code>是设置每个子元素在该行的高度范围内的侧轴上的对齐方式，相当于将侧轴按行平分，设置的是子元素在该行高度范围内的对齐方式。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"弹性子元素flex-items的属性\"><a href=\"#弹性子元素flex-items的属性\" class=\"headerlink\" title=\"弹性子元素flex-items的属性\"></a>弹性子元素flex-items的属性</h2><ul>\n<li><p>子元素出现的顺序</p>\n<p><code>order: number|initial|inherit;</code></p>\n</li>\n<li><p>某个子元素在<strong>交叉轴</strong>上的对齐方式</p>\n<p><code>align-self: auto|stretch|center|flex-start|flex-end|baseline|initial|inherit;</code></p>\n<p>该属性需写在子元素的样式上。</p>\n</li>\n<li><p>子元素空间分配</p>\n<p><code>flex: [flex-grow]|[flex-shrink]|[flex-basis]|auto|initial|none|inherit;</code></p>\n<p>其中auto相当于1 1 auto ，none相当于0 0 auto，intial相当于0 1 auto</p>\n<ul>\n<li>弹性盒子伸缩基准值<code>flex-basis: number|auto|initial|inherit;</code></li>\n<li>弹性盒子的扩展比率<code>flex-grow: number|initial|inherit;</code></li>\n<li>弹性盒子的收缩比率<code>flex-shrink: number|initial|inherit;</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"网格布局grid\"><a href=\"#网格布局grid\" class=\"headerlink\" title=\"网格布局grid\"></a>网格布局grid</h1><p>//todo</p>\n<h1 id=\"多列-columns\"><a href=\"#多列-columns\" class=\"headerlink\" title=\"多列 columns\"></a>多列 columns</h1><ul>\n<li><p>列宽和列数<code>columns: column-width column-count;</code></p>\n<ul>\n<li>列宽<code>column-width: auto|length;</code></li>\n<li>列数<code>column-count: n|auto;</code></li>\n</ul>\n</li>\n<li><p>列间距<code>column-gap: length|normal;</code><br>normal 指定一个列之间的普通差距。 W3C 建议 1EM 值。</p>\n</li>\n<li><p>列间样式<code>column-rule: column-rule-width column-rule-style column-rule-color;</code></p>\n<ul>\n<li><code>column-rule-width</code> 设置列中之间的宽度规则</li>\n<li><code>column-rule-style</code> 设置列中之间的样式规则</li>\n<li><code>column-rule-color</code> 设置列中之间的颜色规则</li>\n</ul>\n</li>\n<li><p>跨列数<code>column-span: 1|all;</code></p>\n</li>\n<li><p>列填充<code>column-fill: balance|auto;</code></p>\n<p>balance 列长短平衡。浏览器应尽量减少改变列的长度</p>\n</li>\n</ul>\n<h1 id=\"图片滤镜-image-filter\"><a href=\"#图片滤镜-image-filter\" class=\"headerlink\" title=\"图片滤镜 image filter\"></a>图片滤镜 image filter</h1><p><code>filter: none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia() | url();</code></p>\n<ul>\n<li>blur(px) 高斯模糊 这个参数可设置 css 长度值(但不接受百分比值） 默认 0</li>\n<li>brightness(%) 亮度 默认 1</li>\n<li>contrast(%) 对比度 默认 1</li>\n<li>drop-shadow(h-shadow v-shadow blur spread color) 阴影效果（接受<shadow>(在 CSS3 背景中定义)类型的值，除了”inset”关键字）该函数与已有的 box-shadow box-shadow 属性很相似；<em>不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速。</em></shadow></li>\n<li>grayscale(%) 灰度 默认 0</li>\n<li>hue-rotate(deg) 色相旋转 默认 0deg</li>\n<li>invert(%) 反转输入图像 默认是 0</li>\n<li>opacity(%) 透明度 默认 1<br>该函数与已有的 opacity 属性很相似，<em>不同之处在于通过 filter，一些浏览器为了提升性能会提供硬件加速。</em></li>\n<li>saturate(%) 饱和度 默认。<ul>\n<li>sepia(%) 转换为深褐色 默认 0</li>\n</ul>\n</li>\n<li>url() URL 函数接受一个 XML 文件，该文件设置了 一个 SVG 滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。例如：<code>filter: url(svg-url#element-id)</code></li>\n</ul>\n<h1 id=\"选择器-selector\"><a href=\"#选择器-selector\" class=\"headerlink\" title=\"选择器 selector\"></a>选择器 selector</h1><p>CSS3 新增的选择器</p>\n<ul>\n<li><p>元素选择器</p>\n<ul>\n<li>同级别<code>~</code>：<code>p ~ ul</code></li>\n</ul>\n</li>\n<li><p>属性选择器</p>\n<ul>\n<li><p>以某字符串作为开头的属性值–<code>^=</code><br><code>a[src^=&quot;https&quot;]</code>–src 属性值以 “https” 开头的 a 元素</p>\n</li>\n<li><p>以某字符串为结尾的属性值–<code>$=</code><br><code>a[src$=&quot;.pdf&quot;]</code>–src 属性值以”.pdf”结尾的 a 元素</p>\n</li>\n<li><p>包含某字符串的属性值–<code>*=</code><br><code>a[src*=&quot;abc&quot;]</code>–src 属性包含 abc 的”a”元素</p>\n</li>\n</ul>\n</li>\n<li><p>伪类选择器</p>\n<ul>\n<li>某（些）类子元素<ul>\n<li><code>:only-child</code></li>\n<li><code>:first-of-type</code></li>\n<li><code>:last-of-type</code></li>\n<li><code>:nth-of-type(n)</code></li>\n<li><code>:nth-last-of-type(n)</code></li>\n<li><code>:only-of-type</code></li>\n</ul>\n</li>\n<li>某个子元素<ul>\n<li><code>:first-child</code></li>\n<li><code>:last-child</code></li>\n<li><code>:nth-child(n)</code></li>\n<li><code>:nth-last-child(n)</code></li>\n</ul>\n</li>\n<li>根元素 <code>:root</code></li>\n<li>没有子元素的元素 <code>:empty</code></li>\n<li>当前活动的元素 <code>:target</code></li>\n<li>选中的元素 <code>:checked</code></li>\n<li>非某种（个）元素 <code>:not(selector)</code></li>\n<li>启用或禁用的元素元素可以设置 disabled 属性（如果为设置默认 enabled）<ul>\n<li>启用的元素 <code>:enabled</code></li>\n<li>禁用的元素 <code>:disabled</code></li>\n</ul>\n</li>\n<li>有校验属性的元素设置了 min 和 max 的 input 元素以及 email 元素等可以校验输入情况<ul>\n<li>输入值为非法的元素 <code>:invalid</code></li>\n<li>输入值为合法的元素 <code>:valid</code></li>\n</ul>\n</li>\n<li>必要和可选属性的元素表单元素可以设置 required 属性（不设置就是 optional）<ul>\n<li>有可选的输入元素 <code>:optional</code></li>\n<li>有 required 属性的元素 <code>:required</code></li>\n</ul>\n</li>\n<li><p>读写属性的元素<br>input、textarea 等元素可以设置 readonly 属性（不设置则是读写）</p>\n<ul>\n<li>有 readonly 属性的元素 <code>:read-only</code></li>\n<li>有读写属性的元素 <code>:read-write</code></li>\n</ul>\n</li>\n<li><p>input 区间指定元素<br>input 元素可以设置 min 和 max 属性规定输入的区间</p>\n<ul>\n<li>指定区间内的 input 元素 <code>:in-range</code></li>\n<li>指定区间外的 input 元素 <code>:out-of-range</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>伪类选择器</p>\n<ul>\n<li>选中的元素 <code>::selection</code></li>\n</ul>\n</li>\n</ul>\n","categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[]}