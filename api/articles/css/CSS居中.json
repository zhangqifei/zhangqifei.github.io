{"title":"CSS居中","slug":"css/CSS居中","date":"2017-01-06T17:50:32.000Z","updated":"2019-05-22T05:46:47.951Z","comments":true,"path":"api/articles/css/CSS居中.json","excerpt":null,"covers":null,"content":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li><p><code>.center</code>表示要被居中的元素，<code>.wrap</code> 表示要居中的元素的父元素（包含<code>.center</code>元素的元素）。</p>\n<p>为了便于理解和叙述同一：</p>\n<ul>\n<li><p>对于文本内容居中的情况，<code>.wrap</code>就是指包含文字的元素（例如<code>&lt;i&gt;文字&lt;/i&gt;</code> ，i标签就是<code>.wrap</code> ）。</p>\n<p>文本内容会在外部创建一个行框（line-box），可以将文本看作是一个（外框隐形）的<strong>行内元素</strong> ，line-box内部可以包含普通文本框、inline-block元素、inline元素。</p>\n</li>\n<li><p>将文本内容包含在一个容器中（‘父亲’），然后再将该容器在另一个容器（‘祖父’）内居中不看作是文本内容居中，而是该文本内容外部容器的居中（‘父亲’在’祖父‘内居中）。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>须知某些情况不设置元素宽高、边框色/背景，无法看出居中效果，也就无所谓居中与否</strong>。</p>\n<p>例如父容器不设置背景或边框，无法看出子元素是否居中，<strong>示例代码只是写出了该居中方法所需要的那部分样式</strong> 。</p>\n</li>\n<li><p><strong>inline元素</strong>，准确来说，是不可替换（non-replace）的inline元素，<strong>不能设置竖直方向上的margin和padding</strong>，下不赘述。（margin同理）</p>\n<p>参看<a href=\"http://www.w3.org/TR/CSS2/box.html#margin-properties\" target=\"_blank\" rel=\"noopener\">margin规定</a>和<a href=\"http://www.w3.org/TR/CSS2/box.html#padding-propertie\" target=\"_blank\" rel=\"noopener\">padding规定</a> ，之所以不能设置margin/padding，是因为</p>\n<blockquote>\n<p>padding的值是根据目标元素的width计算出来的，而inline中的non-replace元素的width是不确定的。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>CSS兼容性情况未作说明，具体自行查阅<a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"noopener\">caniuse</a>。</li>\n<li>推荐使用那些不必使用到精确数值（如50px，20rem这种情况，百分比值50%除外）的方法。</li>\n</ul>\n<hr>\n<h1 id=\"行内内容的居中\"><a href=\"#行内内容的居中\" class=\"headerlink\" title=\"行内内容的居中\"></a>行内内容的居中</h1><p>如何让一个容器的行内内容（文本和行内元素–inline/inlineblock）居中。（当然inline-block比较特殊，即有行内属性，又有块级属性）</p>\n<h2 id=\"text-align-center水平居中\"><a href=\"#text-align-center水平居中\" class=\"headerlink\" title=\"text-align:center水平居中\"></a>text-align:center水平居中</h2><p>在<strong>块级元素</strong>上设置<code>text-align:center</code>，其内部的<strong>inline或inline-block</strong>的子元素以及<strong>文本内容</strong>会在父元素内居中。</p>\n<h2 id=\"line-height垂直居中\"><a href=\"#line-height垂直居中\" class=\"headerlink\" title=\"line-height垂直居中\"></a>line-height垂直居中</h2><p>line-height设置了行间的距离（行高），将要居中的元素的line-heigth值设置为和其<strong>块级父元素</strong>的height值一样时，其内部内容会垂直居中。</p>\n<p>用于<strong>单行的行内元素</strong>的垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>line-height不能使用负值</li>\n</ul>\n<ul>\n<li>在块级元素使用line-height是定义该元素基线之间的最小距离而不是最大距离。</li>\n</ul>\n<h2 id=\"vertical-align-middle垂直居中\"><a href=\"#vertical-align-middle垂直居中\" class=\"headerlink\" title=\"vertical-align:middle垂直居中\"></a>vertical-align:middle垂直居中</h2><p>vertical-align的使用效果要分为以下不同情况：</p>\n<ul>\n<li><p>行内元素inline/linline-block/inline-table</p>\n<p>多用于图文排版，将图片和文字进行垂直对齐。</p>\n<p>使用伪元素（也可以<code>.wrap</code>的父元素和兄弟元素进行居中，将下面代码中的<code>.wrap::before</code>换成<code>.wrap</code>的兄弟元素的选择器即可）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap::before&#123; //或者::after</span><br><span class=\"line\">  content: '';</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline-block</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">height</span>: 100%;</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">vertical-align</span>: <span class=\"selector-tag\">middle</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li><p>直接对一个inline-block元素（block、list-item元素更不必说）元素设置<code>vertical-align:middle</code>往往不能让其内部的达到预期的垂直居中效果，因为：</p>\n<blockquote>\n<p>vertical-align大部分取值是<strong>相对于父元素</strong>来说的</p>\n</blockquote>\n<p>例如<code>vertical-align:baseline</code>（vertical-align的默认值）是相对于父元素的基线对齐，<code>vertical-align:middle</code>是相对与父元素的中线对齐（中线位置受到基线的影响）。</p>\n<p>而父元素的基线取值有以下规则：</p>\n<ul>\n<li><p>inline类：baseline就是文本的基线——基线的位置（当前元素默认字体的）小写字母x的底端，font-size和line-height都会对其产生影响。</p>\n</li>\n<li><p>inline-block类</p>\n<ul>\n<li><blockquote>\n<p>正常流内容的情况下，<code>inline-block</code>元素的baseline就是最后一个作为内容存在的元素的baseline</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>在overflow属性不为visible的情况下，baseline就是margin-box的下边界</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>在没有内容但是内容区还有高度的情况下，baseline还是margin-box的下边界。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>可替换元素（如img）</p>\n<blockquote>\n<p>不管display设置为inline还是inline-block，其baseline都为margin-box</p>\n</blockquote>\n</li>\n<li><p>有多个baseline时（如不同的字体），以baseline最低者为准。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>设置为middle也不一定是真正的对齐</strong>，某些字体的中线位置不一定顶部和底部的正中间。</p>\n</li>\n<li><p>不同风格的字体常有不同的排版标准，因此有不同的基线/中线/顶线等，多种字体混合排版会让基线发生变化（参看父元素的基线取值规则）。</p>\n</li>\n</ul>\n</li>\n<li><p>表格单元格（table-cell）元素</p>\n<p>在单元格上设置<code>vertical-align:middle</code>，其内部内容将垂直居中。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter\" target=\"_blank\" rel=\"noopener\"><code>::first-letter</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line\" target=\"_blank\" rel=\"noopener\"><code>::first-line</code></a> 伪元素  （同第一条行内元素）</p>\n</li>\n</ul>\n<h1 id=\"块级元素居中\"><a href=\"#块级元素居中\" class=\"headerlink\" title=\"块级元素居中\"></a>块级元素居中</h1><p>block、list-item、inline-block等元素如何在其父元素中居中。</p>\n<h2 id=\"margin-padding值设置居中\"><a href=\"#margin-padding值设置居中\" class=\"headerlink\" title=\"margin/padding值设置居中\"></a>margin/padding值设置居中</h2><p>最基础的方法是设置<strong>精确的</strong>padding（父元素上）或margin（子元素上）<strong>值</strong>使得子元素居中，这里不再示例。</p>\n<h3 id=\"clac计算数值\"><a href=\"#clac计算数值\" class=\"headerlink\" title=\"clac计算数值\"></a>clac计算数值</h3><p>margin值为 父容器宽/高的50% 减去 自身宽/高的50%：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20rem</span>;<span class=\"attribute\">height</span>: <span class=\"number\">20rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:<span class=\"built_in\">calc</span>(50% - 10rem);</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"built_in\">calc</span>(50% - 10rem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：inline水平的元素margin/padding设置<strong>仅在左右方向上有效</strong>。</p>\n<h3 id=\"margin-0-auto左右居中\"><a href=\"#margin-0-auto左右居中\" class=\"headerlink\" title=\"margin:0 auto左右居中\"></a>margin:0 auto左右居中</h3><p>要居中的<strong>块级元素（block）</strong>元素设置<code>margin:0 auto</code> 。</p>\n<p>注意：<strong>对浮动元素、绝对定位和固定定位的元素无效</strong> 。（注意：使用绝对定位+<a href=\"偏移量0+margin:auto\">偏移量0+margin:auto</a>方法中使用了四个方向的值为0偏移量例外）</p>\n<hr>\n<p>附：</p>\n<p>注意margin/pading</p>\n<blockquote>\n<p>百分比值参照其<strong>包含块的宽度</strong>进行计算</p>\n</blockquote>\n<p>因此使用<code>margin:auto</code>并不能实现垂直方向上的居中，垂直居中最好不要使用<code>margin/pading</code>来实现。（当然如果确切知道父容器的高度，使用精确的margin/pading数值来实现不再此讨论之列）</p>\n<h2 id=\"position-absolute居中\"><a href=\"#position-absolute居中\" class=\"headerlink\" title=\"position:absolute居中\"></a>position:absolute居中</h2><p>在父元素上设置定位，再在要居中的子元素上使用绝对定位进行居中。</p>\n<p>最基础的方法：计算出要居中的元素宽高与父容器宽高的差值，然后将差值除以2得到精确的值，再用以设置精确的水平和垂直偏移量；</p>\n<p>其次是设置水平和垂直偏移量鸽50%，然会设置水平和垂直的负margin值——取值分别为要居中的子元素宽高的半。</p>\n<p>以上方法均需要使用容器宽高的确切值，灵活性较差，以下方法更为灵活：</p>\n<h3 id=\"偏移量50-负margin值\"><a href=\"#偏移量50-负margin值\" class=\"headerlink\" title=\"偏移量50%+负margin值\"></a>偏移量50%+负margin值</h3><p>设置50%的水平和垂直偏移，然后设置的margin-top和margin-left值是要居中元素自身宽/高的一半的负数 ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;<span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:-<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"偏移量50-负50-translate值\"><a href=\"#偏移量50-负50-translate值\" class=\"headerlink\" title=\"偏移量50%+负50%translate值\"></a>偏移量50%+负50%translate值</h3><p>使用位移transform:translate，将设置了50%偏移的子元素”往回”移动自身宽高的一半：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;<span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"偏移量0-margin-auto\"><a href=\"#偏移量0-margin-auto\" class=\"headerlink\" title=\"偏移量0+margin:auto\"></a>偏移量0+margin:auto</h3><p>父元素设置相对或绝对定位；要居中的子元素设置绝对定位，所有偏移量为0，外边距为auto：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">positon</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;<span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;<span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"flex弹性布局居中\"><a href=\"#flex弹性布局居中\" class=\"headerlink\" title=\"flex弹性布局居中\"></a>flex弹性布局居中</h2><p>父元素设置为弹性盒子（容器），子元素就成为了弹性元素，利用flex相关属性进行居中。</p>\n<p>更多flex相关信息&gt;&gt;<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\" target=\"_blank\" rel=\"noopener\">MDN-弹性盒子</a></p>\n<ul>\n<li>父元素设置为弹性容器<code>display:flex</code>，并设置弹性容器内主轴/侧轴<code>justify-content/align-content</code>值为<code>center</code>：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex; <span class=\"comment\">/*使用flex盒子*/</span></span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>:center;<span class=\"comment\">/*主轴上居中*/</span></span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:center;<span class=\"comment\">/*侧轴上居中*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素设置为弹性容器<code>display:flex</code>，子元素设置<code>magrin:auto</code> ：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>注意：</p>\n<ul>\n<li>如果有多个弹性子元素，默认情况下弹性子元素会成一横排分布在父元素容器中，因为<ol>\n<li>flex默认将子元素水平排列到一行（<code>flex-direction:row</code>），使用<code>flex-direction:column</code>可以使子元素垂直排成一列。</li>\n<li>flex默认子元素不折行显示（<code>flex-wrap: nowrap</code> ），使用<code>flex-wrap: wrap</code>可使子元素自动折行显示（当一行宽/高度不足容下多个子元素时折行为多行/列）。</li>\n</ol>\n</li>\n<li>弹性盒子的主轴不是固定的，它由弹性子元素的排列方式（flex-direction）决定。</li>\n</ul>\n<ul>\n<li><p><code>align-items</code>和<code>align-content</code>区别：</p>\n<ul>\n<li><code>align-content</code>属性只适用于<strong>多行子元素</strong>（超过一行，当然如果主轴是垂直轴，则应该称为多列，下同）的 flex 容器，<strong>如果只有一行子元素，该属性不起作用；</strong><code>align-items</code>适用于任意行子元素的<code>flex</code>容器。</li>\n<li><code>align-content</code>是设置一列子元素在整个侧轴上的对其方式；而<code>align-items</code>是设置每个子元素在该行的高度范围内的侧轴上的对齐方式，相当于将侧轴按行平分，设置的是子元素在该行高度范围内的对齐方式。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"object-fit和object-postion居中\"><a href=\"#object-fit和object-postion居中\" class=\"headerlink\" title=\"object-fit和object-postion居中\"></a>object-fit和object-postion居中</h2><p><strong>object-fit 只能用于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element\" target=\"_blank\" rel=\"noopener\">可替换元素</a>(replaced element) </strong>，用以</p>\n<blockquote>\n<p>指定替换元素的内容应该如何适应到其使用的高度和宽度确定的框。</p>\n</blockquote>\n<p>一般用做图片的样式。它有着类似background-image的用法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">object-fit</span>:fill|cover|contain|none|scale-down;</span><br><span class=\"line\"><span class=\"comment\">/*其属性值，分别是填充（默认）、包含、覆盖（可能被裁剪）、无变化（保持原状）和等比例缩放*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而object-positon属性默认值是<code>50% 50%</code>，也就是居中(也就是要求居中的情况不用写这个属性了……），对元素定位控制，类似background-postion。</p>\n<h2 id=\"grid网格布局居中\"><a href=\"#grid网格布局居中\" class=\"headerlink\" title=\"grid网格布局居中\"></a>grid网格布局居中</h2><p>根据需要布局网格，将要居中的元素“摆放”在网格中间即可。</p>\n<p>示例制作3x3的表格内元素居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(3, 1fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(3, 1fr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"表格内容居中\"><a href=\"#表格内容居中\" class=\"headerlink\" title=\"表格内容居中\"></a>表格内容居中</h1><ul>\n<li>表格式布局：根据语义化原则，使用表格布局非表格的内容已不再合适，而且表格的<code>&lt;td&gt;</code> <code>&lt;th&gt;</code>标签的align和valign属性已经是HTML的废除标签属性，<strong>建议不要使用</strong>。</li>\n<li>非表格元素模拟表格：可以使用<code>display:table-cell</code> 模拟其为一个表格，由于不建议使用废除的align和valign标签属性，故而也就<code>vertical-align:middle</code> 垂直居中具有实用性，将元素模拟成表格进行垂直居中意义也不大了，因此<strong>建议不要使用</strong>。</li>\n<li>真正的表格，<strong>表格内容的居中</strong>：<ul>\n<li>水平：<code>text-align:center</code> </li>\n<li>垂直：<code>vertical-align:middle</code></li>\n<li>也可以使用margin/pading等其他方法来控制表格内容的居中</li>\n</ul>\n</li>\n</ul>\n","more":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li><p><code>.center</code>表示要被居中的元素，<code>.wrap</code> 表示要居中的元素的父元素（包含<code>.center</code>元素的元素）。</p>\n<p>为了便于理解和叙述同一：</p>\n<ul>\n<li><p>对于文本内容居中的情况，<code>.wrap</code>就是指包含文字的元素（例如<code>&lt;i&gt;文字&lt;/i&gt;</code> ，i标签就是<code>.wrap</code> ）。</p>\n<p>文本内容会在外部创建一个行框（line-box），可以将文本看作是一个（外框隐形）的<strong>行内元素</strong> ，line-box内部可以包含普通文本框、inline-block元素、inline元素。</p>\n</li>\n<li><p>将文本内容包含在一个容器中（‘父亲’），然后再将该容器在另一个容器（‘祖父’）内居中不看作是文本内容居中，而是该文本内容外部容器的居中（‘父亲’在’祖父‘内居中）。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>须知某些情况不设置元素宽高、边框色/背景，无法看出居中效果，也就无所谓居中与否</strong>。</p>\n<p>例如父容器不设置背景或边框，无法看出子元素是否居中，<strong>示例代码只是写出了该居中方法所需要的那部分样式</strong> 。</p>\n</li>\n<li><p><strong>inline元素</strong>，准确来说，是不可替换（non-replace）的inline元素，<strong>不能设置竖直方向上的margin和padding</strong>，下不赘述。（margin同理）</p>\n<p>参看<a href=\"http://www.w3.org/TR/CSS2/box.html#margin-properties\" target=\"_blank\" rel=\"noopener\">margin规定</a>和<a href=\"http://www.w3.org/TR/CSS2/box.html#padding-propertie\" target=\"_blank\" rel=\"noopener\">padding规定</a> ，之所以不能设置margin/padding，是因为</p>\n<blockquote>\n<p>padding的值是根据目标元素的width计算出来的，而inline中的non-replace元素的width是不确定的。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>CSS兼容性情况未作说明，具体自行查阅<a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"noopener\">caniuse</a>。</li>\n<li>推荐使用那些不必使用到精确数值（如50px，20rem这种情况，百分比值50%除外）的方法。</li>\n</ul>\n<hr>\n<h1 id=\"行内内容的居中\"><a href=\"#行内内容的居中\" class=\"headerlink\" title=\"行内内容的居中\"></a>行内内容的居中</h1><p>如何让一个容器的行内内容（文本和行内元素–inline/inlineblock）居中。（当然inline-block比较特殊，即有行内属性，又有块级属性）</p>\n<h2 id=\"text-align-center水平居中\"><a href=\"#text-align-center水平居中\" class=\"headerlink\" title=\"text-align:center水平居中\"></a>text-align:center水平居中</h2><p>在<strong>块级元素</strong>上设置<code>text-align:center</code>，其内部的<strong>inline或inline-block</strong>的子元素以及<strong>文本内容</strong>会在父元素内居中。</p>\n<h2 id=\"line-height垂直居中\"><a href=\"#line-height垂直居中\" class=\"headerlink\" title=\"line-height垂直居中\"></a>line-height垂直居中</h2><p>line-height设置了行间的距离（行高），将要居中的元素的line-heigth值设置为和其<strong>块级父元素</strong>的height值一样时，其内部内容会垂直居中。</p>\n<p>用于<strong>单行的行内元素</strong>的垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>line-height不能使用负值</li>\n</ul>\n<ul>\n<li>在块级元素使用line-height是定义该元素基线之间的最小距离而不是最大距离。</li>\n</ul>\n<h2 id=\"vertical-align-middle垂直居中\"><a href=\"#vertical-align-middle垂直居中\" class=\"headerlink\" title=\"vertical-align:middle垂直居中\"></a>vertical-align:middle垂直居中</h2><p>vertical-align的使用效果要分为以下不同情况：</p>\n<ul>\n<li><p>行内元素inline/linline-block/inline-table</p>\n<p>多用于图文排版，将图片和文字进行垂直对齐。</p>\n<p>使用伪元素（也可以<code>.wrap</code>的父元素和兄弟元素进行居中，将下面代码中的<code>.wrap::before</code>换成<code>.wrap</code>的兄弟元素的选择器即可）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrap::before&#123; //或者::after</span><br><span class=\"line\">  content: '';</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">inline-block</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">height</span>: 100%;</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span><span class=\"selector-pseudo\">:inline-block</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">vertical-align</span>: <span class=\"selector-tag\">middle</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li><p>直接对一个inline-block元素（block、list-item元素更不必说）元素设置<code>vertical-align:middle</code>往往不能让其内部的达到预期的垂直居中效果，因为：</p>\n<blockquote>\n<p>vertical-align大部分取值是<strong>相对于父元素</strong>来说的</p>\n</blockquote>\n<p>例如<code>vertical-align:baseline</code>（vertical-align的默认值）是相对于父元素的基线对齐，<code>vertical-align:middle</code>是相对与父元素的中线对齐（中线位置受到基线的影响）。</p>\n<p>而父元素的基线取值有以下规则：</p>\n<ul>\n<li><p>inline类：baseline就是文本的基线——基线的位置（当前元素默认字体的）小写字母x的底端，font-size和line-height都会对其产生影响。</p>\n</li>\n<li><p>inline-block类</p>\n<ul>\n<li><blockquote>\n<p>正常流内容的情况下，<code>inline-block</code>元素的baseline就是最后一个作为内容存在的元素的baseline</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>在overflow属性不为visible的情况下，baseline就是margin-box的下边界</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>在没有内容但是内容区还有高度的情况下，baseline还是margin-box的下边界。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>可替换元素（如img）</p>\n<blockquote>\n<p>不管display设置为inline还是inline-block，其baseline都为margin-box</p>\n</blockquote>\n</li>\n<li><p>有多个baseline时（如不同的字体），以baseline最低者为准。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>设置为middle也不一定是真正的对齐</strong>，某些字体的中线位置不一定顶部和底部的正中间。</p>\n</li>\n<li><p>不同风格的字体常有不同的排版标准，因此有不同的基线/中线/顶线等，多种字体混合排版会让基线发生变化（参看父元素的基线取值规则）。</p>\n</li>\n</ul>\n</li>\n<li><p>表格单元格（table-cell）元素</p>\n<p>在单元格上设置<code>vertical-align:middle</code>，其内部内容将垂直居中。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter\" target=\"_blank\" rel=\"noopener\"><code>::first-letter</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line\" target=\"_blank\" rel=\"noopener\"><code>::first-line</code></a> 伪元素  （同第一条行内元素）</p>\n</li>\n</ul>\n<h1 id=\"块级元素居中\"><a href=\"#块级元素居中\" class=\"headerlink\" title=\"块级元素居中\"></a>块级元素居中</h1><p>block、list-item、inline-block等元素如何在其父元素中居中。</p>\n<h2 id=\"margin-padding值设置居中\"><a href=\"#margin-padding值设置居中\" class=\"headerlink\" title=\"margin/padding值设置居中\"></a>margin/padding值设置居中</h2><p>最基础的方法是设置<strong>精确的</strong>padding（父元素上）或margin（子元素上）<strong>值</strong>使得子元素居中，这里不再示例。</p>\n<h3 id=\"clac计算数值\"><a href=\"#clac计算数值\" class=\"headerlink\" title=\"clac计算数值\"></a>clac计算数值</h3><p>margin值为 父容器宽/高的50% 减去 自身宽/高的50%：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20rem</span>;<span class=\"attribute\">height</span>: <span class=\"number\">20rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:<span class=\"built_in\">calc</span>(50% - 10rem);</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:<span class=\"built_in\">calc</span>(50% - 10rem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：inline水平的元素margin/padding设置<strong>仅在左右方向上有效</strong>。</p>\n<h3 id=\"margin-0-auto左右居中\"><a href=\"#margin-0-auto左右居中\" class=\"headerlink\" title=\"margin:0 auto左右居中\"></a>margin:0 auto左右居中</h3><p>要居中的<strong>块级元素（block）</strong>元素设置<code>margin:0 auto</code> 。</p>\n<p>注意：<strong>对浮动元素、绝对定位和固定定位的元素无效</strong> 。（注意：使用绝对定位+<a href=\"偏移量0+margin:auto\">偏移量0+margin:auto</a>方法中使用了四个方向的值为0偏移量例外）</p>\n<hr>\n<p>附：</p>\n<p>注意margin/pading</p>\n<blockquote>\n<p>百分比值参照其<strong>包含块的宽度</strong>进行计算</p>\n</blockquote>\n<p>因此使用<code>margin:auto</code>并不能实现垂直方向上的居中，垂直居中最好不要使用<code>margin/pading</code>来实现。（当然如果确切知道父容器的高度，使用精确的margin/pading数值来实现不再此讨论之列）</p>\n<h2 id=\"position-absolute居中\"><a href=\"#position-absolute居中\" class=\"headerlink\" title=\"position:absolute居中\"></a>position:absolute居中</h2><p>在父元素上设置定位，再在要居中的子元素上使用绝对定位进行居中。</p>\n<p>最基础的方法：计算出要居中的元素宽高与父容器宽高的差值，然后将差值除以2得到精确的值，再用以设置精确的水平和垂直偏移量；</p>\n<p>其次是设置水平和垂直偏移量鸽50%，然会设置水平和垂直的负margin值——取值分别为要居中的子元素宽高的半。</p>\n<p>以上方法均需要使用容器宽高的确切值，灵活性较差，以下方法更为灵活：</p>\n<h3 id=\"偏移量50-负margin值\"><a href=\"#偏移量50-负margin值\" class=\"headerlink\" title=\"偏移量50%+负margin值\"></a>偏移量50%+负margin值</h3><p>设置50%的水平和垂直偏移，然后设置的margin-top和margin-left值是要居中元素自身宽/高的一半的负数 ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;<span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;<span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>:-<span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>:-<span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"偏移量50-负50-translate值\"><a href=\"#偏移量50-负50-translate值\" class=\"headerlink\" title=\"偏移量50%+负50%translate值\"></a>偏移量50%+负50%translate值</h3><p>使用位移transform:translate，将设置了50%偏移的子元素”往回”移动自身宽高的一半：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;<span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"偏移量0-margin-auto\"><a href=\"#偏移量0-margin-auto\" class=\"headerlink\" title=\"偏移量0+margin:auto\"></a>偏移量0+margin:auto</h3><p>父元素设置相对或绝对定位；要居中的子元素设置绝对定位，所有偏移量为0，外边距为auto：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">positon</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;<span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;<span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"flex弹性布局居中\"><a href=\"#flex弹性布局居中\" class=\"headerlink\" title=\"flex弹性布局居中\"></a>flex弹性布局居中</h2><p>父元素设置为弹性盒子（容器），子元素就成为了弹性元素，利用flex相关属性进行居中。</p>\n<p>更多flex相关信息&gt;&gt;<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\" target=\"_blank\" rel=\"noopener\">MDN-弹性盒子</a></p>\n<ul>\n<li>父元素设置为弹性容器<code>display:flex</code>，并设置弹性容器内主轴/侧轴<code>justify-content/align-content</code>值为<code>center</code>：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex; <span class=\"comment\">/*使用flex盒子*/</span></span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>:center;<span class=\"comment\">/*主轴上居中*/</span></span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:center;<span class=\"comment\">/*侧轴上居中*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>父元素设置为弹性容器<code>display:flex</code>，子元素设置<code>magrin:auto</code> ：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>注意：</p>\n<ul>\n<li>如果有多个弹性子元素，默认情况下弹性子元素会成一横排分布在父元素容器中，因为<ol>\n<li>flex默认将子元素水平排列到一行（<code>flex-direction:row</code>），使用<code>flex-direction:column</code>可以使子元素垂直排成一列。</li>\n<li>flex默认子元素不折行显示（<code>flex-wrap: nowrap</code> ），使用<code>flex-wrap: wrap</code>可使子元素自动折行显示（当一行宽/高度不足容下多个子元素时折行为多行/列）。</li>\n</ol>\n</li>\n<li>弹性盒子的主轴不是固定的，它由弹性子元素的排列方式（flex-direction）决定。</li>\n</ul>\n<ul>\n<li><p><code>align-items</code>和<code>align-content</code>区别：</p>\n<ul>\n<li><code>align-content</code>属性只适用于<strong>多行子元素</strong>（超过一行，当然如果主轴是垂直轴，则应该称为多列，下同）的 flex 容器，<strong>如果只有一行子元素，该属性不起作用；</strong><code>align-items</code>适用于任意行子元素的<code>flex</code>容器。</li>\n<li><code>align-content</code>是设置一列子元素在整个侧轴上的对其方式；而<code>align-items</code>是设置每个子元素在该行的高度范围内的侧轴上的对齐方式，相当于将侧轴按行平分，设置的是子元素在该行高度范围内的对齐方式。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"object-fit和object-postion居中\"><a href=\"#object-fit和object-postion居中\" class=\"headerlink\" title=\"object-fit和object-postion居中\"></a>object-fit和object-postion居中</h2><p><strong>object-fit 只能用于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element\" target=\"_blank\" rel=\"noopener\">可替换元素</a>(replaced element) </strong>，用以</p>\n<blockquote>\n<p>指定替换元素的内容应该如何适应到其使用的高度和宽度确定的框。</p>\n</blockquote>\n<p>一般用做图片的样式。它有着类似background-image的用法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">object-fit</span>:fill|cover|contain|none|scale-down;</span><br><span class=\"line\"><span class=\"comment\">/*其属性值，分别是填充（默认）、包含、覆盖（可能被裁剪）、无变化（保持原状）和等比例缩放*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而object-positon属性默认值是<code>50% 50%</code>，也就是居中(也就是要求居中的情况不用写这个属性了……），对元素定位控制，类似background-postion。</p>\n<h2 id=\"grid网格布局居中\"><a href=\"#grid网格布局居中\" class=\"headerlink\" title=\"grid网格布局居中\"></a>grid网格布局居中</h2><p>根据需要布局网格，将要居中的元素“摆放”在网格中间即可。</p>\n<p>示例制作3x3的表格内元素居中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(3, 1fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(3, 1fr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-row</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">grid-column</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"表格内容居中\"><a href=\"#表格内容居中\" class=\"headerlink\" title=\"表格内容居中\"></a>表格内容居中</h1><ul>\n<li>表格式布局：根据语义化原则，使用表格布局非表格的内容已不再合适，而且表格的<code>&lt;td&gt;</code> <code>&lt;th&gt;</code>标签的align和valign属性已经是HTML的废除标签属性，<strong>建议不要使用</strong>。</li>\n<li>非表格元素模拟表格：可以使用<code>display:table-cell</code> 模拟其为一个表格，由于不建议使用废除的align和valign标签属性，故而也就<code>vertical-align:middle</code> 垂直居中具有实用性，将元素模拟成表格进行垂直居中意义也不大了，因此<strong>建议不要使用</strong>。</li>\n<li>真正的表格，<strong>表格内容的居中</strong>：<ul>\n<li>水平：<code>text-align:center</code> </li>\n<li>垂直：<code>vertical-align:middle</code></li>\n<li>也可以使用margin/pading等其他方法来控制表格内容的居中</li>\n</ul>\n</li>\n</ul>\n","categories":[{"name":"css","path":"api/categories/css.json"}],"tags":[]}